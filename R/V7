# Work in progress
# Author: Anthony T.O'Brien Villate. MD/MPH
# Multistate models & decision analysis for ICU aggressive care

# 0. Load libraries ------------------------------------------------------------
library("tidyverse")
library("dplyr")
library("stringr")
library("runner")
library("msm")
library("lubridate")
library("parallel")
library("markovchain")
library("purrr")
library("data.table")
library("survival")
library("survminer")

# Definitions 
# States
# 0 non aggrssive 
# 1 aggressive icu 
# 2 cmo
# 3 home
# 4 death


# 1. Select cirrhosis cohort ---------------------------------------------------

df<-read.csv("C:/Users/Me/Desktop/mimic_timecohort_20190304.csv")

# convert icustay_id to factor
df <- df %>% mutate(icustay_id = as.factor(icustay_id))

# Replace NA in flags with 0
df <- 
  df %>% 
  mutate(death_flag = replace_na(death_flag, 0),
         cv_flag = replace_na(cv_flag, 0),
         crrt_flag = replace_na(crrt_flag, 0),
         vasopres_flag = replace_na(vasopres_flag, 0),
         mechvent_flag = replace_na(mechvent_flag, 0),
         cmo_flag = replace_na(cmo_flag, 0))

# Select icustays with more than 1 day stay, only first time admission,
# >=18years and with a sofa score


df <- 
  df %>% 
  group_by(icustay_id) %>% 
  filter(length(icustay_id)>1 & 
           admission_age>=18)  

# select patients that received mechanical ventilation
df<-df %>% inner_join(y=df %>% filter(mechvent_flag %in% 1) %>% distinct(icustay_id) )

# Create quartiles for each sofa score 
# sofa goes from 0-24 so: quantile(seq(1:24))
df <- 
  df %>% 
  mutate(sofa_group = case_when(sofa_last >= 0 & sofa_last <= 6 ~1,
                                sofa_last >= 7 & sofa_last <= 12 ~ 2,
                                sofa_last >= 13 & sofa_last <= 18 ~ 3,
                                sofa_last >= 19 & sofa_last <= 24 ~ 4))



# 2. Redefine CMO --------------------------------------------------------------

# CMO will be redefined as follows: 
# state--lead_state_1_day_out--2_day_out--3_day_out--4_day_out--5_day_out--CMO
#   1               0              4                                        1
#   1               0              0           4                            1 
#   1               0              0           0         4                  1 
#   1               0              0           0         0          4       1
# This is making the assumption that patients that transition from 
# highly invasive care to non-invasive care and then died were on CMO 

df<-df %>% 
  mutate(onedayout=lead(states, n=1L),
         twodayout=lead(states, n=2L),
         threedayout=lead(states, n=3L),
         fourdayout=lead(states, n=4L),
         fivedayout=lead(states, n=5L),
         sixdayout=lead(states, n=6L),
         sevendayout=lead(states, n=7L),
         eightdayout=lead(states, n=8L),
         ninedayout=lead(states, n=9L),
         tendayout=lead(states, n=10L))

df<-df %>% 
  mutate(CMO_additional_flag=
           case_when((states==1)&(onedayout==0)&(twodayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==0)&(sixdayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==0)&(sixdayout==0)&(sevendayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==0)&(sixdayout==0)&(sevendayout==0)&(eightdayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==0)&(sixdayout==0)&(sevendayout==0)&(eightdayout==0)&(ninedayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==0)&(sixdayout==0)&(sevendayout==0)&(eightdayout==0)&(ninedayout==0)&(tendayout==4)~1))

# Drop additional columns created to be organized
df$onedayout<-NULL
df$twodayout<-NULL
df$threedayout<-NULL
df$fourdayout<-NULL
df$fivedayout<-NULL
df$sixdayout<-NULL
df$sevendayout<-NULL
df$eightdayout<-NULL
df$ninedayout<-NULL
df$tendayout<-NULL

# Add in the end state when it is dead (4) 
df<-df %>% 
  mutate(A= ifelse(states==4, 4,CMO_additional_flag))

# Filling in CMO cases according to above assumption on post-HIC days
A <- c(df$A)
index.1<-which(df$A %in% c(1)) # define location for 1s in A
index.14<-which(df$A %in% c(1,4)) # define location for 1s and 4s in A
loc.1<-which(index.14 %in% index.1) # location of 1s in  index.14
loc.4<-loc.1+1 # location of 4s relative to 1s in index.14
start.i<-((index.14[loc.1])+1) # starting index for replacing with 2
end.i<-((index.14[loc.4])-1) # ending index for replacing with 2 in index
fill.v<-sort(c(start.i, end.i))# sequence of indexes to fill-in with # 2
fill.m<-matrix(fill.v,nrow = (length(fill.v)/2),ncol = 2, byrow=TRUE) # create matrix of 
list.1<-apply(fill.m, MARGIN=1,FUN=function(x) seq(x[1],x[2])) # create a list with indexes to replace
list.2<-unlist(list.1) # unlist list to use as the indexes for replacement
df$A[list.2] <- 2 # replace indexed location with 2

rm(index.1)
rm(index.14)
rm(loc.1)
rm(loc.4)
rm(start.i)
rm(end.i)
rm(fill.v)
rm(fill.m)
rm(list.2)
rm(list.1)
rm(A)

# Update states & cmo flag with new CMO definition
df<-df %>%mutate(states= ifelse(A %in% 2, 2, states),
                 cmo_flag=ifelse(A %in% 2, 1, cmo_flag))
df$A<-NULL
df$CMO_additional_flag<-NULL


# add in group factor for number of days of icu aggressive care received
# also only include individuals who have spent greater or equal to 2 days

df<-
  df %>% 
  left_join((df %>% 
                    group_by(icustay_id) %>% 
                    filter(states %in% 1) %>% 
                    tally() %>% 
                    select(icustay_id, treatment_grp=n)),
            by='icustay_id') %>% 
  group_by(icustay_id)%>% 
  filter(n()>=2)

# 3 Check if there are people entering more than once---------------------------

nrow((inner_join(x=df %>% filter(first_icu_stay %in% 'True'),
           y=df %>% filter(first_icu_stay %in% 'False'), 
           by='icustay_id')))

# 4. Assumption on state logic--------------------------------------------------
# this is a mismatch in logic can't go from 4->3
df<-df %>% 
  group_by(icustay_id) %>% 
  mutate(states= 
           ifelse(states %in% 4 
                  & lead(states) %in% c(unique(df$states)[1:4]), 1,states)) 

#5. Isolate aggressive care as a one time treatment option----------------------
# ie they enter into aggressive care and once out dont go back

example.df<-df %>% select(id=icustay_id, 
                          day=icudayseq_asc, 
                          states, 
                          sofa=sofa_group)
 
f1 <- function(data, n){
  ids <- data %>%
    mutate(stateslead = lead(states, default = last(states))) %>%
    group_by(grp = rleid(states == 1)) %>% 
    filter(n() == n, states == 1, stateslead != 1) %>%     
    group_by(id) %>%     
    filter(n() == 1) %>%
    pull(id)
  
  data %>%
    filter(id %in% ids) %>%
    group_by(id) %>% 
    filter(cumsum(states) > 0)}

out1 <- map(1:30, f1, data = as.tibble(example.df))



# 5. Multistate models ----------------------------------------------------------

# Prepare data 
# individuals must have more than one day after receiving agressive care
# and can not re enter into aggressive care

lmsm <- 
  map(out1, ~.x %>% 
   mutate(leadstates = lead(states)) %>% 
   filter(!(states %in% 1)) %>% 
   group_by(id) %>% 
   filter(n()>2) %>% 
   mutate(dropflag= ifelse(leadstates%in%1,1,0))) 
  
key<-map(lmsm, ~.x %>% filter(dropflag %in% 1) %>% select(id))

lmsm<-lapply(1:length(lmsm), 
             function(x) 
               lmsm[[x]] %>%
               anti_join(key[[x]]) %>% 
               select(-c(leadstates,dropflag)) %>% 
               select(icustay_id=id,
                      time=day,
                      states,
                      sofa_quantile=sofa) %>% 
               mutate(states=case_when(states%in%0~1,
                                       states%in%2~2,
                                       states%in%3~3,
                                       states%in%4~4))
             )

# new definitions
#1: icu care, 2: cmo, 3:home, 4:death


#statetable.msm(states, icustay_id, data=lmsm[[1]]) check results

# Number of states    
nstates<-df %>% ungroup() %>% select(states) %>% mutate(states= states, maxstates=max(states)) %>% distinct(maxstates)

# Prepare initial state matrix 
lqmatrix<-lapply(1:30, 
                 function(x) 
                   matrix((statetable.msm(states, icustay_id, lmsm[[x]])/rowSums(statetable.msm(states, icustay_id, lmsm[[x]]))), 
                          ncol=nstates[[1]],
                          byrow=F))

# Add end states to initial matrix
ltm <- lapply(1:30, function(x)
  as.matrix(rbind(lqmatrix[[x]],
                  c(rep(0,each= (nstates[[1]]))),
                  c(rep(0,each= (nstates[[1]])))
  )))

# make sure all matrices are the same size
rowmax <-  max(sapply(ltm, nrow))
ltm<-lapply(ltm, function(x) 
rbind(x, matrix(0, ncol = ncol(x), nrow = rowmax-nrow(x))))


# Specifying a model
# Crude estimate consider using as qmatrixs
lfit.crude<- c()
for (i in 1:30){
  lfit.crude[[i]]<-crudeinits.msm(states ~ time, 
                             icustay_id, 
                             data = lmsm[[i]], 
                             qmatrix = ltm[[i]]
                             )
                }

#Model 1: Covariates on transition rates
# Since we may not have enough data in some sections 
# We opt to do each model by treatment day, rather than for loop/map/lapply
# this way we can pin point where we dont have enough data for convergence



fit.msm1<-msm(states ~ time, icustay_id, data = lmsm[[1]], qmatrix = ltm[[1]],covariates = ~ sofa_quantile,exacttimes=TRUE, control=list(fnscale=5000,maxit=500))
fit.msm2<-msm(states ~ time, icustay_id, data = lmsm[[2]], qmatrix = ltm[[2]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
fit.msm3<-msm(states ~ time, icustay_id, data = lmsm[[3]], qmatrix = ltm[[3]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm4<-msm(states ~ time, icustay_id, data = lmsm[[4]], qmatrix = ltm[[4]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
fit.msm5<-msm(states ~ time, icustay_id, data = lmsm[[5]], qmatrix = ltm[[5]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
fit.msm6<-msm(states ~ time, icustay_id, data = lmsm[[6]], qmatrix = ltm[[6]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
fit.msm7<-msm(states ~ time, icustay_id, data = lmsm[[7]], qmatrix = ltm[[7]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm8<-msm(states ~ time, icustay_id, data = lmsm[[8]], qmatrix = ltm[[8]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
fit.msm9<-msm(states ~ time, icustay_id, data = lmsm[[9]], qmatrix = ltm[[9]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm10<-msm(states ~ time, icustay_id, data = lmsm[[10]], qmatrix = ltm[[10]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
fit.msm11<-msm(states ~ time, icustay_id, data = lmsm[[11]], qmatrix = ltm[[11]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm12<-msm(states ~ time, icustay_id, data = lmsm[[12]], qmatrix = ltm[[12]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm13<-msm(states ~ time, icustay_id, data = lmsm[[13]], qmatrix = ltm[[13]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm14<-msm(states ~ time, icustay_id, data = lmsm[[14]], qmatrix = ltm[[14]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm15<-msm(states ~ time, icustay_id, data = lmsm[[15]], qmatrix = ltm[[15]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
fit.msm16<-msm(states ~ time, icustay_id, data = lmsm[[16]], qmatrix = ltm[[16]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
fit.msm17<-msm(states ~ time, icustay_id, data = lmsm[[17]], qmatrix = ltm[[17]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
fit.msm18<-msm(states ~ time, icustay_id, data = lmsm[[18]], qmatrix = ltm[[18]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm19<-msm(states ~ time, icustay_id, data = lmsm[[19]], qmatrix = ltm[[19]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
fit.msm20<-msm(states ~ time, icustay_id, data = lmsm[[20]], qmatrix = ltm[[20]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm21<-msm(states ~ time, icustay_id, data = lmsm[[21]], qmatrix = ltm[[21]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm22<-msm(states ~ time, icustay_id, data = lmsm[[22]], qmatrix = ltm[[22]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm23<-msm(states ~ time, icustay_id, data = lmsm[[23]], qmatrix = ltm[[23]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm24<-msm(states ~ time, icustay_id, data = lmsm[[24]], qmatrix = ltm[[24]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm25<-msm(states ~ time, icustay_id, data = lmsm[[25]], qmatrix = ltm[[25]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm26<-msm(states ~ time, icustay_id, data = lmsm[[26]], qmatrix = ltm[[26]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm27<-msm(states ~ time, icustay_id, data = lmsm[[27]], qmatrix = ltm[[27]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm28<-msm(states ~ time, icustay_id, data = lmsm[[28]], qmatrix = ltm[[28]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm29<-msm(states ~ time, icustay_id, data = lmsm[[29]], qmatrix = ltm[[29]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))
#fit.msm30<-msm(states ~ time, icustay_id, data = lmsm[[30]], qmatrix = ltm[[30]],covariates = ~ sofa_quantile,exacttimes=TRUE,control=list(fnscale=5000,maxit=500))

# gather treatment options that converged (currently manual process)
# note: needs to be made recursive
fit.list<- list(
            fit.msm1,
            fit.msm2,
            fit.msm3,
            #fit.msm4,
            fit.msm5,
            fit.msm6,
            fit.msm7,
            #fit.msm8,
            fit.msm9,
            #fit.msm10,
            fit.msm11,
            #fit.msm12,
            #fit.msm13,
            #fit.msm14,
            #fit.msm15,
            fit.msm16,
            fit.msm17,
            fit.msm18,
            #fit.msm19,
            fit.msm20)
            # ,
            # #fit.msm21,
            # #fit.msm22,
            # #fit.msm23,
            # #fit.msm24,
            # #fit.msm25,
            # #fit.msm26,
            # #fit.msm27,
            # #fit.msm28,
            # #fit.msm29,
            # #fit.msm30
            # )

#6. Transition matrices ----------------------------------------------------------------

# sofa group 1
tm.sofa1<-lapply(1:length(fit.list), 
       function(x)
         lapply(1:30, 
                function(y) 
                  pmatrix.msm(fit.list[[x]],
                              t=y, 
                              covariates = list(sofa_quantile = 1))))


# sofa group 2
tm.sofa2<-lapply(1:length(fit.list), 
                 function(x)
                   lapply(1:30, 
                          function(y) 
                            pmatrix.msm(fit.list[[x]],
                                        t=y, 
                                        covariates = list(sofa_quantile = 2))))



# sofa group 3
tm.sofa3<-lapply(1:length(fit.list), 
                 function(x)
                   lapply(1:30, 
                          function(y) 
                            pmatrix.msm(fit.list[[x]],
                                        t=y, 
                                        covariates = list(sofa_quantile = 3))))



# sofa group 4
tm.sofa4<-lapply(1:length(fit.list), 
                 function(x)
                   lapply(1:30, 
                          function(y) 
                            pmatrix.msm(fit.list[[x]],
                                        t=y, 
                                        covariates = list(sofa_quantile = 4))))


# Markov objects

# sofa group 1
mo.sofa1<-lapply(1:length(tm.sofa1), 
       function(x) 
         lapply(1:30, 
                function(y) 
                  new("markovchain",
                      transitionMatrix=((as.matrix.data.frame(tm.sofa1[[x]][[y]]))))
                )
       )

# sofa group 2
mo.sofa2<-lapply(1:length(tm.sofa2), 
                  function(x) 
                    lapply(1:30, 
                           function(y) 
                             new("markovchain",
                                 transitionMatrix=((as.matrix.data.frame(tm.sofa1[[x]][[y]]))))
                    )
)

# sofa group 3
mo.sofa3<-lapply(1:length(tm.sofa3), 
                  function(x) 
                    lapply(1:30, 
                           function(y) 
                             new("markovchain",
                                 transitionMatrix=((as.matrix.data.frame(tm.sofa1[[x]][[y]]))))
                    )
)

# sofa group 4
mo.sofa4<-lapply(1:length(tm.sofa4), 
                  function(x) 
                    lapply(1:30, 
                           function(y) 
                             new("markovchain",
                                 transitionMatrix=((as.matrix.data.frame(tm.sofa1[[x]][[y]]))))
                    )
)






#7. Marcov chain -----------------------------------------------------------------

npats<-100000

#sofa 1
mc.sofa1<-bind_rows(lapply(1:length(mo.sofa1), function(x) 
  (rmarkovchain(n = npats, #number of patients
                object = new("markovchainList",markovchains=mo.sofa1[[x]]),
                parallel = TRUE,
                num.cores=detectCores()-1)) %>% 
    group_by(iteration) %>% 
    mutate(day=as.integer(streak_run(iteration, k=1000)),
           aggressive_care_group=x) %>% 
    select(patient_id=iteration, state=values,day,aggressive_care_group) %>%
    mutate(ac_factor= case_when(aggressive_care_group %in% 1~'1',
                                aggressive_care_group %in% 2~'2',
                                aggressive_care_group %in% 3~'3',
                                aggressive_care_group %in% 4~'5',
                                aggressive_care_group %in% 5~'6',
                                aggressive_care_group %in% 6~'7',
                                aggressive_care_group %in% 7~'9',
                                aggressive_care_group %in% 8~'11',
                                aggressive_care_group %in% 9~'16',
                                aggressive_care_group %in% 10~'17',
                                aggressive_care_group %in% 11~'18',
                                aggressive_care_group %in% 12~'20'),
           os=ifelse(state%in% 4,1,0))
  ))

#sofa2   
mc.sofa2<-bind_rows(lapply(1:length(mo.sofa2), function(x) 
  (rmarkovchain(n = npats, #number of patients
                object = new("markovchainList",markovchains=mo.sofa2[[x]]),
                parallel = TRUE,
                num.cores=detectCores()-1)) %>% 
    group_by(iteration) %>% 
    mutate(day=as.integer(streak_run(iteration, k=1000)),
           aggressive_care_group=x) %>% 
    select(patient_id=iteration, state=values,day,aggressive_care_group) %>%
    mutate(ac_factor= case_when(aggressive_care_group %in% 1~'1',
                                aggressive_care_group %in% 2~'2',
                                aggressive_care_group %in% 3~'3',
                                aggressive_care_group %in% 4~'5',
                                aggressive_care_group %in% 5~'6',
                                aggressive_care_group %in% 6~'7',
                                aggressive_care_group %in% 7~'9',
                                aggressive_care_group %in% 8~'11',
                                aggressive_care_group %in% 9~'16',
                                aggressive_care_group %in% 10~'17',
                                aggressive_care_group %in% 11~'18',
                                aggressive_care_group %in% 12~'20'),
           os=ifelse(state%in% 4,1,0))
))

#sofa3
mc.sofa3<-bind_rows(lapply(1:length(mo.sofa3), function(x) 
  (rmarkovchain(n = npats, #number of patients
                object = new("markovchainList",markovchains=mo.sofa3[[x]]),
                parallel = TRUE,
                num.cores=detectCores()-1)) %>% 
    group_by(iteration) %>% 
    mutate(day=as.integer(streak_run(iteration, k=1000)),
           aggressive_care_group=x) %>% 
    select(patient_id=iteration, state=values,day,aggressive_care_group) %>%
    mutate(ac_factor= case_when(aggressive_care_group %in% 1~'1',
                                aggressive_care_group %in% 2~'2',
                                aggressive_care_group %in% 3~'3',
                                aggressive_care_group %in% 4~'5',
                                aggressive_care_group %in% 5~'6',
                                aggressive_care_group %in% 6~'7',
                                aggressive_care_group %in% 7~'9',
                                aggressive_care_group %in% 8~'11',
                                aggressive_care_group %in% 9~'16',
                                aggressive_care_group %in% 10~'17',
                                aggressive_care_group %in% 11~'18',
                                aggressive_care_group %in% 12~'20'),
           os=ifelse(state%in% 4,1,0))
))

#sofa4
mc.sofa4<-bind_rows(lapply(1:length(mo.sofa4), function(x) 
  (rmarkovchain(n = npats, #number of patients
                object = new("markovchainList",markovchains=mo.sofa4[[x]]),
                parallel = TRUE,
                num.cores=detectCores()-1)) %>% 
    group_by(iteration) %>% 
    mutate(day=as.integer(streak_run(iteration, k=1000)),
           aggressive_care_group=x) %>% 
    select(patient_id=iteration, state=values,day,aggressive_care_group) %>%
    mutate(ac_factor= case_when(aggressive_care_group %in% 1~'1',
                                aggressive_care_group %in% 2~'2',
                                aggressive_care_group %in% 3~'3',
                                aggressive_care_group %in% 4~'5',
                                aggressive_care_group %in% 5~'6',
                                aggressive_care_group %in% 6~'7',
                                aggressive_care_group %in% 7~'9',
                                aggressive_care_group %in% 8~'11',
                                aggressive_care_group %in% 9~'16',
                                aggressive_care_group %in% 10~'17',
                                aggressive_care_group %in% 11~'18',
                                aggressive_care_group %in% 12~'20'),
           os=ifelse(state%in% 4,1,0))
))

#Overall survival---------------------------------------------------------------
options(scipen=999) 
#sofa 1 
my_survfit = survfit(Surv(day, os) ~ ac_factor, data = mc.sofa1)

#sofa 2
my_survfit.sofa2 = survfit(Surv(day, os) ~ ac_factor, data = mc.sofa2)

#sofa 3 
my_survfit.sofa3 = survfit(Surv(day, os) ~ ac_factor, data = mc.sofa3)

#sofa 4 
my_survfit.sofa4 = survfit(Surv(day, os) ~ ac_factor, data = mc.sofa4)


summary(my_survfit.sofa2, times = 30)

plot(survfit(Surv(day, os) ~ 1, data = survival.sofa1), 
     xlab = "Days", 
     ylab = "Overall survival probability")

ggsurvplot(
  fit = survfit(Surv(day, os) ~ as.numeric(ac_factor), data = survival.sofa1), 
  xlab = "Days", 
  ylab = "Overall survival probability")

test<-summary(my_survfit)

0.1360195, 0.1955093,0.1610899,0.1116790,0.1021441, 0.2264263,0.1045519 0.1038625 0.1025447 0.3464626 0.1955093 0.1092541 0.1610899 0.1116790 0.2255736 0.1021441
[12] 0.1045519

ggplot(data=as.data.frame(cbind(test[["surv"]],as.numeric(test[["strata"]]))), aes(y=V1,x=V2))+
  geom_point()+
  geom_smooth()
as.data.frame(cbind(test[["surv"]],as.numeric(test[["strata"]])))


# singular test
# matrix((replicate(2,{
# rmarkovchain(n = 1, #length of the chain ie number of d. after aggressive care (fixed here)
#              object = mo.sofa1[[1]][[1]],
#              parallel = TRUE,
#              num.cores=detectCores()-1)})), ncol=1)
# 
npats<-1000 # number of patients 

#sofa 1
mc.sofa1<-    
  lapply(1:length(mo.sofa1), function(y) # days of aggressive care received
    lapply(1:length(mo.sofa1[[1]]), function(x) # determines the transition matrix for each day 
      matrix((replicate(npats, {     # number of patients
        rmarkovchain(n = 1, #length of the chain ie number of d. after aggressive care (fixed here)
                     object = mo.sofa1[[1]],
                     parallel = TRUE,
                     num.cores=detectCores()-1)})), ncol=1)))
#sofa 2
mc.sofa2<-    
  lapply(1:length(mo.sofa2), function(y) # days of aggressive care received
    lapply(1:length(mo.sofa2[[1]]), function(x) # determines the transition matrix for each day 
      matrix((replicate(npats, {     # number of patients
        rmarkovchain(n = 1, #length of the chain ie number of d. after aggressive care (fixed here)
                     object = mo.sofa2[[y]][[x]],
                     parallel = TRUE,
                     num.cores=detectCores()-1)})), ncol=1)))
#sofa 3
mc.sofa3<-    
  lapply(1:length(mo.sofa3), function(y) # days of aggressive care received
    lapply(1:length(mo.sofa3[[1]]), function(x) # determines the transition matrix for each day 
      matrix((replicate(npats, {     # number of patients
        rmarkovchain(n = 1, #length of the chain ie number of d. after aggressive care (fixed here)
                     object = mo.sofa3[[y]][[x]],
                     parallel = TRUE,
                     num.cores=detectCores()-1)})), ncol=1)))
#sofa4 
mc.sofa4<-    
  lapply(1:length(mo.sofa4), function(y) # days of aggressive care received
    lapply(1:length(mo.sofa4[[1]]), function(x) # determines the transition matrix for each day 
      matrix((replicate(npats, {     # number of patients
        rmarkovchain(n = 1, #length of the chain ie number of d. after aggressive care (fixed here)
                     object = mo.sofa4[[y]][[x]],
                     parallel = TRUE,
                     num.cores=detectCores()-1)})), ncol=1)))

#-------------------------------------------------------------------------------
#8

#8. Convert marcov chain list of list into a matrix chain-------------------------
# note: needs to be made recursive
#x  select days of aggressive care received 
#y  days in icu after agressive care
 
# definitions

#fit.msm1,  
# fit.msm2,
# fit.msm3,
# fit.msm5,
# fit.msm6,
# fit.msm7,
# fit.msm9,
# fit.msm11,
# fit.msm16,
# fit.msm17,
# fit.msm18,
# fit.msm20


#sofa1 
matrixchain.sofa1<-
lapply(1:length(mc.sofa1), function(y)
cbind(          #x    y    z
matrix(mc.sofa1[[1]][[1]]),
matrix(mc.sofa1[[1]][[2]]),
matrix(mc.sofa1[[1]][[3]]),
matrix(mc.sofa1[[1]][[4]]),
matrix(mc.sofa1[[1]][[5]]),
matrix(mc.sofa1[[1]][[6]]),
matrix(mc.sofa1[[1]][[7]]),
matrix(mc.sofa1[[1]][[8]]),
matrix(mc.sofa1[[1]][[9]]),
matrix(mc.sofa1[[1]][[10]]),
matrix(mc.sofa1[[1]][[11]]),
matrix(mc.sofa1[[1]][[12]]),
matrix(mc.sofa1[[1]][[13]]),
matrix(mc.sofa1[[1]][[14]]),
matrix(mc.sofa1[[1]][[15]]),
matrix(mc.sofa1[[1]][[16]]),
matrix(mc.sofa1[[1]][[17]]),
matrix(mc.sofa1[[1]][[18]]),
matrix(mc.sofa1[[1]][[19]]),
matrix(mc.sofa1[[1]][[20]]),
matrix(mc.sofa1[[1]][[21]]),
matrix(mc.sofa1[[1]][[22]]),
matrix(mc.sofa1[[1]][[23]]),
matrix(mc.sofa1[[1]][[24]]),
matrix(mc.sofa1[[1]][[25]]),
matrix(mc.sofa1[[1]][[26]]),
matrix(mc.sofa1[[1]][[27]]),
matrix(mc.sofa1[[1]][[28]]),
matrix(mc.sofa1[[1]][[29]]),
matrix(mc.sofa1[[1]][[30]])
)
)


#sofa2 
matrixchain.sofa2<-
  lapply(1:length(mc.sofa2), function(y)
    cbind(          #x    y    z
      matrix(mc.sofa2[[1]][[1]]),
      matrix(mc.sofa2[[1]][[2]]),
      matrix(mc.sofa2[[1]][[3]]),
      matrix(mc.sofa2[[1]][[4]]),
      matrix(mc.sofa2[[1]][[5]]),
      matrix(mc.sofa2[[1]][[6]]),
      matrix(mc.sofa2[[1]][[7]]),
      matrix(mc.sofa2[[1]][[8]]),
      matrix(mc.sofa2[[1]][[9]]),
      matrix(mc.sofa2[[1]][[10]]),
      matrix(mc.sofa2[[1]][[11]]),
      matrix(mc.sofa2[[1]][[12]]),
      matrix(mc.sofa2[[1]][[13]]),
      matrix(mc.sofa2[[1]][[14]]),
      matrix(mc.sofa2[[1]][[15]]),
      matrix(mc.sofa2[[1]][[16]]),
      matrix(mc.sofa2[[1]][[17]]),
      matrix(mc.sofa2[[1]][[18]]),
      matrix(mc.sofa2[[1]][[19]]),
      matrix(mc.sofa2[[1]][[20]]),
      matrix(mc.sofa2[[1]][[21]]),
      matrix(mc.sofa2[[1]][[22]]),
      matrix(mc.sofa2[[1]][[23]]),
      matrix(mc.sofa2[[1]][[24]]),
      matrix(mc.sofa2[[1]][[25]]),
      matrix(mc.sofa2[[1]][[26]]),
      matrix(mc.sofa2[[1]][[27]]),
      matrix(mc.sofa2[[1]][[28]]),
      matrix(mc.sofa2[[1]][[29]]),
      matrix(mc.sofa2[[1]][[30]])
    )
  )


#sofa3
matrixchain.sofa3<-
  lapply(1:length(mc.sofa3), function(y)
    cbind(          #x    y    z
      matrix(mc.sofa3[[1]][[1]]),
      matrix(mc.sofa3[[1]][[2]]),
      matrix(mc.sofa3[[1]][[3]]),
      matrix(mc.sofa3[[1]][[4]]),
      matrix(mc.sofa3[[1]][[5]]),
      matrix(mc.sofa3[[1]][[6]]),
      matrix(mc.sofa3[[1]][[7]]),
      matrix(mc.sofa3[[1]][[8]]),
      matrix(mc.sofa3[[1]][[9]]),
      matrix(mc.sofa3[[1]][[10]]),
      matrix(mc.sofa3[[1]][[11]]),
      matrix(mc.sofa3[[1]][[12]]),
      matrix(mc.sofa3[[1]][[13]]),
      matrix(mc.sofa3[[1]][[14]]),
      matrix(mc.sofa3[[1]][[15]]),
      matrix(mc.sofa3[[1]][[16]]),
      matrix(mc.sofa3[[1]][[17]]),
      matrix(mc.sofa3[[1]][[18]]),
      matrix(mc.sofa3[[1]][[19]]),
      matrix(mc.sofa3[[1]][[20]]),
      matrix(mc.sofa3[[1]][[21]]),
      matrix(mc.sofa3[[1]][[22]]),
      matrix(mc.sofa3[[1]][[23]]),
      matrix(mc.sofa3[[1]][[24]]),
      matrix(mc.sofa3[[1]][[25]]),
      matrix(mc.sofa3[[1]][[26]]),
      matrix(mc.sofa3[[1]][[27]]),
      matrix(mc.sofa3[[1]][[28]]),
      matrix(mc.sofa3[[1]][[29]]),
      matrix(mc.sofa3[[1]][[30]])
    )
  )


#sofa4 
matrixchain.sofa4<-
  lapply(1:length(mc.sofa4), function(y)
    cbind(          #x    y    z
      matrix(mc.sofa4[[1]][[1]]),
      matrix(mc.sofa4[[1]][[2]]),
      matrix(mc.sofa4[[1]][[3]]),
      matrix(mc.sofa4[[1]][[4]]),
      matrix(mc.sofa4[[1]][[5]]),
      matrix(mc.sofa4[[1]][[6]]),
      matrix(mc.sofa4[[1]][[7]]),
      matrix(mc.sofa4[[1]][[8]]),
      matrix(mc.sofa4[[1]][[9]]),
      matrix(mc.sofa4[[1]][[10]]),
      matrix(mc.sofa4[[1]][[11]]),
      matrix(mc.sofa4[[1]][[12]]),
      matrix(mc.sofa4[[1]][[13]]),
      matrix(mc.sofa4[[1]][[14]]),
      matrix(mc.sofa4[[1]][[15]]),
      matrix(mc.sofa4[[1]][[16]]),
      matrix(mc.sofa4[[1]][[17]]),
      matrix(mc.sofa4[[1]][[18]]),
      matrix(mc.sofa4[[1]][[19]]),
      matrix(mc.sofa4[[1]][[20]]),
      matrix(mc.sofa4[[1]][[21]]),
      matrix(mc.sofa4[[1]][[22]]),
      matrix(mc.sofa4[[1]][[23]]),
      matrix(mc.sofa4[[1]][[24]]),
      matrix(mc.sofa4[[1]][[25]]),
      matrix(mc.sofa4[[1]][[26]]),
      matrix(mc.sofa4[[1]][[27]]),
      matrix(mc.sofa4[[1]][[28]]),
      matrix(mc.sofa4[[1]][[29]]),
      matrix(mc.sofa4[[1]][[30]])
    )
  )
#-------------------------------------------------------------------------------
#30-d survival




#-------------------------------------------------------------------------------

#9. Adjust the length of the days of care received after aggressive care
# for example if someone already received 2 days of ac then they should have a
# total of 28d left to receive of more care (since we are rounding at 30)

#days of aggressive care with enough data to run simulation
days_of_ac<- c(1,2,3,5,6,7,9,11,16,17,18,20)
index_of_ac<-c(1,2,3,4,5,6,7,8,9,10,11,12)

#sofa1

sims.sofa1<-lapply(index_of_ac, function(y)lapply(days_of_ac, function(x) matrixchain.sofa1[[y]][, 1:(30-x)]))

u_nhic<-0.66/365 #non aggresive care in icu
u_hic<-0.55/365  #aggressive care in icu
u_cmo<-0.28/365  # cmo
u_discharge<-1/365 # discharge
u_died<-0     #died  
hc_correction<-0.5/365

days_of_ac<- c(1,2,3,5,6,7,9,11,16,17,18,20)
index_of_ac<-c(1,2,3,4,5,6,7,8,9,10,11,12)

#day1
d1.sofa1  <-colMeans(as.matrix(as.data.frame(
           sims.sofa1[[1]][[1]]) %>% 
             mutate_if(~2>0,
                ~case_when(.x %in% 1~u_nhic,
                           .x %in% 2~u_cmo,
                           .x %in% 3~u_discharge,
                           .x %in% 4~u_died))))
#day2
d2.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[2]][[2]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day3
d3.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[3]][[3]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))

#day5
d5.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[4]][[4]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day6
d6.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[5]][[5]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day7
d7.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[6]][[6]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))

#day9
d9.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[7]][[7]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day11
d11.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[8]][[8]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day16
d16.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[9]][[9]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day17
d17.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[10]][[10]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day18
d18.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[11]][[11]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day20
d20.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[12]][[12]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))




















#-------------------------------------------------------------------------------


#day1
d1.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[1]][[1]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day2
d2.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[2]][[2]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day3
d3.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[3]][[3]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))

#day5
d5.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[4]][[4]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day6
d6.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[5]][[5]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day7
d7.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[6]][[6]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))

#day9
d9.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[7]][[7]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day11
d11.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[8]][[8]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day16
d16.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[9]][[9]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day17
d17.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[10]][[10]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day18
d18.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[11]][[11]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))
#day20
d20.sofa1  <-colMeans(as.matrix(as.data.frame(
  sims.sofa1[[12]][[12]]) %>% 
    mutate_if(~2>0,
              ~case_when(.x %in% 1~u_nhic,
                         .x %in% 2~u_cmo,
                         .x %in% 3~u_discharge,
                         .x %in% 4~u_died))))



(((sum(
  colSums(
    as.matrix(
      as.data.frame(
        sims.sofa1[[12]][[12]]) %>% 
        mutate_if(~2>0,
                  ~case_when(.x %in% 1~u_nhic,
                             .x %in% 2~u_cmo,
                             .x %in% 3~u_discharge,
                             .x %in% 4~u_died))))+
    u_hic*(30-10)))/npats)+
    hc_correction)


#10. Utilities per day----------------------------------------------------------
u_nhic<-0.66/365 #non aggresive care in icu
u_hic<-0.55/365  #aggressive care in icu
u_cmo<-0.28/365  # cmo
u_discharge<-1/365 # discharge
u_died<-0     #died  
hc_correction<-0.5/365



# sofa 1
u.sofa1 <- 
  lapply(1:length(matrixchain.sofa1), 
         function(x)
  as.tibble(matrixchain.sofa1[[x]]) %>% 
  tibble::rowid_to_column("ID") %>% 
  gather(day, value=state, V1:V30) %>% 
  arrange(ID) %>% 
  mutate(los_days=  str_replace_all(day,pattern = "[a-zA-Z ]", replacement="")) %>% 
  select(-(day)) %>% 
  mutate(aggressive_care_tx_group= x) %>%  #update with index
  # mutate(col1=streak_run(state, k=1000)) %>%  #remove redundant days 
  # filter(!(state=="4" & col1!=1)) %>%         #to stop utility from counting after reaching absorption state
  # filter(!(state=="5" & col1!=1)) %>%         3if requiered
  mutate(utility= case_when(state %in% '1'~ u_nhic,
                            state %in% '2'~ u_hic,
                            state %in% '3'~ u_cmo,
                            state %in% '4'~ u_discharge,
                            state %in% '5'~ u_died)) %>% 
  group_by(los_days=as.numeric(los_days), ID) %>% 
  summarize(utility= sum(utility)+(length(ID)*u_nhic)) %>% 
  group_by(as.numeric(los_days)) %>% 
  summarize(total_utility= sum(utility)) %>% 
  ungroup() %>% 
  mutate(cum_utility=cumsum(total_utility)) %>% 
  ungroup() %>% 
  mutate(qald=cum_utility/N,
         total_qald=sum(qald)+hc_correction) %>% 
  mutate(aggressive_care_tx_group= x)
  )

u.sofa1<-do.call("rbind", u.sofa1)

# sofa 2
u.sofa2 <- 
  lapply(1:length(matrixchain.sofa2), 
         function(x)
           as.tibble(matrixchain.sofa2[[x]]) %>% 
           tibble::rowid_to_column("ID") %>% 
           gather(day, value=state, V1:V30) %>% 
           arrange(ID) %>% 
           mutate(los_days=  str_replace_all(day,pattern = "[a-zA-Z ]", replacement="")) %>% 
           select(-(day)) %>% 
           mutate(aggressive_care_tx_group= x) %>%  #update with index
           # mutate(col1=streak_run(state, k=1000)) %>%  #remove redundant days 
           # filter(!(state=="4" & col1!=1)) %>%         #to stop utility from counting after reaching absorption state
           # filter(!(state=="5" & col1!=1)) %>%         3if requiered
           mutate(utility= case_when(state %in% '1'~ u_nhic,
                                     state %in% '2'~ u_hic,
                                     state %in% '3'~ u_cmo,
                                     state %in% '4'~ u_discharge,
                                     state %in% '5'~ u_died)) %>% 
           group_by(los_days=as.numeric(los_days), ID) %>% 
           summarize(utility= sum(utility)+(length(ID)*u_nhic)) %>% 
           group_by(as.numeric(los_days)) %>% 
           summarize(total_utility= sum(utility)) %>% 
           ungroup() %>% 
           mutate(cum_utility=cumsum(total_utility)) %>% 
           ungroup() %>% 
           mutate(qald=cum_utility/N,
                  total_qald=sum(qald)+hc_correction) %>% 
           mutate(aggressive_care_tx_group= x)
  )

u.sofa2<-do.call("rbind", u.sofa2)


# sofa 3
u.sofa3 <- 
  lapply(1:length(matrixchain.sofa3), 
         function(x)
           as.tibble(matrixchain.sofa3[[x]]) %>% 
           tibble::rowid_to_column("ID") %>% 
           gather(day, value=state, V1:V30) %>% 
           arrange(ID) %>% 
           mutate(los_days=  str_replace_all(day,pattern = "[a-zA-Z ]", replacement="")) %>% 
           select(-(day)) %>% 
           mutate(aggressive_care_tx_group= x) %>%  #update with index
           # mutate(col1=streak_run(state, k=1000)) %>%  #remove redundant days 
           # filter(!(state=="4" & col1!=1)) %>%         #to stop utility from counting after reaching absorption state
           # filter(!(state=="5" & col1!=1)) %>%         3if requiered
           mutate(utility= case_when(state %in% '1'~ u_nhic,
                                     state %in% '2'~ u_hic,
                                     state %in% '3'~ u_cmo,
                                     state %in% '4'~ u_discharge,
                                     state %in% '5'~ u_died)) %>% 
           group_by(los_days=as.numeric(los_days), ID) %>% 
           summarize(utility= sum(utility)+(length(ID)*u_hic)) %>% 
           group_by(as.numeric(los_days)) %>% 
           summarize(total_utility= sum(utility)) %>% 
           ungroup() %>% 
           mutate(cum_utility=cumsum(total_utility)) %>% 
           ungroup() %>% 
           mutate(qald=cum_utility/N,
                  total_qald=sum(qald)+hc_correction) %>% 
           mutate(aggressive_care_tx_group= x)
  )

u.sofa3<-do.call("rbind", u.sofa3)


# sofa 4
u.sofa4 <- 
  lapply(1:length(matrixchain.sofa4), 
         function(x)
           as.tibble(matrixchain.sofa4[[x]]) %>% 
           tibble::rowid_to_column("ID") %>% 
           gather(day, value=state, V1:V30) %>% 
           arrange(ID) %>% 
           mutate(los_days=  str_replace_all(day,pattern = "[a-zA-Z ]", replacement="")) %>% 
           select(-(day)) %>% 
           mutate(aggressive_care_tx_group= x) %>%  #update with index
           # mutate(col1=streak_run(state, k=1000)) %>%  #remove redundant days 
           # filter(!(state=="4" & col1!=1)) %>%         #to stop utility from counting after reaching absorption state
           # filter(!(state=="5" & col1!=1)) %>%         3if requiered
           mutate(utility= case_when(state %in% '1'~ u_nhic,
                                     state %in% '2'~ u_hic,
                                     state %in% '3'~ u_cmo,
                                     state %in% '4'~ u_discharge,
                                     state %in% '5'~ u_died)) %>% 
           group_by(los_days=as.numeric(los_days), ID) %>% 
           summarize(utility= sum(utility)+(length(ID)*u_hic)) %>% 
           group_by(as.numeric(los_days)) %>% 
           summarize(total_utility= sum(utility)) %>% 
           ungroup() %>% 
           mutate(cum_utility=cumsum(total_utility)) %>% 
           ungroup() %>% 
           mutate(qald=cum_utility/N,
                  total_qald=sum(qald)+hc_correction) %>% 
           mutate(aggressive_care_tx_group= x)
  )

u.sofa4<-do.call("rbind", u.sofa4)

#10.Max utility per aggressive regimen over 30 days by sofa group---------------

max_qald.sofa1<-u.sofa1 %>% 
  select(los_days=`as.numeric(los_days)`,total_qald,aggressive_care_tx_group) %>% 
  group_by(aggressive_care_tx_group) %>% 
  summarize(total_qald=max(total_qald))%>% 
  mutate(xaxis= case_when(aggressive_care_tx_group %in% 1~2,
                          aggressive_care_tx_group %in% 2~6,
                          #aggressive_care_tx_group %in% 3~8,
                          aggressive_care_tx_group %in% 3~10,
                          aggressive_care_tx_group %in% 4~11,
                          aggressive_care_tx_group %in% 5~12,
                          aggressive_care_tx_group %in% 6~13,
                          aggressive_care_tx_group %in% 7~14,
                          #aggressive_care_tx_group %in% 9~17,
                          aggressive_care_tx_group %in% 8~20,
                          aggressive_care_tx_group %in% 9~21,
                          aggressive_care_tx_group %in% 10~27,
                          aggressive_care_tx_group %in% 11~29,
                          aggressive_care_tx_group %in% 12~30))

max_qald.sofa2<-u.sofa2 %>% 
  select(los_days=`as.numeric(los_days)`,total_qald,aggressive_care_tx_group) %>% 
  group_by(aggressive_care_tx_group) %>% 
  summarize(total_qald=max(total_qald))%>% 
  mutate(xaxis= case_when(aggressive_care_tx_group %in% 1~2,
                          aggressive_care_tx_group %in% 2~6,
                          #aggressive_care_tx_group %in% 3~8,
                          aggressive_care_tx_group %in% 3~10,
                          aggressive_care_tx_group %in% 4~11,
                          aggressive_care_tx_group %in% 5~12,
                          aggressive_care_tx_group %in% 6~13,
                          aggressive_care_tx_group %in% 7~14,
                          #aggressive_care_tx_group %in% 9~17,
                          aggressive_care_tx_group %in% 8~20,
                          aggressive_care_tx_group %in% 9~21,
                          aggressive_care_tx_group %in% 10~27,
                          aggressive_care_tx_group %in% 11~29,
                          aggressive_care_tx_group %in% 12~30))

max_qald.sofa3<-u.sofa3 %>% 
  select(los_days=`as.numeric(los_days)`,total_qald,aggressive_care_tx_group) %>% 
  group_by(aggressive_care_tx_group) %>% 
  summarize(total_qald=max(total_qald))%>% 
  mutate(xaxis= case_when(aggressive_care_tx_group %in% 1~2,
                          aggressive_care_tx_group %in% 2~6,
                          #aggressive_care_tx_group %in% 3~8,
                          aggressive_care_tx_group %in% 3~10,
                          aggressive_care_tx_group %in% 4~11,
                          aggressive_care_tx_group %in% 5~12,
                          aggressive_care_tx_group %in% 6~13,
                          aggressive_care_tx_group %in% 7~14,
                          #aggressive_care_tx_group %in% 9~17,
                          aggressive_care_tx_group %in% 8~20,
                          aggressive_care_tx_group %in% 9~21,
                          aggressive_care_tx_group %in% 10~27,
                          aggressive_care_tx_group %in% 11~29,
                          aggressive_care_tx_group %in% 12~30))

max_qald.sofa4<-u.sofa4 %>% 
  select(los_days=`as.numeric(los_days)`,total_qald,aggressive_care_tx_group) %>% 
  group_by(aggressive_care_tx_group) %>% 
  summarize(total_qald=max(total_qald)) %>% 
  mutate(xaxis= case_when(aggressive_care_tx_group %in% 1~2,
                          aggressive_care_tx_group %in% 2~6,
                          #aggressive_care_tx_group %in% 3~8,
                          aggressive_care_tx_group %in% 3~10,
                          aggressive_care_tx_group %in% 4~11,
                          aggressive_care_tx_group %in% 5~12,
                          aggressive_care_tx_group %in% 6~13,
                          aggressive_care_tx_group %in% 7~14,
                          #aggressive_care_tx_group %in% 9~17,
                          aggressive_care_tx_group %in% 8~20,
                          aggressive_care_tx_group %in% 9~21,
                          aggressive_care_tx_group %in% 10~27,
                          aggressive_care_tx_group %in% 11~29,
                          aggressive_care_tx_group %in% 12~30))

# 11. Graphs --------------------------------------------------------------

ggplot(max_qald.sofa1,aes(x=xaxis, y=total_qald))+
  geom_point()+
  geom_smooth(span = 0.25, color='#e7298a')+
  #geom_line()+
  theme_bw()+
  scale_x_continuous(breaks = scales::pretty_breaks(n=30))+
  xlab('Days of aggresive treatment')+
  ylab('Quality adjusted life days')+
  labs(subtitle = "SOFA 1")


ggplot(max_qald.sofa2,aes(x=xaxis, y=total_qald))+
  geom_point()+
  geom_smooth(span = 0.25, color='#fdc086')+
  #geom_line()+
  theme_bw()+
  scale_x_continuous(breaks = scales::pretty_breaks(n=30))+
  xlab('Days of aggresive treatment')+
  ylab('Quality adjusted life days')+
  labs(subtitle = "SOFA 2")

ggplot(max_qald.sofa3,aes(x=xaxis, y=total_qald))+
  geom_point()+
  geom_smooth(span = 0.25,color='#beaed4')+
  #geom_line()+
  theme_bw()+
  scale_x_continuous(breaks = scales::pretty_breaks(n=30))+
  xlab('Days of aggresive treatment')+
  ylab('Quality adjusted life days')+
  labs(subtitle = "SOFA 3")

ggplot(max_qald.sofa4,aes(x=xaxis, y=total_qald))+
  geom_point(color='grey10')+
  geom_smooth(span = 0.25, color='#386cb0')+
  theme_bw()+
  scale_x_continuous(breaks = scales::pretty_breaks(n=30))+
  scale_y_continuous(breaks = scales::pretty_breaks(n=10))+
  xlab('Days of aggresive treatment')+
  ylab('Quality adjusted life days')+
  labs(subtitle = "SOFA 4")


# To do/notes:------------------------------------------------------------------

# 1) Create a reproducible pipeline for obtaining cohort via sql
# 2) Be more specific with states, ie track time more adequately and extract states more precisely
# 3) Redefine CMO from the sql stage
# 3) A distribution of utilities can be used (eg norm(start,end, etc)) to create ranges for utilities as opposed to fix value
# therefore review utilites and add in ranges (secondary sensitivity analysis)
# 4) multisimulation matrices can also be introduced

