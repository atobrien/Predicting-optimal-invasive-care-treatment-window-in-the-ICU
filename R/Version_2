# This code needs to be optimized with loops . This is V2- Conceptual 


# Load library
library("tidyr")
library("dplyr")
library("markovchain")
library("tdisplay", lib.loc="~/R/win-library/3.5")
library("survival", lib.loc="~/R/win-library/3.5")
library("survminer", lib.loc="~/R/win-library/3.5")
library("parallel")
library("stringr")
library("data.table")
library("runner")
library("DataCombine")
library("msm")


# SELECT CIRRHOSIS COHORT, ASSIGN SOFA QUARTILES --------------------------

{
# Read data
df<-read.csv("C:/Users/Me/Desktop/mimic_timecohort_20190304.csv")

# Replace NA in flags with 0
df<-df %>% 
  mutate(death_flag = replace_na(death_flag, 0),
         cv_flag = replace_na(cv_flag, 0),
         crrt_flag = replace_na(crrt_flag, 0),
         vasopres_flag = replace_na(vasopres_flag, 0),
         mechvent_flag = replace_na(mechvent_flag, 0),
         cmo_flag = replace_na(cmo_flag, 0))

# Select icustays with more than 1 day stay, only first time admission,
# >=18years and with a sofa score
df<-df %>% 
  group_by(icustay_id) %>% 
  filter(length(icustay_id)>1 & 
           first_icu_stay %in% "True" & 
           admission_age>=18 &
           !is.na(sofa_last))

# Import the cirrhosis dataframe. This contains the patients diagnosed with
# cirrhosis. It will be used as a key to select only cirrhosis patients
key<-read.csv("C:/Users/Me/Desktop/data-1546976302496.csv")

# Prepare the key 
key$charttime<-NULL
key$day_start<-NULL
key$cirrhosis_flag<-NULL

# Using semi-join with the key we filter only the cirrhosis patients in the df 
df<-semi_join(df, key)

# Drop key for memory
rm(key)

# Turn variables into correct types
df<-df %>% 
  mutate(death_flag= as.numeric(death_flag), states= as.numeric(states))

# Find the quartiles of SOFA for first day of admission (day 0)
sofa<-df %>% filter(icudayseq_asc == 0)
quantile(sofa$sofa_last)
q.sofa<-floor(quantile(sofa$sofa_last))

# Results(floor):
# 0%  25%  50%  75% 100% 
# 0    4    7   10.5   22 
# Q1: 0-4
# Q2: 5-7
# Q3: 8-10
# Q4: 11-22

# Assign cohort groups to sofa data frame

sofa<-sofa %>% mutate(sofa_group= case_when(sofa_last %in% c(q.sofa[[1]]:q.sofa[[2]])~"Q1",
                                            sofa_last %in% c(q.sofa[[2]]+1:q.sofa[[3]])~"Q2",
                                            sofa_last %in% c(q.sofa[[3]]+1:q.sofa[[4]])~"Q3",
                                            sofa_last %in% c(q.sofa[[4]]+1:q.sofa[[5]])~"Q4"))
                                            
sofa<- sofa %>% select(icustay_id, sofa_group)

# Using semi-join with the sofa dataframe we add the sofa group to  df 
df<-merge(df, sofa, by="icustay_id")

# Remove sofa from memory
rm(sofa)
rm(q.sofa)
}



# REDEFINE CMO  -----------------------------------------------------------

{
# CMO will be redefined as follows: 
# state--lead_state_1_day_out--2_day_out--3_day_out--4_day_out--5_day_out--CMO
#   1               0              4                                        1
#   1               0              0           4                            1 
#   1               0              0           0         4                  1 
#   1               0              0           0         0          4       1
# This is making the assumption that patients that transition from 
# highly invasive care to non-invasive care and then died were on CMO 

df<-df %>% 
  mutate(onedayout=lead(states, n=1L),
         twodayout=lead(states, n=2L),
         threedayout=lead(states, n=3L),
         fourdayout=lead(states, n=4L),
         fivedayout=lead(states, n=5L),
         sixdayout=lead(states, n=6L),
         sevendayout=lead(states, n=7L),
         eightdayout=lead(states, n=8L),
         ninedayout=lead(states, n=9L),
         tendayout=lead(states, n=10L))

df<-df %>% 
  mutate(CMO_additional_flag=
           case_when((states==1)&(onedayout==0)&(twodayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==0)&(sixdayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==0)&(sixdayout==0)&(sevendayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==0)&(sixdayout==0)&(sevendayout==0)&(eightdayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==0)&(sixdayout==0)&(sevendayout==0)&(eightdayout==0)&(ninedayout==4)~1,
                     (states==1)&(onedayout==0)&(twodayout==0)&(threedayout==0)&(fourdayout==0)&(fivedayout==0)&(sixdayout==0)&(sevendayout==0)&(eightdayout==0)&(ninedayout==0)&(tendayout==4)~1))

# Drop additional columns created to be organized
df$onedayout<-NULL
df$twodayout<-NULL
df$threedayout<-NULL
df$fourdayout<-NULL
df$fivedayout<-NULL
df$sixdayout<-NULL
df$sevendayout<-NULL
df$eightdayout<-NULL
df$ninedayout<-NULL
df$tendayout<-NULL

# Add in the end state when it is dead (4) 
df<-df %>% 
  mutate(A= ifelse(states==4, 4,CMO_additional_flag))

# Filling in CMO cases according to above assumption on post-HIC days
A <- c(df$A)
index.1<-which(df$A %in% c(1)) # define location for 1s in A
index.14<-which(df$A %in% c(1,4)) # define location for 1s and 4s in A
loc.1<-which(index.14 %in% index.1) # location of 1s in  index.14
loc.4<-loc.1+1 # location of 4s relative to 1s in index.14
start.i<-((index.14[loc.1])+1) # starting index for replacing with 2
end.i<-((index.14[loc.4])-1) # ending index for replacing with 2 in index
fill.v<-sort(c(start.i, end.i))# sequence of indexes to fill-in with # 2
fill.m<-matrix(fill.v,nrow = (length(fill.v)/2),ncol = 2, byrow=TRUE) # create matrix of 
list.1<-apply(fill.m, MARGIN=1,FUN=function(x) seq(x[1],x[2])) # create a list with indexes to replace
list.2<-unlist(list.1) # unlist list to use as the indexes for replacement
df$A[list.2] <- 2 # replace indexed location with 2

rm(index.1)
rm(index.14)
rm(loc.1)
rm(loc.4)
rm(start.i)
rm(end.i)
rm(fill.v)
rm(fill.m)
rm(list.2)
rm(list.1)
rm(A)

# Update states & cmo flag with new CMO definition
df<-df %>%mutate(states= ifelse(A %in% 2, 2, states),
                 cmo_flag=ifelse(A %in% 2, 1, cmo_flag))
df$A<-NULL
df$CMO_additional_flag<-NULL

df[2038,10] <-1 # this is a mismatch in logic  *!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}



# UNIQUE HIC - NO RE-ENTRIES INTO HIC  ------------------------------------
{
index.1<-which(df$states %in% c(1)) # index all the rows with 1
df<- df %>% mutate(col1=streak_run(states, k=1000)) # create a streak
df.collect<-df %>% .[c(index.1),] # collect all the rows with 1`
key<-df.collect %>% group_by(icustay_id) %>% count(col1) %>% filter(col1%in%1 & n!=1) # keep rentries into HIC  
key<-key[,1] # save ids for re-entries into HIC
df<-anti_join(df, key)# keep only those which do not re-enter HIC
rm(df.collect)
rm(key)
}


#-----

#______________________________________________________________________________#
#                             BASE CASE ANALYSIS                               #  
#______________________________________________________________________________#

# TRANSITION PROBABILITIES AND MARKOV OBJECTS -----------------------------

{
example.df<-df
example.df<-example.df %>% select(icustay_id, icudayseq_asc, states, sofa_group)
colnames(example.df)[1] <- 'id'  
colnames(example.df)[2] <- 'day'  
colnames(example.df)[4] <- 'sofa'  

f1 <- function(data, n){
  ids <- data %>%
    mutate(stateslead = lead(states, default = last(states))) %>%
    group_by(grp = rleid(states == 1)) %>% 
    filter(n() == n, states == 1, stateslead != 1) %>%     
    group_by(id) %>%     
    filter(n() == 1) %>%
    pull(id)
  
  data %>%
    filter(id %in% ids) %>%
    group_by(id) %>% 
    filter(cumsum(states) > 0)
}

# https://stackoverflow.com/questions/55432875/select-rows-of-ids-that-have-a-pattern-without-losing-the-other-rows/55434003?noredirect=1#comment97588830_55434003
# aknowledgement to akrun for code assistance for f1

# 1 DAY OF HIC

df1.msm<-f1(example.df, 1)
# transition table
df1.tt<-(statetable.msm(states, id, data=df1.msm))

# transition matrix
df1.tm<-as.matrix.data.frame(df1.tt)
df1.tm<-rbind(df1.tm, c(0,0,0,1,0))
df1.tm<-rbind(df1.tm, c(0,0,0,0,1))
df1.ptm<-df1.tm/rowSums(df1.tm)

# markov objects
mo1.msm<-new("markovchain",transitionMatrix=(df1.ptm), name="MarkovChain Q1")
mo2.msm<-mo1.msm^2
mo3.msm<-mo1.msm^3
mo4.msm<-mo1.msm^4
mo5.msm<-mo1.msm^5
mo6.msm<-mo1.msm^6
mo7.msm<-mo1.msm^7
mo8.msm<-mo1.msm^8
mo9.msm<-mo1.msm^9
mo10.msm<-mo1.msm^10
mo11.msm<-mo1.msm^11
mo12.msm<-mo1.msm^12
mo13.msm<-mo1.msm^13
mo14.msm<-mo1.msm^14
mo15.msm<-mo1.msm^15
mo16.msm<-mo1.msm^16
mo17.msm<-mo1.msm^17
mo18.msm<-mo1.msm^18
mo19.msm<-mo1.msm^19
mo20.msm<-mo1.msm^20
mo21.msm<-mo1.msm^21
mo22.msm<-mo1.msm^22
mo23.msm<-mo1.msm^23
mo24.msm<-mo1.msm^24
mo25.msm<-mo1.msm^25
mo26.msm<-mo1.msm^26
mo27.msm<-mo1.msm^27
mo28.msm<-mo1.msm^28
mo29.msm<-mo1.msm^29
mo30.msm<-mo1.msm^30

rm(example.df)
rm(df1.msm)
rm(df1.ptm)
rm(df1.tm)
}




# First order monte carlo simulations -------------------------------------

B <- 100
N <- 30

{
sim1.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo1.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim2.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo2.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim3.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo3.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim4.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo4.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim5.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo5.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim6.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo6.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim7.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo7.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim8.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo8.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim9.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo9.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim10.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo10.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim11.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo11.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim12.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo12.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim13.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo13.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim14.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo14.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim15.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo15.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim16.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo16.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim17.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo17.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim18.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo18.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim19.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo19.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim20.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo20.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim21.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo21.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim22.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo22.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim23.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo23.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim24.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo24.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim25.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo25.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim26.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo26.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim27.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo27.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim28.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo28.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim29.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo29.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim30.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo30.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

# rm(mo1.msm) 
# rm(mo2.msm)
# rm(mo3.msm)
# rm(mo4.msm)
# rm(mo5.msm)
# rm(mo6.msm)
# rm(mo7.msm)
# rm(mo8.msm)
# rm(mo9.msm)
# rm(mo10.msm)
# rm(mo11.msm)
# rm(mo12.msm)
# rm(mo13.msm)
# rm(mo14.msm)
# rm(mo15.msm)
# rm(mo16.msm)
# rm(mo17.msm)
# rm(mo18.msm)
# rm(mo19.msm)
# rm(mo20.msm)
# rm(mo21.msm)
# rm(mo22.msm)
# rm(mo23.msm)
# rm(mo24.msm)
# rm(mo25.msm)
# rm(mo26.msm)
# rm(mo27.msm)
# rm(mo28.msm)
# rm(mo29.msm)
# rm(mo30.msm)
}

#Note on nomenclature 
# 1 non-agressive
# 2 aggressive
# 3 cmo
# 4 discharged
# 5 death

# First order Simulation data frames 
{
# Convert simulations into data frames 
df1.sim<- as.data.frame(sim1.msm)
df1.sim<-df1.sim %>% gather(key = "id", value = "state")
df1.sim<-df1.sim %>% mutate(col1=streak_run(state, k=1000))
df1.sim<-df1.sim %>% filter(!(state=="4" & col1!=1))
df1.sim<-df1.sim %>% filter(!(state=="5" & col1!=1))

df2.sim<- as.data.frame(sim2.msm)
df2.sim<-df2.sim %>% gather(key = "id", value = "state")
df2.sim<-df2.sim %>% mutate(col1=streak_run(state, k=1000))
df2.sim<-df2.sim %>% filter(!(state=="4" & col1!=1))
df2.sim<-df2.sim %>% filter(!(state=="5" & col1!=1))

df3.sim<- as.data.frame(sim3.msm)
df3.sim<-df3.sim %>% gather(key = "id", value = "state")
df3.sim<-df3.sim %>% mutate(col1=streak_run(state, k=1000))
df3.sim<-df3.sim %>% filter(!(state=="4" & col1!=1))
df3.sim<-df3.sim %>% filter(!(state=="5" & col1!=1))

df4.sim<- as.data.frame(sim4.msm)
df4.sim<-df4.sim %>% gather(key = "id", value = "state")
df4.sim<-df4.sim %>% mutate(col1=streak_run(state, k=1000))
df4.sim<-df4.sim %>% filter(!(state=="4" & col1!=1))
df4.sim<-df4.sim %>% filter(!(state=="5" & col1!=1))

df5.sim<- as.data.frame(sim5.msm)
df5.sim<-df5.sim %>% gather(key = "id", value = "state")
df5.sim<-df5.sim %>% mutate(col1=streak_run(state, k=1000))
df5.sim<-df5.sim %>% filter(!(state=="4" & col1!=1))
df5.sim<-df5.sim %>% filter(!(state=="5" & col1!=1))

df6.sim<- as.data.frame(sim6.msm)
df6.sim<-df6.sim %>% gather(key = "id", value = "state")
df6.sim<-df6.sim %>% mutate(col1=streak_run(state, k=1000))
df6.sim<-df6.sim %>% filter(!(state=="4" & col1!=1))
df6.sim<-df6.sim %>% filter(!(state=="5" & col1!=1))

df7.sim<- as.data.frame(sim7.msm)
df7.sim<-df7.sim %>% gather(key = "id", value = "state")
df7.sim<-df7.sim %>% mutate(col1=streak_run(state, k=1000))
df7.sim<-df7.sim %>% filter(!(state=="4" & col1!=1))
df7.sim<-df7.sim %>% filter(!(state=="5" & col1!=1))

df8.sim<- as.data.frame(sim8.msm)
df8.sim<-df8.sim %>% gather(key = "id", value = "state")
df8.sim<-df8.sim %>% mutate(col1=streak_run(state, k=1000))
df8.sim<-df8.sim %>% filter(!(state=="4" & col1!=1))
df8.sim<-df8.sim %>% filter(!(state=="5" & col1!=1))

df9.sim<- as.data.frame(sim9.msm)
df9.sim<-df9.sim %>% gather(key = "id", value = "state")
df9.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df9.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df9.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df10.sim<- as.data.frame(sim10.msm)
df10.sim<-df9.sim %>% gather(key = "id", value = "state")
df10.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df10.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df10.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df11.sim<- as.data.frame(sim11.msm)
df11.sim<-df11.sim %>% gather(key = "id", value = "state")
df11.sim<-df11.sim %>% mutate(col1=streak_run(state, k=1000))
df11.sim<-df11.sim %>% filter(!(state=="4" & col1!=1))
df11.sim<-df11.sim %>% filter(!(state=="5" & col1!=1))

df12.sim<- as.data.frame(sim12.msm)
df12.sim<-df12.sim %>% gather(key = "id", value = "state")
df12.sim<-df12.sim %>% mutate(col1=streak_run(state, k=1000))
df12.sim<-df12.sim %>% filter(!(state=="4" & col1!=1))
df12.sim<-df12.sim %>% filter(!(state=="5" & col1!=1))

df13.sim<- as.data.frame(sim13.msm)
df13.sim<-df13.sim %>% gather(key = "id", value = "state")
df13.sim<-df13.sim %>% mutate(col1=streak_run(state, k=1000))
df13.sim<-df13.sim %>% filter(!(state=="4" & col1!=1))
df13.sim<-df13.sim %>% filter(!(state=="5" & col1!=1))

df14.sim<- as.data.frame(sim14.msm)
df14.sim<-df14.sim %>% gather(key = "id", value = "state")
df14.sim<-df14.sim %>% mutate(col1=streak_run(state, k=1000))
df14.sim<-df14.sim %>% filter(!(state=="4" & col1!=1))
df14.sim<-df14.sim %>% filter(!(state=="5" & col1!=1))

df15.sim<- as.data.frame(sim15.msm)
df15.sim<-df15.sim %>% gather(key = "id", value = "state")
df15.sim<-df15.sim %>% mutate(col1=streak_run(state, k=1000))
df15.sim<-df15.sim %>% filter(!(state=="4" & col1!=1))
df15.sim<-df15.sim %>% filter(!(state=="5" & col1!=1))

df16.sim<- as.data.frame(sim16.msm)
df16.sim<-df16.sim %>% gather(key = "id", value = "state")
df16.sim<-df16.sim %>% mutate(col1=streak_run(state, k=1000))
df16.sim<-df16.sim %>% filter(!(state=="4" & col1!=1))
df16.sim<-df16.sim %>% filter(!(state=="5" & col1!=1))

df17.sim<- as.data.frame(sim17.msm)
df17.sim<-df17.sim %>% gather(key = "id", value = "state")
df17.sim<-df17.sim %>% mutate(col1=streak_run(state, k=1000))
df17.sim<-df17.sim %>% filter(!(state=="4" & col1!=1))
df17.sim<-df17.sim %>% filter(!(state=="5" & col1!=1))

df18.sim<- as.data.frame(sim18.msm)
df18.sim<-df18.sim %>% gather(key = "id", value = "state")
df18.sim<-df18.sim %>% mutate(col1=streak_run(state, k=1000))
df18.sim<-df18.sim %>% filter(!(state=="4" & col1!=1))
df18.sim<-df18.sim %>% filter(!(state=="5" & col1!=1))

df19.sim<- as.data.frame(sim19.msm)
df19.sim<-df19.sim %>% gather(key = "id", value = "state")
df19.sim<-df19.sim %>% mutate(col1=streak_run(state, k=1000))
df19.sim<-df19.sim %>% filter(!(state=="4" & col1!=1))
df19.sim<-df19.sim %>% filter(!(state=="5" & col1!=1))

df20.sim<- as.data.frame(sim20.msm)
df20.sim<-df9.sim %>% gather(key = "id", value = "state")
df20.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df20.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df20.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df21.sim<- as.data.frame(sim21.msm)
df21.sim<-df21.sim %>% gather(key = "id", value = "state")
df21.sim<-df21.sim %>% mutate(col1=streak_run(state, k=1000))
df21.sim<-df21.sim %>% filter(!(state=="4" & col1!=1))
df21.sim<-df21.sim %>% filter(!(state=="5" & col1!=1))

df22.sim<- as.data.frame(sim22.msm)
df22.sim<-df22.sim %>% gather(key = "id", value = "state")
df22.sim<-df22.sim %>% mutate(col1=streak_run(state, k=1000))
df22.sim<-df22.sim %>% filter(!(state=="4" & col1!=1))
df22.sim<-df22.sim %>% filter(!(state=="5" & col1!=1))

df23.sim<- as.data.frame(sim23.msm)
df23.sim<-df23.sim %>% gather(key = "id", value = "state")
df23.sim<-df23.sim %>% mutate(col1=streak_run(state, k=1000))
df23.sim<-df23.sim %>% filter(!(state=="4" & col1!=1))
df23.sim<-df23.sim %>% filter(!(state=="5" & col1!=1))

df24.sim<- as.data.frame(sim24.msm)
df24.sim<-df24.sim %>% gather(key = "id", value = "state")
df24.sim<-df24.sim %>% mutate(col1=streak_run(state, k=1000))
df24.sim<-df24.sim %>% filter(!(state=="4" & col1!=1))
df24.sim<-df24.sim %>% filter(!(state=="5" & col1!=1))

df25.sim<- as.data.frame(sim25.msm)
df25.sim<-df25.sim %>% gather(key = "id", value = "state")
df25.sim<-df25.sim %>% mutate(col1=streak_run(state, k=1000))
df25.sim<-df25.sim %>% filter(!(state=="4" & col1!=1))
df25.sim<-df25.sim %>% filter(!(state=="5" & col1!=1))

df26.sim<- as.data.frame(sim26.msm)
df26.sim<-df26.sim %>% gather(key = "id", value = "state")
df26.sim<-df26.sim %>% mutate(col1=streak_run(state, k=1000))
df26.sim<-df26.sim %>% filter(!(state=="4" & col1!=1))
df26.sim<-df26.sim %>% filter(!(state=="5" & col1!=1))

df27.sim<- as.data.frame(sim27.msm)
df27.sim<-df27.sim %>% gather(key = "id", value = "state")
df27.sim<-df27.sim %>% mutate(col1=streak_run(state, k=1000))
df27.sim<-df27.sim %>% filter(!(state=="4" & col1!=1))
df27.sim<-df27.sim %>% filter(!(state=="5" & col1!=1))

df28.sim<- as.data.frame(sim28.msm)
df28.sim<-df28.sim %>% gather(key = "id", value = "state")
df28.sim<-df28.sim %>% mutate(col1=streak_run(state, k=1000))
df28.sim<-df28.sim %>% filter(!(state=="4" & col1!=1))
df28.sim<-df28.sim %>% filter(!(state=="5" & col1!=1))

df29.sim<- as.data.frame(sim29.msm)
df29.sim<-df29.sim %>% gather(key = "id", value = "state")
df29.sim<-df29.sim %>% mutate(col1=streak_run(state, k=1000))
df29.sim<-df29.sim %>% filter(!(state=="4" & col1!=1))
df29.sim<-df29.sim %>% filter(!(state=="5" & col1!=1))

df30.sim<- as.data.frame(sim30.msm)
df30.sim<-df30.sim %>% gather(key = "id", value = "state")
df30.sim<-df30.sim %>% mutate(col1=streak_run(state, k=1000))
df30.sim<-df30.sim %>% filter(!(state=="4" & col1!=1))
df30.sim<-df30.sim %>% filter(!(state=="5" & col1!=1))

rm(sim1.msm) 
rm(sim2.msm)
rm(sim3.msm)
rm(sim4.msm)
rm(sim5.msm)
rm(sim6.msm)
rm(sim7.msm)
rm(sim8.msm)
rm(sim9.msm)
rm(sim10.msm)
rm(sim11.msm)
rm(sim12.msm)
rm(sim13.msm)
rm(sim14.msm)
rm(sim15.msm)
rm(sim16.msm)
rm(sim17.msm)
rm(sim18.msm)
rm(sim19.msm)
rm(sim20.msm)
rm(sim21.msm)
rm(sim22.msm)
rm(sim23.msm)
rm(sim24.msm)
rm(sim25.msm)
rm(sim26.msm)
rm(sim27.msm)
rm(sim28.msm)
rm(sim29.msm)
rm(sim30.msm)
}



# Base case analysis Utilities and costs  ---------------------------------

{
# Utility value for being in ICU:	0.66, 0.39-0.93,	Beta,	(Cost effectiveness of antimicrobial catheters in the intensive care unit: addressing uncertainty in the decision)
# Utility value for highly invasive care:	0.55,	0.39-0.71,	(Beta,	Comparison of Health-Related Quality of Life Preferences Between Physicians and Cirrhotic Patients: Implications for Cost–Utility Analysesin Chronic Liver Disease)
# Utility value for paliative care:	0.28,	0.23-0.35,	Beta,	(Ultrasound Elastography for Fibrosis Surveillance Is Cos tEffective in Patients with Chronic Hepatitis C Virus in the UK)

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-
  
# sources: BIDMC - Patient Financial Services & HMFP - Finance

# utilities
u_nhic<-0.66
u_hic<-0.55
u_cmo<-0.28
u_discharge<-1
u_died<-1

# 1 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df1.sim<-df1.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df1.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df1.sim$day>0, 340,0))+4650+(ifelse(df1.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00 # assumping death at beggining of day and no extra costs 

df1.sim<-df1.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                      state=="1"~u_nhic,
                                      state=="3"~u_cmo,
                                      state=="4"~u_discharge, 
                                      state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df1.summary<- df1.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= mean(utility),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df1.overall<- df1.summary[!duplicated(df1.summary$id), ]
#
df1.overall_u_mean<-mean(df1.summary$utility_mean)
df1.overall_c_mean<-mean(df1.summary$costs_sum)

# Mean survival utility and costs at N dayss
df1.survival<-df1.summary %>% filter(state%in%4)
df1.survival_u_mean<-mean(df1.survival$utility_mean)
df1.survival_c_mean<-mean(df1.survival$costs_sum)

#-------------------------------------------------------------------------------

# 2 day hic ////////////////////////////////////////////////////////////////////

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-

# Create flags for sequential days  
df2.sim<-df2.sim %>% mutate(day=(streak_run(id, k=1000)-1))

# Create costs
c_nhic<-3805+662+(ifelse(df2.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df2.sim$day>0, 340,0))+4650+(ifelse(df2.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*1)+(340*1)+(724*1)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC 

df2.sim<-df2.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df2.summary<- df2.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))), # adding extra days of utility given HIC
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df2.overall<- df2.summary[!duplicated(df2.summary$id), ]
#
df2.overall_u_mean<-mean(df2.summary$utility_mean)
df2.overall_c_mean<-mean(df2.summary$costs_sum)

# Mean survival utility and costs at N dayss
df2.survival<-df2.summary %>% filter(state%in%4)
df2.survival_u_mean<-mean(df2.survival$utility_mean)
df2.survival_c_mean<-mean(df2.survival$costs_sum)

#-------------------------------------------------------------------------------

# 3 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df3.sim<-df3.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df3.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df3.sim$day>0, 340,0))+4650+(ifelse(df3.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*2)+(340*2)+(724*2))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC

df3.sim<-df3.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df3.summary<- df3.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df3.overall<- df3.summary[!duplicated(df3.summary$id), ]
#
df3.overall_u_mean<-mean(df3.summary$utility_mean)
df3.overall_c_mean<-mean(df3.summary$costs_sum)

# Mean survival utility and costs at N dayss
df3.survival<-df3.summary %>% filter(state%in%4)
df3.survival_u_mean<-mean(df3.survival$utility_mean)
df3.survival_c_mean<-mean(df3.survival$costs_sum)

#-------------------------------------------------------------------------------

# 4 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df4.sim<-df4.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df4.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df4.sim$day>0, 340,0))+4650+(ifelse(df4.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*3)+(340*3)+(724*3))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df4.sim<-df4.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df4.summary<- df4.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df4.overall<- df4.summary[!duplicated(df4.summary$id), ]
#
df4.overall_u_mean<-mean(df4.summary$utility_mean)
df4.overall_c_mean<-mean(df4.summary$costs_sum)

# Mean survival utility and costs at N dayss
df4.survival<-df4.summary %>% filter(state%in%4)
df4.survival_u_mean<-mean(df4.survival$utility_mean)
df4.survival_c_mean<-mean(df4.survival$costs_sum)

#-------------------------------------------------------------------------------

# 5 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df5.sim<-df5.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df5.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df5.sim$day>0, 340,0))+4650+(ifelse(df5.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*4)+(340*4)+(724*4))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df5.sim<-df5.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df5.summary<- df5.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df5.overall<- df5.summary[!duplicated(df5.summary$id), ]
#
df5.overall_u_mean<-mean(df5.summary$utility_mean)
df5.overall_c_mean<-mean(df5.summary$costs_sum)

# Mean survival utility and costs at N dayss
df5.survival<-df5.summary %>% filter(state%in%4)
df5.survival_u_mean<-mean(df5.survival$utility_mean)
df5.survival_c_mean<-mean(df5.survival$costs_sum)

#-------------------------------------------------------------------------------

# 6 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df6.sim<-df6.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df6.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df6.sim$day>0, 340,0))+4650+(ifelse(df6.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*5)+(340*5)+(724*5))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df6.sim<-df6.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df6.summary<- df6.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df6.overall<- df6.summary[!duplicated(df6.summary$id), ]
#
df6.overall_u_mean<-mean(df6.summary$utility_mean)
df6.overall_c_mean<-mean(df6.summary$costs_sum)

# Mean survival utility and costs at N dayss
df6.survival<-df6.summary %>% filter(state%in%4)
df6.survival_u_mean<-mean(df6.survival$utility_mean)
df6.survival_c_mean<-mean(df6.survival$costs_sum)

#-------------------------------------------------------------------------------

# 7 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df7.sim<-df7.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df7.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df7.sim$day>0, 340,0))+4650+(ifelse(df7.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*6)+(340*6)+(724*6))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df7.sim<-df7.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df7.summary<- df7.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df7.overall<- df7.summary[!duplicated(df7.summary$id), ]
#
df7.overall_u_mean<-mean(df7.summary$utility_mean)
df7.overall_c_mean<-mean(df7.summary$costs_sum)

# Mean survival utility and costs at N dayss
df7.survival<-df7.summary %>% filter(state%in%4)
df7.survival_u_mean<-mean(df7.survival$utility_mean)
df7.survival_c_mean<-mean(df7.survival$costs_sum)

#-------------------------------------------------------------------------------

# 8 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df8.sim<-df8.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df8.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df8.sim$day>0, 340,0))+4650+(ifelse(df8.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*7)+(340*7)+(724*7)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df8.sim<-df8.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df8.summary<- df8.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df8.overall<- df8.summary[!duplicated(df8.summary$id), ]
#
df8.overall_u_mean<-mean(df8.summary$utility_mean)
df8.overall_c_mean<-mean(df8.summary$costs_sum)

# Mean survival utility and costs at N dayss
df8.survival<-df8.summary %>% filter(state%in%4)
df8.survival_u_mean<-mean(df8.survival$utility_mean)
df8.survival_c_mean<-mean(df8.survival$costs_sum)

#-------------------------------------------------------------------------------

# 9 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df9.sim<-df9.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df9.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df9.sim$day>0, 340,0))+4650+(ifelse(df9.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*8)+(340*8)+(724*8))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df9.sim<-df9.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df9.summary<- df9.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df9.overall<- df9.summary[!duplicated(df9.summary$id), ]
#
df9.overall_u_mean<-mean(df9.summary$utility_mean)
df9.overall_c_mean<-mean(df9.summary$costs_sum)

# Mean survival utility and costs at N dayss
df9.survival<-df9.summary %>% filter(state%in%4)
df9.survival_u_mean<-mean(df9.survival$utility_mean)
df9.survival_c_mean<-mean(df9.survival$costs_sum)

#-------------------------------------------------------------------------------

# 10 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df10.sim<-df10.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df10.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df10.sim$day>0, 340,0))+4650+(ifelse(df10.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*9)+(340*9)+(724*9))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df10.sim<-df10.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df10.summary<- df10.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df10.overall<- df10.summary[!duplicated(df10.summary$id), ]
#
df10.overall_u_mean<-mean(df10.summary$utility_mean)
df10.overall_c_mean<-mean(df10.summary$costs_sum)

# Mean survival utility and costs at N dayss
df10.survival<-df10.summary %>% filter(state%in%4)
df10.survival_u_mean<-mean(df10.survival$utility_mean)
df10.survival_c_mean<-mean(df10.survival$costs_sum)

#-------------------------------------------------------------------------------

# 11 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df11.sim<-df11.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df11.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df11.sim$day>0, 340,0))+4650+(ifelse(df11.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*10)+(340*10)+(724*10))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df11.sim<-df11.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df11.summary<- df11.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df11.overall<- df11.summary[!duplicated(df11.summary$id), ]
#
df11.overall_u_mean<-mean(df11.summary$utility_mean)
df11.overall_c_mean<-mean(df11.summary$costs_sum)

# Mean survival utility and costs at N dayss
df11.survival<-df11.summary %>% filter(state%in%4)
df11.survival_u_mean<-mean(df11.survival$utility_mean)
df11.survival_c_mean<-mean(df11.survival$costs_sum)

#-------------------------------------------------------------------------------

# 12 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df12.sim<-df12.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df12.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df12.sim$day>0, 340,0))+4650+(ifelse(df12.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*11)+(340*11)+(724*11))   # assumping death at beggining of day and no extra costs 

df12.sim<-df12.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df12.summary<- df12.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df12.overall<- df12.summary[!duplicated(df12.summary$id), ]
#
df12.overall_u_mean<-mean(df12.summary$utility_mean)
df12.overall_c_mean<-mean(df12.summary$costs_sum)

# Mean survival utility and costs at N dayss
df12.survival<-df12.summary %>% filter(state%in%4)
df12.survival_u_mean<-mean(df12.survival$utility_mean)
df12.survival_c_mean<-mean(df12.survival$costs_sum)

#-------------------------------------------------------------------------------

# 13 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df13.sim<-df13.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df13.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df13.sim$day>0, 340,0))+4650+(ifelse(df13.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*12)+(340*12)+(724*12)) # assumping death at beggining of day and no extra costs 

df13.sim<-df13.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df13.summary<- df13.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df13.overall<- df13.summary[!duplicated(df13.summary$id), ]
#
df13.overall_u_mean<-mean(df13.summary$utility_mean)
df13.overall_c_mean<-mean(df13.summary$costs_sum)

# Mean survival utility and costs at N dayss
df13.survival<-df13.summary %>% filter(state%in%4)
df13.survival_u_mean<-mean(df13.survival$utility_mean)
df13.survival_c_mean<-mean(df13.survival$costs_sum)

#-------------------------------------------------------------------------------

# 14 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df14.sim<-df14.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df14.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df14.sim$day>0, 340,0))+4650+(ifelse(df14.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*13)+(340*13)+(724*13))  # assumping death at beggining of day and no extra costs 

df14.sim<-df14.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df14.summary<- df14.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df14.overall<- df14.summary[!duplicated(df14.summary$id), ]
#
df14.overall_u_mean<-mean(df14.summary$utility_mean)
df14.overall_c_mean<-mean(df14.summary$costs_sum)

# Mean survival utility and costs at N dayss
df14.survival<-df14.summary %>% filter(state%in%4)
df14.survival_u_mean<-mean(df14.survival$utility_mean)
df14.survival_c_mean<-mean(df14.survival$costs_sum)

#-------------------------------------------------------------------------------

# 15 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df15.sim<-df15.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df15.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df15.sim$day>0, 340,0))+4650+(ifelse(df15.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*14)+(340*14)+(724*14))  # assumping death at beggining of day and no extra costs 

df15.sim<-df15.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df15.summary<- df15.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df15.overall<- df15.summary[!duplicated(df15.summary$id), ]
#
df15.overall_u_mean<-mean(df15.summary$utility_mean)
df15.overall_c_mean<-mean(df15.summary$costs_sum)

# Mean survival utility and costs at N dayss
df15.survival<-df15.summary %>% filter(state%in%4)
df15.survival_u_mean<-mean(df15.survival$utility_mean)
df15.survival_c_mean<-mean(df15.survival$costs_sum)

#-------------------------------------------------------------------------------

# 16 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df16.sim<-df16.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df16.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df16.sim$day>0, 340,0))+4650+(ifelse(df16.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*15)+(340*15)+(724*15))  # assumping death at beggining of day and no extra costs 

df16.sim<-df16.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df16.summary<- df16.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df16.overall<- df16.summary[!duplicated(df16.summary$id), ]
#
df16.overall_u_mean<-mean(df16.summary$utility_mean)
df16.overall_c_mean<-mean(df16.summary$costs_sum)

# Mean survival utility and costs at N dayss
df16.survival<-df16.summary %>% filter(state%in%4)
df16.survival_u_mean<-mean(df16.survival$utility_mean)
df16.survival_c_mean<-mean(df16.survival$costs_sum)

#-------------------------------------------------------------------------------

# 17 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df17.sim<-df17.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df17.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df17.sim$day>0, 340,0))+4650+(ifelse(df17.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*16)+(340*16)+(724*16))  # assumping death at beggining of day and no extra costs 

df17.sim<-df17.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df17.summary<- df17.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df17.overall<- df17.summary[!duplicated(df17.summary$id), ]
#
df17.overall_u_mean<-mean(df17.summary$utility_mean)
df17.overall_c_mean<-mean(df17.summary$costs_sum)

# Mean survival utility and costs at N dayss
df17.survival<-df17.summary %>% filter(state%in%4)
df17.survival_u_mean<-mean(df17.survival$utility_mean)
df17.survival_c_mean<-mean(df17.survival$costs_sum)

#-------------------------------------------------------------------------------

# 18 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df18.sim<-df18.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df18.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df18.sim$day>0, 340,0))+4650+(ifelse(df18.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*17)+(340*17)+(724*17))  # assumping death at beggining of day and no extra costs 

df18.sim<-df18.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df18.summary<- df18.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df18.overall<- df18.summary[!duplicated(df18.summary$id), ]
#
df18.overall_u_mean<-mean(df18.summary$utility_mean)
df18.overall_c_mean<-mean(df18.summary$costs_sum)

# Mean survival utility and costs at N dayss
df18.survival<-df18.summary %>% filter(state%in%4)
df18.survival_u_mean<-mean(df18.survival$utility_mean)
df18.survival_c_mean<-mean(df18.survival$costs_sum)

#-------------------------------------------------------------------------------

# 19 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df19.sim<-df19.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df19.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df19.sim$day>0, 340,0))+4650+(ifelse(df19.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*18)+(340*18)+(724*18))  # assumping death at beggining of day and no extra costs 

df19.sim<-df19.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df19.summary<- df19.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df19.overall<- df19.summary[!duplicated(df19.summary$id), ]
#
df19.overall_u_mean<-mean(df19.summary$utility_mean)
df19.overall_c_mean<-mean(df19.summary$costs_sum)

# Mean survival utility and costs at N dayss
df19.survival<-df19.summary %>% filter(state%in%4)
df19.survival_u_mean<-mean(df19.survival$utility_mean)
df19.survival_c_mean<-mean(df19.survival$costs_sum)

#-------------------------------------------------------------------------------

# 20 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df20.sim<-df20.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df20.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df20.sim$day>0, 340,0))+4650+(ifelse(df20.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*19)+(340*19)+(724*19))  # assumping death at beggining of day and no extra costs 

df20.sim<-df20.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df20.summary<- df20.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df20.overall<- df20.summary[!duplicated(df20.summary$id), ]
#
df20.overall_u_mean<-mean(df20.summary$utility_mean)
df20.overall_c_mean<-mean(df20.summary$costs_sum)

# Mean survival utility and costs at N dayss
df20.survival<-df20.summary %>% filter(state%in%4)
df20.survival_u_mean<-mean(df20.survival$utility_mean)
df20.survival_c_mean<-mean(df20.survival$costs_sum)

#-------------------------------------------------------------------------------

# 21 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df21.sim<-df21.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df21.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df21.sim$day>0, 340,0))+4650+(ifelse(df21.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*20)+(340*20)+(724*20))  # assumping death at beggining of day and no extra costs 

df21.sim<-df21.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df21.summary<- df21.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df21.overall<- df21.summary[!duplicated(df21.summary$id), ]
#
df21.overall_u_mean<-mean(df21.summary$utility_mean)
df21.overall_c_mean<-mean(df21.summary$costs_sum)

# Mean survival utility and costs at N dayss
df21.survival<-df21.summary %>% filter(state%in%4)
df21.survival_u_mean<-mean(df21.survival$utility_mean)
df21.survival_c_mean<-mean(df21.survival$costs_sum)

#-------------------------------------------------------------------------------

# 22 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df22.sim<-df22.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df22.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df22.sim$day>0, 340,0))+4650+(ifelse(df22.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*21)+(340*21)+(724*21)) # assumping death at beggining of day and no extra costs 

df22.sim<-df22.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df22.summary<- df22.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df22.overall<- df22.summary[!duplicated(df22.summary$id), ]
#
df22.overall_u_mean<-mean(df22.summary$utility_mean)
df22.overall_c_mean<-mean(df22.summary$costs_sum)

# Mean survival utility and costs at N dayss
df22.survival<-df22.summary %>% filter(state%in%4)
df22.survival_u_mean<-mean(df22.survival$utility_mean)
df22.survival_c_mean<-mean(df22.survival$costs_sum)

#-------------------------------------------------------------------------------

# 23 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df23.sim<-df23.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df23.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df23.sim$day>0, 340,0))+4650+(ifelse(df23.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*22)+(340*22)+(724*22)) # assumping death at beggining of day and no extra costs 

df23.sim<-df23.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df23.summary<- df23.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df23.overall<- df23.summary[!duplicated(df23.summary$id), ]
#
df23.overall_u_mean<-mean(df23.summary$utility_mean)
df23.overall_c_mean<-mean(df23.summary$costs_sum)

# Mean survival utility and costs at N dayss
df23.survival<-df23.summary %>% filter(state%in%4)
df23.survival_u_mean<-mean(df23.survival$utility_mean)
df23.survival_c_mean<-mean(df23.survival$costs_sum)

#-------------------------------------------------------------------------------

# 24 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df24.sim<-df24.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df24.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df24.sim$day>0, 340,0))+4650+(ifelse(df24.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*23)+(340*23)+(724*23))  # assumping death at beggining of day and no extra costs 

df24.sim<-df24.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df24.summary<- df24.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df24.overall<- df24.summary[!duplicated(df24.summary$id), ]
#
df24.overall_u_mean<-mean(df24.summary$utility_mean)
df24.overall_c_mean<-mean(df24.summary$costs_sum)

# Mean survival utility and costs at N dayss
df24.survival<-df24.summary %>% filter(state%in%4)
df24.survival_u_mean<-mean(df24.survival$utility_mean)
df24.survival_c_mean<-mean(df24.survival$costs_sum)

#-------------------------------------------------------------------------------

# 25 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df25.sim<-df25.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df25.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df25.sim$day>0, 340,0))+4650+(ifelse(df25.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*24)+(340*24)+(724*24)) # assumping death at beggining of day and no extra costs 

df25.sim<-df25.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df25.summary<- df25.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df25.overall<- df25.summary[!duplicated(df25.summary$id), ]
#
df25.overall_u_mean<-mean(df24.summary$utility_mean)
df25.overall_c_mean<-mean(df24.summary$costs_sum)

# Mean survival utility and costs at N dayss
df25.survival<-df25.summary %>% filter(state%in%4)
df25.survival_u_mean<-mean(df25.survival$utility_mean)
df25.survival_c_mean<-mean(df25.survival$costs_sum)

#-------------------------------------------------------------------------------

# 26 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df26.sim<-df26.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df26.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df26.sim$day>0, 340,0))+4650+(ifelse(df26.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*25)+(340*25)+(724*25))  # assumping death at beggining of day and no extra costs 

df26.sim<-df26.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df26.summary<- df26.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df26.overall<- df26.summary[!duplicated(df26.summary$id), ]
#
df26.overall_u_mean<-mean(df26.summary$utility_mean)
df26.overall_c_mean<-mean(df26.summary$costs_sum)

# Mean survival utility and costs at N dayss
df26.survival<-df26.summary %>% filter(state%in%4)
df26.survival_u_mean<-mean(df26.survival$utility_mean)
df26.survival_c_mean<-mean(df26.survival$costs_sum)

#-------------------------------------------------------------------------------

# 27 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df27.sim<-df27.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df27.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df27.sim$day>0, 340,0))+4650+(ifelse(df27.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*26)+(340*26)+(724*26))  # assumping death at beggining of day and no extra costs 

df27.sim<-df27.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df27.summary<- df27.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df27.overall<- df27.summary[!duplicated(df27.summary$id), ]
#
df27.overall_u_mean<-mean(df27.summary$utility_mean)
df27.overall_c_mean<-mean(df27.summary$costs_sum)

# Mean survival utility and costs at N dayss
df27.survival<-df27.summary %>% filter(state%in%4)
df27.survival_u_mean<-mean(df27.survival$utility_mean)
df27.survival_c_mean<-mean(df27.survival$costs_sum)

#-------------------------------------------------------------------------------

# 28 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df28.sim<-df28.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df28.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df28.sim$day>0, 340,0))+4650+(ifelse(df28.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*27)+(340*27)+(724*27))  # assumping death at beggining of day and no extra costs 

df28.sim<-df28.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df28.summary<- df28.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df28.overall<- df28.summary[!duplicated(df28.summary$id), ]
#
df28.overall_u_mean<-mean(df28.summary$utility_mean)
df28.overall_c_mean<-mean(df28.summary$costs_sum)

# Mean survival utility and costs at N dayss
df28.survival<-df28.summary %>% filter(state%in%4)
df28.survival_u_mean<-mean(df28.survival$utility_mean)
df28.survival_c_mean<-mean(df28.survival$costs_sum)

#-------------------------------------------------------------------------------

# 29 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df29.sim<-df29.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df29.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df29.sim$day>0, 340,0))+4650+(ifelse(df29.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*28)+(340*28)+(724*28))  # assumping death at beggining of day and no extra costs 

df29.sim<-df29.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df29.summary<- df29.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean=(sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df29.overall<- df29.summary[!duplicated(df29.summary$id), ]
#
df29.overall_u_mean<-mean(df29.summary$utility_mean)
df29.overall_c_mean<-mean(df29.summary$costs_sum)

# Mean survival utility and costs at N dayss
df29.survival<-df29.summary %>% filter(state%in%4)
df29.survival_u_mean<-mean(df29.survival$utility_mean)
df29.survival_c_mean<-mean(df29.survival$costs_sum)

#-------------------------------------------------------------------------------

# 30 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df30.sim<-df30.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df30.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df30.sim$day>0, 340,0))+4650+(ifelse(df30.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*29)+(340*29)+(724*29))  # assumping death at beggining of day and no extra costs 

df30.sim<-df30.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df30.summary<- df30.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df30.overall<- df30.summary[!duplicated(df30.summary$id), ]
#
df30.overall_u_mean<-mean(df30.summary$utility_mean)
df30.overall_c_mean<-mean(df30.summary$costs_sum)

# Mean survival utility and costs at N dayss
df30.survival<-df30.summary %>% filter(state%in%4)
df30.survival_u_mean<-mean(df30.survival$utility_mean)
df30.survival_c_mean<-mean(df30.survival$costs_sum)


df1.summary_bc<-df1.summary
df2.summary_bc<-df2.summary
df3.summary_bc<-df3.summary
df4.summary_bc<-df4.summary
df5.summary_bc<-df5.summary
df6.summary_bc<-df6.summary
df7.summary_bc<-df7.summary
df8.summary_bc<-df8.summary
df9.summary_bc<-df9.summary
df10.summary_bc<-df10.summary
df11.summary_bc<-df11.summary
df12.summary_bc<-df12.summary
df13.summary_bc<-df13.summary
df14.summary_bc<-df14.summary
df15.summary_bc<-df15.summary
df16.summary_bc<-df16.summary
df17.summary_bc<-df17.summary
df18.summary_bc<-df18.summary
df19.summary_bc<-df19.summary
df20.summary_bc<-df20.summary
df21.summary_bc<-df21.summary
df22.summary_bc<-df22.summary
df23.summary_bc<-df23.summary
df24.summary_bc<-df24.summary
df25.summary_bc<-df25.summary
df26.summary_bc<-df26.summary
df27.summary_bc<-df27.summary
df28.summary_bc<-df28.summary
df29.summary_bc<-df29.summary
df30.summary_bc<-df30.summary



rm(df1.sim)
rm(df2.sim)
rm(df3.sim)
rm(df4.sim)
rm(df5.sim)
rm(df6.sim)
rm(df7.sim)
rm(df8.sim)
rm(df9.sim)
rm(df10.sim)
rm(df11.sim)
rm(df12.sim)
rm(df13.sim)
rm(df14.sim)
rm(df15.sim)
rm(df16.sim)
rm(df17.sim)
rm(df18.sim)
rm(df19.sim)
rm(df20.sim)
rm(df21.sim)
rm(df22.sim)
rm(df23.sim)
rm(df24.sim)
rm(df25.sim)
rm(df26.sim)
rm(df27.sim)
rm(df28.sim)
rm(df29.sim)
rm(df30.sim)
}



# Base case results ------------------------------------------------------------
bc.overall_c_vect<-c()
for (i in 1:30){
  bc.overall_c_vect[i]<-get(paste("df", i, ".overall_c_mean",sep = ""))
}

bc.overall_u_vect<-c()
for (i in 1:30){
  bc.overall_u_vect[i]<-get(paste("df", i, ".overall_u_mean",sep = ""))
}

bc.survival_c_vect<-c()
for (i in 1:30){
  bc.survival_c_vect[i]<-get(paste("df", i, ".survival_c_mean",sep = ""))
}

bc.survival_u_vect<-c()
for (i in 1:30){
  bc.survival_u_vect[i]<-get(paste("df", i, ".survival_u_mean",sep = ""))
}

bc.ce_results<- matrix(c(bc.overall_c_vect,bc.overall_u_vect,bc.survival_c_vect,bc.survival_u_vect), nrow=30, byrow=FALSE)
colnames(bc.ce_results) <- c("overall_c","overall_u","survival_c","survival_u")

#-----

#______________________________________________________________________________#
#                             SENSITIVITY ANALYSIS                             #  
#______________________________________________________________________________#

# SENSITIVITY ANALYSIS TRANSITION PROBABILITIES AND MARKOV OBJECTS  -------


# 1 WAY SENsITIVITY WITH CMO PROBABILITIES FOR HIC OPTIONS 

{
example.df<-df
example.df<-example.df %>% select(icustay_id, icudayseq_asc, states, sofa_group)
colnames(example.df)[1] <- 'id'  
colnames(example.df)[2] <- 'day'  
colnames(example.df)[4] <- 'sofa'  

f1 <- function(data, n){
  ids <- data %>%
    mutate(stateslead = lead(states, default = last(states))) %>%
    group_by(grp = rleid(states == 1)) %>% 
    filter(n() == n, states == 1, stateslead != 1) %>%     
    group_by(id) %>%     
    filter(n() == 1) %>%
    pull(id)
  
  data %>%
    filter(id %in% ids) %>%
    group_by(id) %>% 
    filter(cumsum(states) > 0)
}

# https://stackoverflow.com/questions/55432875/select-rows-of-ids-that-have-a-pattern-without-losing-the-other-rows/55434003?noredirect=1#comment97588830_55434003
# aknowledgement to akrun for code assistance for f1

# 1 DAY OF HIC

df1.msm<-f1(example.df, 1)
# transition table
df1.tt<-(statetable.msm(states, id, data=df1.msm))

# transition matrix
df1.tm<-as.matrix.data.frame(df1.tt)
df1.tm<-rbind(df1.tm, c(0,0,0,1,0))
df1.tm<-rbind(df1.tm, c(0,0,0,0,1))
df1.ptm<-df1.tm/rowSums(df1.tm)

# cmo probability is 14%
df1.ptm[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.cmo14<-df1.ptm

# transition matrix
df1.tm<-as.matrix.data.frame(df1.tt)
df1.tm<-rbind(df1.tm, c(0,0,0,1,0))
df1.tm<-rbind(df1.tm, c(0,0,0,0,1))
df1.ptm<-df1.tm/rowSums(df1.tm)

# cmo probability is 28%
df1.ptm[2, ] <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.cmo28<-df1.ptm

# transition matrix
df1.tm<-as.matrix.data.frame(df1.tt)
df1.tm<-rbind(df1.tm, c(0,0,0,1,0))
df1.tm<-rbind(df1.tm, c(0,0,0,0,1))
df1.ptm<-df1.tm/rowSums(df1.tm)

# cmo probability is 52%
df1.ptm[2, ] <- c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.cmo52<-df1.ptm

# transition matrix
df1.tm<-as.matrix.data.frame(df1.tt)
df1.tm<-rbind(df1.tm, c(0,0,0,1,0))
df1.tm<-rbind(df1.tm, c(0,0,0,0,1))
df1.ptm<-df1.tm/rowSums(df1.tm)

# cmo probability is 76%
df1.ptm[2, ] <- c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.cmo76<-df1.ptm

# transition matrix
df1.tm<-as.matrix.data.frame(df1.tt)
df1.tm<-rbind(df1.tm, c(0,0,0,1,0))
df1.tm<-rbind(df1.tm, c(0,0,0,0,1))
df1.ptm<-df1.tm/rowSums(df1.tm)

# cmo probability is 90%
df1.ptm[2, ] <- c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.cmo90<-df1.ptm


# sens_matrix.cmo14
# sens_matrix.cmo28
# sens_matrix.cmo52
# sens_matrix.cmo76
# sens_matrix.cmo90

}
{
# 2 day hic
#14
sens_matrix.cmo14_2<-mo2.msm@transitionMatrix
sens_matrix.cmo14_2[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_2<-mo2.msm@transitionMatrix
sens_matrix.cmo28_2[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_2<-mo2.msm@transitionMatrix
sens_matrix.cmo52_2[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_2<-mo2.msm@transitionMatrix
sens_matrix.cmo76_2[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_2<-mo2.msm@transitionMatrix
sens_matrix.cmo90_2[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 3 day hic
#14
sens_matrix.cmo14_3<-mo3.msm@transitionMatrix
sens_matrix.cmo14_3[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_3<-mo3.msm@transitionMatrix
sens_matrix.cmo28_3[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_3<-mo3.msm@transitionMatrix
sens_matrix.cmo52_3[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_3<-mo3.msm@transitionMatrix
sens_matrix.cmo76_3[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_3<-mo3.msm@transitionMatrix
sens_matrix.cmo90_3[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 4 day hic
#14
sens_matrix.cmo14_4<-mo4.msm@transitionMatrix
sens_matrix.cmo14_4[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_4<-mo4.msm@transitionMatrix
sens_matrix.cmo28_4[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_4<-mo4.msm@transitionMatrix
sens_matrix.cmo52_4[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_4<-mo4.msm@transitionMatrix
sens_matrix.cmo76_4[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_4<-mo4.msm@transitionMatrix
sens_matrix.cmo90_4[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 5 day hic
#14
sens_matrix.cmo14_5<-mo5.msm@transitionMatrix
sens_matrix.cmo14_5[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_5<-mo5.msm@transitionMatrix
sens_matrix.cmo28_5[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_5<-mo5.msm@transitionMatrix
sens_matrix.cmo52_5[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_5<-mo5.msm@transitionMatrix
sens_matrix.cmo76_5[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_5<-mo5.msm@transitionMatrix
sens_matrix.cmo90_5[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 6 day hic
#14
sens_matrix.cmo14_6<-mo6.msm@transitionMatrix
sens_matrix.cmo14_6[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_6<-mo6.msm@transitionMatrix
sens_matrix.cmo28_6[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_6<-mo6.msm@transitionMatrix
sens_matrix.cmo52_6[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_6<-mo6.msm@transitionMatrix
sens_matrix.cmo76_6[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_6<-mo6.msm@transitionMatrix
sens_matrix.cmo90_6[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 7 day hic
#14
sens_matrix.cmo14_7<-mo7.msm@transitionMatrix
sens_matrix.cmo14_7[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_7<-mo7.msm@transitionMatrix
sens_matrix.cmo28_7[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_7<-mo7.msm@transitionMatrix
sens_matrix.cmo52_7[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_7<-mo7.msm@transitionMatrix
sens_matrix.cmo76_7[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_7<-mo7.msm@transitionMatrix
sens_matrix.cmo90_7[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 8 day hic
#14
sens_matrix.cmo14_8<-mo8.msm@transitionMatrix
sens_matrix.cmo14_8[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_8<-mo8.msm@transitionMatrix
sens_matrix.cmo28_8[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_8<-mo8.msm@transitionMatrix
sens_matrix.cmo52_8[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_8<-mo8.msm@transitionMatrix
sens_matrix.cmo76_8[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_8<-mo8.msm@transitionMatrix
sens_matrix.cmo90_8[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 9 day hic
#14
sens_matrix.cmo14_9<-mo9.msm@transitionMatrix
sens_matrix.cmo14_9[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_9<-mo9.msm@transitionMatrix
sens_matrix.cmo28_9[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_9<-mo9.msm@transitionMatrix
sens_matrix.cmo52_9[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_9<-mo9.msm@transitionMatrix
sens_matrix.cmo76_9[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_9<-mo9.msm@transitionMatrix
sens_matrix.cmo90_9[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 10 day hic
#14
sens_matrix.cmo14_10<-mo10.msm@transitionMatrix
sens_matrix.cmo14_10[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_10<-mo10.msm@transitionMatrix
sens_matrix.cmo28_10[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_10<-mo10.msm@transitionMatrix
sens_matrix.cmo52_10[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_10<-mo10.msm@transitionMatrix
sens_matrix.cmo76_10[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_10<-mo10.msm@transitionMatrix
sens_matrix.cmo90_10[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 11 day hic
#14
sens_matrix.cmo14_11<-mo11.msm@transitionMatrix
sens_matrix.cmo14_11[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_11<-mo11.msm@transitionMatrix
sens_matrix.cmo28_11[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_11<-mo11.msm@transitionMatrix
sens_matrix.cmo52_11[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_11<-mo11.msm@transitionMatrix
sens_matrix.cmo76_11[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_11<-mo11.msm@transitionMatrix
sens_matrix.cmo90_11[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 12 day hic

#14
sens_matrix.cmo14_12<-mo12.msm@transitionMatrix
sens_matrix.cmo14_12[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_12<-mo12.msm@transitionMatrix
sens_matrix.cmo28_12[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_12<-mo12.msm@transitionMatrix
sens_matrix.cmo52_12[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_12<-mo12.msm@transitionMatrix
sens_matrix.cmo76_12[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_12<-mo12.msm@transitionMatrix
sens_matrix.cmo90_12[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 13 day hic

#14
sens_matrix.cmo14_13<-mo13.msm@transitionMatrix
sens_matrix.cmo14_13[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_13<-mo13.msm@transitionMatrix
sens_matrix.cmo28_13[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_13<-mo13.msm@transitionMatrix
sens_matrix.cmo52_13[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_13<-mo13.msm@transitionMatrix
sens_matrix.cmo76_13[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_13<-mo13.msm@transitionMatrix
sens_matrix.cmo90_13[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 14 day hic

#14
sens_matrix.cmo14_14<-mo14.msm@transitionMatrix
sens_matrix.cmo14_14[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_14<-mo14.msm@transitionMatrix
sens_matrix.cmo28_14[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_14<-mo14.msm@transitionMatrix
sens_matrix.cmo52_14[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_14<-mo14.msm@transitionMatrix
sens_matrix.cmo76_14[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_14<-mo14.msm@transitionMatrix
sens_matrix.cmo90_14[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 15 day hic

#14
sens_matrix.cmo14_15<-mo15.msm@transitionMatrix
sens_matrix.cmo14_15[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_15<-mo15.msm@transitionMatrix
sens_matrix.cmo28_15[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_15<-mo15.msm@transitionMatrix
sens_matrix.cmo52_15[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_15<-mo15.msm@transitionMatrix
sens_matrix.cmo76_15[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_15<-mo15.msm@transitionMatrix
sens_matrix.cmo90_15[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 16 day hic

#14
sens_matrix.cmo14_16<-mo16.msm@transitionMatrix
sens_matrix.cmo14_16[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_16<-mo16.msm@transitionMatrix
sens_matrix.cmo28_16[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_16<-mo16.msm@transitionMatrix
sens_matrix.cmo52_16[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_16<-mo16.msm@transitionMatrix
sens_matrix.cmo76_16[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_16<-mo16.msm@transitionMatrix
sens_matrix.cmo90_16[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 17 day hic

#14
sens_matrix.cmo14_17<-mo17.msm@transitionMatrix
sens_matrix.cmo14_17[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_17<-mo17.msm@transitionMatrix
sens_matrix.cmo28_17[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_17<-mo17.msm@transitionMatrix
sens_matrix.cmo52_17[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_17<-mo17.msm@transitionMatrix
sens_matrix.cmo76_17[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_17<-mo17.msm@transitionMatrix
sens_matrix.cmo90_17[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 18 day hic

#14
sens_matrix.cmo14_18<-mo18.msm@transitionMatrix
sens_matrix.cmo14_18[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_18<-mo18.msm@transitionMatrix
sens_matrix.cmo28_18[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_18<-mo18.msm@transitionMatrix
sens_matrix.cmo52_18[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_18<-mo18.msm@transitionMatrix
sens_matrix.cmo76_18[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_18<-mo18.msm@transitionMatrix
sens_matrix.cmo90_18[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 19 day hic

#14
sens_matrix.cmo14_19<-mo19.msm@transitionMatrix
sens_matrix.cmo14_19[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_19<-mo19.msm@transitionMatrix
sens_matrix.cmo28_19[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_19<-mo19.msm@transitionMatrix
sens_matrix.cmo52_19[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_19<-mo19.msm@transitionMatrix
sens_matrix.cmo76_19[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_19<-mo19.msm@transitionMatrix
sens_matrix.cmo90_19[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 20 day hic

#14
sens_matrix.cmo14_20<-mo20.msm@transitionMatrix
sens_matrix.cmo14_20[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_20<-mo20.msm@transitionMatrix
sens_matrix.cmo28_20[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_20<-mo20.msm@transitionMatrix
sens_matrix.cmo52_20[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_20<-mo20.msm@transitionMatrix
sens_matrix.cmo76_20[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_20<-mo20.msm@transitionMatrix
sens_matrix.cmo90_20[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 21 day hic

#14
sens_matrix.cmo14_21<-mo21.msm@transitionMatrix
sens_matrix.cmo14_21[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_21<-mo21.msm@transitionMatrix
sens_matrix.cmo28_21[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_21<-mo21.msm@transitionMatrix
sens_matrix.cmo52_21[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_21<-mo21.msm@transitionMatrix
sens_matrix.cmo76_21[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_21<-mo21.msm@transitionMatrix
sens_matrix.cmo90_21[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 22 day hic

#14
sens_matrix.cmo14_22<-mo22.msm@transitionMatrix
sens_matrix.cmo14_22[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_22<-mo22.msm@transitionMatrix
sens_matrix.cmo28_22[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_22<-mo22.msm@transitionMatrix
sens_matrix.cmo52_22[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_22<-mo22.msm@transitionMatrix
sens_matrix.cmo76_22[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_22<-mo22.msm@transitionMatrix
sens_matrix.cmo90_22[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 23 day hic

#14
sens_matrix.cmo14_23<-mo23.msm@transitionMatrix
sens_matrix.cmo14_23[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_23<-mo23.msm@transitionMatrix
sens_matrix.cmo28_23[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_23<-mo23.msm@transitionMatrix
sens_matrix.cmo52_23[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_23<-mo23.msm@transitionMatrix
sens_matrix.cmo76_23[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_23<-mo23.msm@transitionMatrix
sens_matrix.cmo90_23[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 24 day hic

#14
sens_matrix.cmo14_24<-mo24.msm@transitionMatrix
sens_matrix.cmo14_24[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_24<-mo24.msm@transitionMatrix
sens_matrix.cmo28_24[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_24<-mo24.msm@transitionMatrix
sens_matrix.cmo52_24[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_24<-mo24.msm@transitionMatrix
sens_matrix.cmo76_24[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_24<-mo24.msm@transitionMatrix
sens_matrix.cmo90_24[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 25 day hic

#14
sens_matrix.cmo14_25<-mo25.msm@transitionMatrix
sens_matrix.cmo14_25[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_25<-mo25.msm@transitionMatrix
sens_matrix.cmo28_25[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_25<-mo25.msm@transitionMatrix
sens_matrix.cmo52_25[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_25<-mo25.msm@transitionMatrix
sens_matrix.cmo76_25[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_25<-mo25.msm@transitionMatrix
sens_matrix.cmo90_25[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))


# 26 day hic

#14
sens_matrix.cmo14_26<-mo26.msm@transitionMatrix
sens_matrix.cmo14_26[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_26<-mo26.msm@transitionMatrix
sens_matrix.cmo28_26[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_26<-mo26.msm@transitionMatrix
sens_matrix.cmo52_26[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_26<-mo26.msm@transitionMatrix
sens_matrix.cmo76_26[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_26<-mo26.msm@transitionMatrix
sens_matrix.cmo90_26[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 27 day hic

#14
sens_matrix.cmo14_27<-mo27.msm@transitionMatrix
sens_matrix.cmo14_27[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_27<-mo27.msm@transitionMatrix
sens_matrix.cmo28_27[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_27<-mo27.msm@transitionMatrix
sens_matrix.cmo52_27[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_27<-mo27.msm@transitionMatrix
sens_matrix.cmo76_27[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_27<-mo27.msm@transitionMatrix
sens_matrix.cmo90_27[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 28 day hic

#14
sens_matrix.cmo14_28<-mo28.msm@transitionMatrix
sens_matrix.cmo14_28[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_28<-mo28.msm@transitionMatrix
sens_matrix.cmo28_28[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_28<-mo28.msm@transitionMatrix
sens_matrix.cmo52_28[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_28<-mo28.msm@transitionMatrix
sens_matrix.cmo76_28[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_28<-mo28.msm@transitionMatrix
sens_matrix.cmo90_28[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 29 day hic

#14
sens_matrix.cmo14_29<-mo29.msm@transitionMatrix
sens_matrix.cmo14_29[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_29<-mo29.msm@transitionMatrix
sens_matrix.cmo28_29[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_29<-mo29.msm@transitionMatrix
sens_matrix.cmo52_29[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_29<-mo29.msm@transitionMatrix
sens_matrix.cmo76_29[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_29<-mo29.msm@transitionMatrix
sens_matrix.cmo90_29[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))

# 30 day hic

#14
sens_matrix.cmo14_30<-mo30.msm@transitionMatrix
sens_matrix.cmo14_30[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
#28
sens_matrix.cmo28_30<-mo30.msm@transitionMatrix
sens_matrix.cmo28_30[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
#52
sens_matrix.cmo52_30<-mo30.msm@transitionMatrix
sens_matrix.cmo52_30[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
#76
sens_matrix.cmo76_30<-mo30.msm@transitionMatrix
sens_matrix.cmo76_30[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
#90
sens_matrix.cmo90_30<-mo30.msm@transitionMatrix
sens_matrix.cmo90_30[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))


}

# markov objects  cmo 14
{
mo1.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14), name="MarkovChain Q1")
  

mo2.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_2), name="MarkovChain Q1") 

mo3.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_3), name="MarkovChain Q1") 
mo4.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_4), name="MarkovChain Q1") 
mo5.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_5), name="MarkovChain Q1") 
mo6.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_6), name="MarkovChain Q1") 
mo7.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_7), name="MarkovChain Q1") 
mo8.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_8), name="MarkovChain Q1") 
mo9.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_9), name="MarkovChain Q1") 
mo10.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_10), name="MarkovChain Q1") 
mo11.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_11), name="MarkovChain Q1") 
mo12.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_12), name="MarkovChain Q1") 
mo13.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_13), name="MarkovChain Q1") 
mo14.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_14), name="MarkovChain Q1") 
mo15.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_15), name="MarkovChain Q1") 
mo16.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_16), name="MarkovChain Q1") 
mo17.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_17), name="MarkovChain Q1") 
mo18.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_18), name="MarkovChain Q1") 
mo19.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_19), name="MarkovChain Q1") 
mo20.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_20), name="MarkovChain Q1") 
mo21.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_21), name="MarkovChain Q1") 
mo22.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_22), name="MarkovChain Q1") 
mo23.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_23), name="MarkovChain Q1") 
mo24.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_24), name="MarkovChain Q1") 
mo25.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_25), name="MarkovChain Q1") 
mo26.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_26), name="MarkovChain Q1") 
mo27.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_27), name="MarkovChain Q1") 
mo28.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_28), name="MarkovChain Q1") 
mo29.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_29), name="MarkovChain Q1") 
mo30.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo14_30), name="MarkovChain Q1") 

rm(example.df)
rm(df1.msm)
rm(df1.ptm)
rm(df1.tm)
}

#

# SENSITIVITY ANALYSIS first order monte carlo simulations cmo 14 ---------

# 1 way sensitivity analysis altering hit to cmo probabilities

B <- 100
N <- 30

{
sim1.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo1.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim2.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo2.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim3.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo3.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim4.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo4.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim5.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo5.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim6.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo6.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim7.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo7.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim8.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo8.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim9.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo9.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim10.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo10.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim11.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo11.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim12.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo12.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim13.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo13.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim14.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo14.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim15.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo15.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim16.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo16.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim17.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo17.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim18.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo18.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim19.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo19.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim20.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo20.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim21.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo21.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim22.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo22.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim23.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo23.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim24.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo24.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim25.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo25.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim26.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo26.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim27.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo27.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim28.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo28.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim29.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo29.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim30.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo30.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})


}
# 1 non-agressive
# 2 aggressive
# 3 cmo
# 4 discharged
# 5 death


# Convert simulations into data frames 
{
df1.sim<- as.data.frame(sim1.msm)
df1.sim<-df1.sim %>% gather(key = "id", value = "state")
df1.sim<-df1.sim %>% mutate(col1=streak_run(state, k=1000))
df1.sim<-df1.sim %>% filter(!(state=="4" & col1!=1))
df1.sim<-df1.sim %>% filter(!(state=="5" & col1!=1))

df2.sim<- as.data.frame(sim2.msm)
df2.sim<-df2.sim %>% gather(key = "id", value = "state")
df2.sim<-df2.sim %>% mutate(col1=streak_run(state, k=1000))
df2.sim<-df2.sim %>% filter(!(state=="4" & col1!=1))
df2.sim<-df2.sim %>% filter(!(state=="5" & col1!=1))

df3.sim<- as.data.frame(sim3.msm)
df3.sim<-df3.sim %>% gather(key = "id", value = "state")
df3.sim<-df3.sim %>% mutate(col1=streak_run(state, k=1000))
df3.sim<-df3.sim %>% filter(!(state=="4" & col1!=1))
df3.sim<-df3.sim %>% filter(!(state=="5" & col1!=1))

df4.sim<- as.data.frame(sim4.msm)
df4.sim<-df4.sim %>% gather(key = "id", value = "state")
df4.sim<-df4.sim %>% mutate(col1=streak_run(state, k=1000))
df4.sim<-df4.sim %>% filter(!(state=="4" & col1!=1))
df4.sim<-df4.sim %>% filter(!(state=="5" & col1!=1))

df5.sim<- as.data.frame(sim5.msm)
df5.sim<-df5.sim %>% gather(key = "id", value = "state")
df5.sim<-df5.sim %>% mutate(col1=streak_run(state, k=1000))
df5.sim<-df5.sim %>% filter(!(state=="4" & col1!=1))
df5.sim<-df5.sim %>% filter(!(state=="5" & col1!=1))

df6.sim<- as.data.frame(sim6.msm)
df6.sim<-df6.sim %>% gather(key = "id", value = "state")
df6.sim<-df6.sim %>% mutate(col1=streak_run(state, k=1000))
df6.sim<-df6.sim %>% filter(!(state=="4" & col1!=1))
df6.sim<-df6.sim %>% filter(!(state=="5" & col1!=1))

df7.sim<- as.data.frame(sim7.msm)
df7.sim<-df7.sim %>% gather(key = "id", value = "state")
df7.sim<-df7.sim %>% mutate(col1=streak_run(state, k=1000))
df7.sim<-df7.sim %>% filter(!(state=="4" & col1!=1))
df7.sim<-df7.sim %>% filter(!(state=="5" & col1!=1))

df8.sim<- as.data.frame(sim8.msm)
df8.sim<-df8.sim %>% gather(key = "id", value = "state")
df8.sim<-df8.sim %>% mutate(col1=streak_run(state, k=1000))
df8.sim<-df8.sim %>% filter(!(state=="4" & col1!=1))
df8.sim<-df8.sim %>% filter(!(state=="5" & col1!=1))

df9.sim<- as.data.frame(sim9.msm)
df9.sim<-df9.sim %>% gather(key = "id", value = "state")
df9.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df9.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df9.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df10.sim<- as.data.frame(sim10.msm)
df10.sim<-df9.sim %>% gather(key = "id", value = "state")
df10.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df10.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df10.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df11.sim<- as.data.frame(sim11.msm)
df11.sim<-df11.sim %>% gather(key = "id", value = "state")
df11.sim<-df11.sim %>% mutate(col1=streak_run(state, k=1000))
df11.sim<-df11.sim %>% filter(!(state=="4" & col1!=1))
df11.sim<-df11.sim %>% filter(!(state=="5" & col1!=1))

df12.sim<- as.data.frame(sim12.msm)
df12.sim<-df12.sim %>% gather(key = "id", value = "state")
df12.sim<-df12.sim %>% mutate(col1=streak_run(state, k=1000))
df12.sim<-df12.sim %>% filter(!(state=="4" & col1!=1))
df12.sim<-df12.sim %>% filter(!(state=="5" & col1!=1))

df13.sim<- as.data.frame(sim13.msm)
df13.sim<-df13.sim %>% gather(key = "id", value = "state")
df13.sim<-df13.sim %>% mutate(col1=streak_run(state, k=1000))
df13.sim<-df13.sim %>% filter(!(state=="4" & col1!=1))
df13.sim<-df13.sim %>% filter(!(state=="5" & col1!=1))

df14.sim<- as.data.frame(sim14.msm)
df14.sim<-df14.sim %>% gather(key = "id", value = "state")
df14.sim<-df14.sim %>% mutate(col1=streak_run(state, k=1000))
df14.sim<-df14.sim %>% filter(!(state=="4" & col1!=1))
df14.sim<-df14.sim %>% filter(!(state=="5" & col1!=1))

df15.sim<- as.data.frame(sim15.msm)
df15.sim<-df15.sim %>% gather(key = "id", value = "state")
df15.sim<-df15.sim %>% mutate(col1=streak_run(state, k=1000))
df15.sim<-df15.sim %>% filter(!(state=="4" & col1!=1))
df15.sim<-df15.sim %>% filter(!(state=="5" & col1!=1))

df16.sim<- as.data.frame(sim16.msm)
df16.sim<-df16.sim %>% gather(key = "id", value = "state")
df16.sim<-df16.sim %>% mutate(col1=streak_run(state, k=1000))
df16.sim<-df16.sim %>% filter(!(state=="4" & col1!=1))
df16.sim<-df16.sim %>% filter(!(state=="5" & col1!=1))

df17.sim<- as.data.frame(sim17.msm)
df17.sim<-df17.sim %>% gather(key = "id", value = "state")
df17.sim<-df17.sim %>% mutate(col1=streak_run(state, k=1000))
df17.sim<-df17.sim %>% filter(!(state=="4" & col1!=1))
df17.sim<-df17.sim %>% filter(!(state=="5" & col1!=1))

df18.sim<- as.data.frame(sim18.msm)
df18.sim<-df18.sim %>% gather(key = "id", value = "state")
df18.sim<-df18.sim %>% mutate(col1=streak_run(state, k=1000))
df18.sim<-df18.sim %>% filter(!(state=="4" & col1!=1))
df18.sim<-df18.sim %>% filter(!(state=="5" & col1!=1))

df19.sim<- as.data.frame(sim19.msm)
df19.sim<-df19.sim %>% gather(key = "id", value = "state")
df19.sim<-df19.sim %>% mutate(col1=streak_run(state, k=1000))
df19.sim<-df19.sim %>% filter(!(state=="4" & col1!=1))
df19.sim<-df19.sim %>% filter(!(state=="5" & col1!=1))

df20.sim<- as.data.frame(sim20.msm)
df20.sim<-df9.sim %>% gather(key = "id", value = "state")
df20.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df20.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df20.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df21.sim<- as.data.frame(sim21.msm)
df21.sim<-df21.sim %>% gather(key = "id", value = "state")
df21.sim<-df21.sim %>% mutate(col1=streak_run(state, k=1000))
df21.sim<-df21.sim %>% filter(!(state=="4" & col1!=1))
df21.sim<-df21.sim %>% filter(!(state=="5" & col1!=1))

df22.sim<- as.data.frame(sim22.msm)
df22.sim<-df22.sim %>% gather(key = "id", value = "state")
df22.sim<-df22.sim %>% mutate(col1=streak_run(state, k=1000))
df22.sim<-df22.sim %>% filter(!(state=="4" & col1!=1))
df22.sim<-df22.sim %>% filter(!(state=="5" & col1!=1))

df23.sim<- as.data.frame(sim23.msm)
df23.sim<-df23.sim %>% gather(key = "id", value = "state")
df23.sim<-df23.sim %>% mutate(col1=streak_run(state, k=1000))
df23.sim<-df23.sim %>% filter(!(state=="4" & col1!=1))
df23.sim<-df23.sim %>% filter(!(state=="5" & col1!=1))

df24.sim<- as.data.frame(sim24.msm)
df24.sim<-df24.sim %>% gather(key = "id", value = "state")
df24.sim<-df24.sim %>% mutate(col1=streak_run(state, k=1000))
df24.sim<-df24.sim %>% filter(!(state=="4" & col1!=1))
df24.sim<-df24.sim %>% filter(!(state=="5" & col1!=1))

df25.sim<- as.data.frame(sim25.msm)
df25.sim<-df25.sim %>% gather(key = "id", value = "state")
df25.sim<-df25.sim %>% mutate(col1=streak_run(state, k=1000))
df25.sim<-df25.sim %>% filter(!(state=="4" & col1!=1))
df25.sim<-df25.sim %>% filter(!(state=="5" & col1!=1))

df26.sim<- as.data.frame(sim26.msm)
df26.sim<-df26.sim %>% gather(key = "id", value = "state")
df26.sim<-df26.sim %>% mutate(col1=streak_run(state, k=1000))
df26.sim<-df26.sim %>% filter(!(state=="4" & col1!=1))
df26.sim<-df26.sim %>% filter(!(state=="5" & col1!=1))

df27.sim<- as.data.frame(sim27.msm)
df27.sim<-df27.sim %>% gather(key = "id", value = "state")
df27.sim<-df27.sim %>% mutate(col1=streak_run(state, k=1000))
df27.sim<-df27.sim %>% filter(!(state=="4" & col1!=1))
df27.sim<-df27.sim %>% filter(!(state=="5" & col1!=1))

df28.sim<- as.data.frame(sim28.msm)
df28.sim<-df28.sim %>% gather(key = "id", value = "state")
df28.sim<-df28.sim %>% mutate(col1=streak_run(state, k=1000))
df28.sim<-df28.sim %>% filter(!(state=="4" & col1!=1))
df28.sim<-df28.sim %>% filter(!(state=="5" & col1!=1))

df29.sim<- as.data.frame(sim29.msm)
df29.sim<-df29.sim %>% gather(key = "id", value = "state")
df29.sim<-df29.sim %>% mutate(col1=streak_run(state, k=1000))
df29.sim<-df29.sim %>% filter(!(state=="4" & col1!=1))
df29.sim<-df29.sim %>% filter(!(state=="5" & col1!=1))

df30.sim<- as.data.frame(sim30.msm)
df30.sim<-df30.sim %>% gather(key = "id", value = "state")
df30.sim<-df30.sim %>% mutate(col1=streak_run(state, k=1000))
df30.sim<-df30.sim %>% filter(!(state=="4" & col1!=1))
df30.sim<-df30.sim %>% filter(!(state=="5" & col1!=1))

rm(sim1.msm) 
rm(sim2.msm)
rm(sim3.msm)
rm(sim4.msm)
rm(sim5.msm)
rm(sim6.msm)
rm(sim7.msm)
rm(sim8.msm)
rm(sim9.msm)
rm(sim10.msm)
rm(sim11.msm)
rm(sim12.msm)
rm(sim13.msm)
rm(sim14.msm)
rm(sim15.msm)
rm(sim16.msm)
rm(sim17.msm)
rm(sim18.msm)
rm(sim19.msm)
rm(sim20.msm)
rm(sim21.msm)
rm(sim22.msm)
rm(sim23.msm)
rm(sim24.msm)
rm(sim25.msm)
rm(sim26.msm)
rm(sim27.msm)
rm(sim28.msm)
rm(sim29.msm)
rm(sim30.msm)
}



# SENSITIVITY ANALYSIS Utilities and costs cmo 14- ------------------------
{
# Utility value for being in ICU:	0.66, 0.39-0.93,	Beta,	(Cost effectiveness of antimicrobial catheters in the intensive care unit: addressing uncertainty in the decision)
# Utility value for highly invasive care:	0.55,	0.39-0.71,	(Beta,	Comparison of Health-Related Quality of Life Preferences Between Physicians and Cirrhotic Patients: Implications for Cost–Utility Analysesin Chronic Liver Disease)
# Utility value for paliative care:	0.28,	0.23-0.35,	Beta,	(Ultrasound Elastography for Fibrosis Surveillance Is Cos tEffective in Patients with Chronic Hepatitis C Virus in the UK)

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-

# sources: BIDMC - Patient Financial Services & HMFP - Finance

# utilities
u_nhic<-0.66
u_hic<-0.55
u_cmo<-0.28
u_discharge<-1
u_died<-1

# 1 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df1.sim<-df1.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df1.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df1.sim$day>0, 340,0))+4650+(ifelse(df1.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00 # assumping death at beggining of day and no extra costs 

df1.sim<-df1.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df1.summary<- df1.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= mean(utility),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df1.overall<- df1.summary[!duplicated(df1.summary$id), ]
#
df1.overallcmo14_u_mean<-mean(df1.summary$utility_mean)
df1.overallcmo14_c_mean<-mean(df1.summary$costs_sum)

# Mean survival utility and costs at N dayss
df1.survival<-df1.summary %>% filter(state%in%4)
df1.senscmo14_u_mean<-mean(df1.survival$utility_mean)
df1.senscmo14_c_mean<-mean(df1.survival$costs_sum)

#-------------------------------------------------------------------------------

# 2 day hic ////////////////////////////////////////////////////////////////////

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-

# Create flags for sequential days  
df2.sim<-df2.sim %>% mutate(day=(streak_run(id, k=1000)-1))

# Create costs
c_nhic<-3805+662+(ifelse(df2.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df2.sim$day>0, 340,0))+4650+(ifelse(df2.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*1)+(340*1)+(724*1)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC 

df2.sim<-df2.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df2.summary<- df2.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))), # adding extra days of utility given HIC
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df2.overall<- df2.summary[!duplicated(df2.summary$id), ]
#
df2.overallcmo14_u_mean<-mean(df2.summary$utility_mean)
df2.overallcmo14_c_mean<-mean(df2.summary$costs_sum)

# Mean survival utility and costs at N dayss
df2.survival<-df2.summary %>% filter(state%in%4)
df2.senscmo14_u_mean<-mean(df2.survival$utility_mean)
df2.senscmo14_c_mean<-mean(df2.survival$costs_sum)

#-------------------------------------------------------------------------------

# 3 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df3.sim<-df3.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df3.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df3.sim$day>0, 340,0))+4650+(ifelse(df3.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*2)+(340*2)+(724*2))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC

df3.sim<-df3.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df3.summary<- df3.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df3.overall<- df3.summary[!duplicated(df3.summary$id), ]
#
df3.overallcmo14_u_mean<-mean(df3.summary$utility_mean)
df3.overallcmo14_c_mean<-mean(df3.summary$costs_sum)

# Mean survival utility and costs at N dayss
df3.survival<-df3.summary %>% filter(state%in%4)
df3.senscmo14_u_mean<-mean(df3.survival$utility_mean)
df3.senscmo14_c_mean<-mean(df3.survival$costs_sum)

#-------------------------------------------------------------------------------

# 4 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df4.sim<-df4.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df4.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df4.sim$day>0, 340,0))+4650+(ifelse(df4.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*3)+(340*3)+(724*3))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df4.sim<-df4.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df4.summary<- df4.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df4.overall<- df4.summary[!duplicated(df4.summary$id), ]
#
df4.overallcmo14_u_mean<-mean(df4.summary$utility_mean)
df4.overallcmo14_c_mean<-mean(df4.summary$costs_sum)

# Mean survival utility and costs at N dayss
df4.survival<-df4.summary %>% filter(state%in%4)
df4.senscmo14_u_mean<-mean(df4.survival$utility_mean)
df4.senscmo14_c_mean<-mean(df4.survival$costs_sum)

#-------------------------------------------------------------------------------

# 5 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df5.sim<-df5.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df5.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df5.sim$day>0, 340,0))+4650+(ifelse(df5.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*4)+(340*4)+(724*4))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df5.sim<-df5.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df5.summary<- df5.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df5.overall<- df5.summary[!duplicated(df5.summary$id), ]
#
df5.overallcmo14_u_mean<-mean(df5.summary$utility_mean)
df5.overallcmo14_c_mean<-mean(df5.summary$costs_sum)

# Mean survival utility and costs at N dayss
df5.survival<-df5.summary %>% filter(state%in%4)
df5.senscmo14_u_mean<-mean(df5.survival$utility_mean)
df5.senscmo14_c_mean<-mean(df5.survival$costs_sum)

#-------------------------------------------------------------------------------

# 6 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df6.sim<-df6.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df6.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df6.sim$day>0, 340,0))+4650+(ifelse(df6.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*5)+(340*5)+(724*5))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df6.sim<-df6.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df6.summary<- df6.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df6.overall<- df6.summary[!duplicated(df6.summary$id), ]
#
df6.overallcmo14_u_mean<-mean(df6.summary$utility_mean)
df6.overallcmo14_c_mean<-mean(df6.summary$costs_sum)

# Mean survival utility and costs at N dayss
df6.survival<-df6.summary %>% filter(state%in%4)
df6.senscmo14_u_mean<-mean(df6.survival$utility_mean)
df6.senscmo14_c_mean<-mean(df6.survival$costs_sum)

#-------------------------------------------------------------------------------

# 7 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df7.sim<-df7.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df7.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df7.sim$day>0, 340,0))+4650+(ifelse(df7.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*6)+(340*6)+(724*6))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df7.sim<-df7.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df7.summary<- df7.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df7.overall<- df7.summary[!duplicated(df7.summary$id), ]
#
df7.overallcmo14_u_mean<-mean(df7.summary$utility_mean)
df7.overallcmo14_c_mean<-mean(df7.summary$costs_sum)

# Mean survival utility and costs at N dayss
df7.survival<-df7.summary %>% filter(state%in%4)
df7.senscmo14_u_mean<-mean(df7.survival$utility_mean)
df7.senscmo14_c_mean<-mean(df7.survival$costs_sum)

#-------------------------------------------------------------------------------

# 8 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df8.sim<-df8.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df8.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df8.sim$day>0, 340,0))+4650+(ifelse(df8.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*7)+(340*7)+(724*7)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df8.sim<-df8.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df8.summary<- df8.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df8.overall<- df8.summary[!duplicated(df8.summary$id), ]
#
df8.overallcmo14_u_mean<-mean(df8.summary$utility_mean)
df8.overallcmo14_c_mean<-mean(df8.summary$costs_sum)

# Mean survival utility and costs at N dayss
df8.survival<-df8.summary %>% filter(state%in%4)
df8.senscmo14_u_mean<-mean(df8.survival$utility_mean)
df8.senscmo14_c_mean<-mean(df8.survival$costs_sum)

#-------------------------------------------------------------------------------

# 9 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df9.sim<-df9.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df9.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df9.sim$day>0, 340,0))+4650+(ifelse(df9.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*8)+(340*8)+(724*8))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df9.sim<-df9.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df9.summary<- df9.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df9.overall<- df9.summary[!duplicated(df9.summary$id), ]
#
df9.overallcmo14_u_mean<-mean(df9.summary$utility_mean)
df9.overallcmo14_c_mean<-mean(df9.summary$costs_sum)

# Mean survival utility and costs at N dayss
df9.survival<-df9.summary %>% filter(state%in%4)
df9.senscmo14_u_mean<-mean(df9.survival$utility_mean)
df9.senscmo14_c_mean<-mean(df9.survival$costs_sum)

#-------------------------------------------------------------------------------

# 10 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df10.sim<-df10.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df10.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df10.sim$day>0, 340,0))+4650+(ifelse(df10.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*9)+(340*9)+(724*9))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df10.sim<-df10.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df10.summary<- df10.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df10.overall<- df10.summary[!duplicated(df10.summary$id), ]
#
df10.overallcmo14_u_mean<-mean(df10.summary$utility_mean)
df10.overallcmo14_c_mean<-mean(df10.summary$costs_sum)

# Mean survival utility and costs at N dayss
df10.survival<-df10.summary %>% filter(state%in%4)
df10.senscmo14_u_mean<-mean(df10.survival$utility_mean)
df10.senscmo14_c_mean<-mean(df10.survival$costs_sum)

#-------------------------------------------------------------------------------

# 11 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df11.sim<-df11.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df11.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df11.sim$day>0, 340,0))+4650+(ifelse(df11.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*10)+(340*10)+(724*10))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df11.sim<-df11.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df11.summary<- df11.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df11.overall<- df11.summary[!duplicated(df11.summary$id), ]
#
df11.overallcmo14_u_mean<-mean(df11.summary$utility_mean)
df11.overallcmo14_c_mean<-mean(df11.summary$costs_sum)

# Mean survival utility and costs at N dayss
df11.survival<-df11.summary %>% filter(state%in%4)
df11.senscmo14_u_mean<-mean(df11.survival$utility_mean)
df11.senscmo14_c_mean<-mean(df11.survival$costs_sum)

#-------------------------------------------------------------------------------

# 12 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df12.sim<-df12.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df12.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df12.sim$day>0, 340,0))+4650+(ifelse(df12.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*11)+(340*11)+(724*11))   # assumping death at beggining of day and no extra costs 

df12.sim<-df12.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df12.summary<- df12.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df12.overall<- df12.summary[!duplicated(df12.summary$id), ]
#
df12.overallcmo14_u_mean<-mean(df12.summary$utility_mean)
df12.overallcmo14_c_mean<-mean(df12.summary$costs_sum)

# Mean survival utility and costs at N dayss
df12.survival<-df12.summary %>% filter(state%in%4)
df12.senscmo14_u_mean<-mean(df12.survival$utility_mean)
df12.senscmo14_c_mean<-mean(df12.survival$costs_sum)

#-------------------------------------------------------------------------------

# 13 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df13.sim<-df13.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df13.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df13.sim$day>0, 340,0))+4650+(ifelse(df13.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*12)+(340*12)+(724*12)) # assumping death at beggining of day and no extra costs 

df13.sim<-df13.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df13.summary<- df13.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df13.overall<- df13.summary[!duplicated(df13.summary$id), ]
#
df13.overallcmo14_u_mean<-mean(df13.summary$utility_mean)
df13.overallcmo14_c_mean<-mean(df13.summary$costs_sum)

# Mean survival utility and costs at N dayss
df13.survival<-df13.summary %>% filter(state%in%4)
df13.senscmo14_u_mean<-mean(df13.survival$utility_mean)
df13.senscmo14_c_mean<-mean(df13.survival$costs_sum)

#-------------------------------------------------------------------------------

# 14 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df14.sim<-df14.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df14.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df14.sim$day>0, 340,0))+4650+(ifelse(df14.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*13)+(340*13)+(724*13))  # assumping death at beggining of day and no extra costs 

df14.sim<-df14.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df14.summary<- df14.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df14.overall<- df14.summary[!duplicated(df14.summary$id), ]
#
df14.overallcmo14_u_mean<-mean(df14.summary$utility_mean)
df14.overallcmo14_c_mean<-mean(df14.summary$costs_sum)

# Mean survival utility and costs at N dayss
df14.survival<-df14.summary %>% filter(state%in%4)
df14.senscmo14_u_mean<-mean(df14.survival$utility_mean)
df14.senscmo14_c_mean<-mean(df14.survival$costs_sum)

#-------------------------------------------------------------------------------

# 15 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df15.sim<-df15.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df15.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df15.sim$day>0, 340,0))+4650+(ifelse(df15.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*14)+(340*14)+(724*14))  # assumping death at beggining of day and no extra costs 

df15.sim<-df15.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df15.summary<- df15.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df15.overall<- df15.summary[!duplicated(df15.summary$id), ]
#
df15.overallcmo14_u_mean<-mean(df15.summary$utility_mean)
df15.overallcmo14_c_mean<-mean(df15.summary$costs_sum)

# Mean survival utility and costs at N dayss
df15.survival<-df15.summary %>% filter(state%in%4)
df15.senscmo14_u_mean<-mean(df15.survival$utility_mean)
df15.senscmo14_c_mean<-mean(df15.survival$costs_sum)

#-------------------------------------------------------------------------------

# 16 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df16.sim<-df16.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df16.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df16.sim$day>0, 340,0))+4650+(ifelse(df16.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*15)+(340*15)+(724*15))  # assumping death at beggining of day and no extra costs 

df16.sim<-df16.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df16.summary<- df16.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df16.overall<- df16.summary[!duplicated(df16.summary$id), ]
#
df16.overallcmo14_u_mean<-mean(df16.summary$utility_mean)
df16.overallcmo14_c_mean<-mean(df16.summary$costs_sum)

# Mean survival utility and costs at N dayss
df16.survival<-df16.summary %>% filter(state%in%4)
df16.senscmo14_u_mean<-mean(df16.survival$utility_mean)
df16.senscmo14_c_mean<-mean(df16.survival$costs_sum)

#-------------------------------------------------------------------------------

# 17 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df17.sim<-df17.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df17.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df17.sim$day>0, 340,0))+4650+(ifelse(df17.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*16)+(340*16)+(724*16))  # assumping death at beggining of day and no extra costs 

df17.sim<-df17.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df17.summary<- df17.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df17.overall<- df17.summary[!duplicated(df17.summary$id), ]
#
df17.overallcmo14_u_mean<-mean(df17.summary$utility_mean)
df17.overallcmo14_c_mean<-mean(df17.summary$costs_sum)

# Mean survival utility and costs at N dayss
df17.survival<-df17.summary %>% filter(state%in%4)
df17.senscmo14_u_mean<-mean(df17.survival$utility_mean)
df17.senscmo14_c_mean<-mean(df17.survival$costs_sum)

#-------------------------------------------------------------------------------

# 18 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df18.sim<-df18.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df18.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df18.sim$day>0, 340,0))+4650+(ifelse(df18.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*17)+(340*17)+(724*17))  # assumping death at beggining of day and no extra costs 

df18.sim<-df18.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df18.summary<- df18.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df18.overall<- df18.summary[!duplicated(df18.summary$id), ]
#
df18.overallcmo14_u_mean<-mean(df18.summary$utility_mean)
df18.overallcmo14_c_mean<-mean(df18.summary$costs_sum)

# Mean survival utility and costs at N dayss
df18.survival<-df18.summary %>% filter(state%in%4)
df18.senscmo14_u_mean<-mean(df18.survival$utility_mean)
df18.senscmo14_c_mean<-mean(df18.survival$costs_sum)

#-------------------------------------------------------------------------------

# 19 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df19.sim<-df19.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df19.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df19.sim$day>0, 340,0))+4650+(ifelse(df19.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*18)+(340*18)+(724*18))  # assumping death at beggining of day and no extra costs 

df19.sim<-df19.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df19.summary<- df19.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df19.overall<- df19.summary[!duplicated(df19.summary$id), ]
#
df19.overallcmo14_u_mean<-mean(df19.summary$utility_mean)
df19.overallcmo14_c_mean<-mean(df19.summary$costs_sum)

# Mean survival utility and costs at N dayss
df19.survival<-df19.summary %>% filter(state%in%4)
df19.senscmo14_u_mean<-mean(df19.survival$utility_mean)
df19.senscmo14_c_mean<-mean(df19.survival$costs_sum)

#-------------------------------------------------------------------------------

# 20 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df20.sim<-df20.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df20.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df20.sim$day>0, 340,0))+4650+(ifelse(df20.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*19)+(340*19)+(724*19))  # assumping death at beggining of day and no extra costs 

df20.sim<-df20.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df20.summary<- df20.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df20.overall<- df20.summary[!duplicated(df20.summary$id), ]
#
df20.overallcmo14_u_mean<-mean(df20.summary$utility_mean)
df20.overallcmo14_c_mean<-mean(df20.summary$costs_sum)

# Mean survival utility and costs at N dayss
df20.survival<-df20.summary %>% filter(state%in%4)
df20.senscmo14_u_mean<-mean(df20.survival$utility_mean)
df20.senscmo14_c_mean<-mean(df20.survival$costs_sum)

#-------------------------------------------------------------------------------

# 21 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df21.sim<-df21.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df21.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df21.sim$day>0, 340,0))+4650+(ifelse(df21.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*20)+(340*20)+(724*20))  # assumping death at beggining of day and no extra costs 

df21.sim<-df21.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df21.summary<- df21.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df21.overall<- df21.summary[!duplicated(df21.summary$id), ]
#
df21.overallcmo14_u_mean<-mean(df21.summary$utility_mean)
df21.overallcmo14_c_mean<-mean(df21.summary$costs_sum)

# Mean survival utility and costs at N dayss
df21.survival<-df21.summary %>% filter(state%in%4)
df21.senscmo14_u_mean<-mean(df21.survival$utility_mean)
df21.senscmo14_c_mean<-mean(df21.survival$costs_sum)

#-------------------------------------------------------------------------------

# 22 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df22.sim<-df22.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df22.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df22.sim$day>0, 340,0))+4650+(ifelse(df22.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*21)+(340*21)+(724*21)) # assumping death at beggining of day and no extra costs 

df22.sim<-df22.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df22.summary<- df22.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df22.overall<- df22.summary[!duplicated(df22.summary$id), ]
#
df22.overallcmo14_u_mean<-mean(df22.summary$utility_mean)
df22.overallcmo14_c_mean<-mean(df22.summary$costs_sum)

# Mean survival utility and costs at N dayss
df22.survival<-df22.summary %>% filter(state%in%4)
df22.senscmo14_u_mean<-mean(df22.survival$utility_mean)
df22.senscmo14_c_mean<-mean(df22.survival$costs_sum)

#-------------------------------------------------------------------------------

# 23 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df23.sim<-df23.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df23.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df23.sim$day>0, 340,0))+4650+(ifelse(df23.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*22)+(340*22)+(724*22)) # assumping death at beggining of day and no extra costs 

df23.sim<-df23.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df23.summary<- df23.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df23.overall<- df23.summary[!duplicated(df23.summary$id), ]
#
df23.overallcmo14_u_mean<-mean(df23.summary$utility_mean)
df23.overallcmo14_c_mean<-mean(df23.summary$costs_sum)

# Mean survival utility and costs at N dayss
df23.survival<-df23.summary %>% filter(state%in%4)
df23.senscmo14_u_mean<-mean(df23.survival$utility_mean)
df23.senscmo14_c_mean<-mean(df23.survival$costs_sum)

#-------------------------------------------------------------------------------

# 24 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df24.sim<-df24.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df24.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df24.sim$day>0, 340,0))+4650+(ifelse(df24.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*23)+(340*23)+(724*23))  # assumping death at beggining of day and no extra costs 

df24.sim<-df24.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df24.summary<- df24.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df24.overall<- df24.summary[!duplicated(df24.summary$id), ]
#
df24.overallcmo14_u_mean<-mean(df24.summary$utility_mean)
df24.overallcmo14_c_mean<-mean(df24.summary$costs_sum)

# Mean survival utility and costs at N dayss
df24.survival<-df24.summary %>% filter(state%in%4)
df24.senscmo14_u_mean<-mean(df24.survival$utility_mean)
df24.senscmo14_c_mean<-mean(df24.survival$costs_sum)

#-------------------------------------------------------------------------------

# 25 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df25.sim<-df25.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df25.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df25.sim$day>0, 340,0))+4650+(ifelse(df25.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*24)+(340*24)+(724*24)) # assumping death at beggining of day and no extra costs 

df25.sim<-df25.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df25.summary<- df25.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df25.overall<- df25.summary[!duplicated(df25.summary$id), ]
#
df25.overallcmo14_u_mean<-mean(df25.summary$utility_mean)
df25.overallcmo14_c_mean<-mean(df25.summary$costs_sum)

# Mean survival utility and costs at N dayss
df25.survival<-df25.summary %>% filter(state%in%4)
df25.senscmo14_u_mean<-mean(df25.survival$utility_mean)
df25.senscmo14_c_mean<-mean(df25.survival$costs_sum)

#-------------------------------------------------------------------------------

# 26 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df26.sim<-df26.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df26.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df26.sim$day>0, 340,0))+4650+(ifelse(df26.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*25)+(340*25)+(724*25))  # assumping death at beggining of day and no extra costs 

df26.sim<-df26.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df26.summary<- df26.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df26.overall<- df26.summary[!duplicated(df26.summary$id), ]
#
df26.overallcmo14_u_mean<-mean(df26.summary$utility_mean)
df26.overallcmo14_c_mean<-mean(df26.summary$costs_sum)

# Mean survival utility and costs at N dayss
df26.survival<-df26.summary %>% filter(state%in%4)
df26.senscmo14_u_mean<-mean(df26.survival$utility_mean)
df26.senscmo14_c_mean<-mean(df26.survival$costs_sum)

#-------------------------------------------------------------------------------

# 27 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df27.sim<-df27.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df27.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df27.sim$day>0, 340,0))+4650+(ifelse(df27.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*26)+(340*26)+(724*26))  # assumping death at beggining of day and no extra costs 

df27.sim<-df27.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df27.summary<- df27.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df27.overall<- df27.summary[!duplicated(df27.summary$id), ]
#
df27.overallcmo14_u_mean<-mean(df27.summary$utility_mean)
df27.overallcmo14_c_mean<-mean(df27.summary$costs_sum)

# Mean survival utility and costs at N dayss
df27.survival<-df27.summary %>% filter(state%in%4)
df27.senscmo14_u_mean<-mean(df27.survival$utility_mean)
df27.senscmo14_c_mean<-mean(df27.survival$costs_sum)

#-------------------------------------------------------------------------------

# 28 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df28.sim<-df28.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df28.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df28.sim$day>0, 340,0))+4650+(ifelse(df28.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*27)+(340*27)+(724*27))  # assumping death at beggining of day and no extra costs 

df28.sim<-df28.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df28.summary<- df28.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df28.overall<- df28.summary[!duplicated(df28.summary$id), ]
#
df28.overallcmo14_u_mean<-mean(df28.summary$utility_mean)
df28.overallcmo14_c_mean<-mean(df28.summary$costs_sum)

# Mean survival utility and costs at N dayss
df28.survival<-df28.summary %>% filter(state%in%4)
df28.senscmo14_u_mean<-mean(df28.survival$utility_mean)
df28.senscmo14_c_mean<-mean(df28.survival$costs_sum)

#-------------------------------------------------------------------------------

# 29 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df29.sim<-df29.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df29.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df29.sim$day>0, 340,0))+4650+(ifelse(df29.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*28)+(340*28)+(724*28))  # assumping death at beggining of day and no extra costs 

df29.sim<-df29.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df29.summary<- df29.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean=(sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df29.overall<- df29.summary[!duplicated(df29.summary$id), ]
#
df29.overallcmo14_u_mean<-mean(df29.summary$utility_mean)
df29.overallcmo14_c_mean<-mean(df29.summary$costs_sum)

# Mean survival utility and costs at N dayss
df29.survival<-df29.summary %>% filter(state%in%4)
df29.senscmo14_u_mean<-mean(df29.survival$utility_mean)
df29.senscmo14_c_mean<-mean(df29.survival$costs_sum)

#-------------------------------------------------------------------------------

# 30 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df30.sim<-df30.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df30.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df30.sim$day>0, 340,0))+4650+(ifelse(df30.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*29)+(340*29)+(724*29))  # assumping death at beggining of day and no extra costs 

df30.sim<-df30.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df30.summary<- df30.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df30.overall<- df30.summary[!duplicated(df30.summary$id), ]
#
df30.overallcmo14_u_mean<-mean(df30.summary$utility_mean)
df30.overallcmo14_c_mean<-mean(df30.summary$costs_sum)

# Mean survival utility and costs at N dayss
df30.survival<-df30.summary %>% filter(state%in%4)
df30.senscmo14_u_mean<-mean(df30.survival$utility_mean)
df30.senscmo14_c_mean<-mean(df30.survival$costs_sum)

df1.senscmo14<-df1.summary
df2.senscmo14<-df2.summary
df3.senscmo14<-df3.summary
df4.senscmo14<-df4.summary
df5.senscmo14<-df5.summary
df6.senscmo14<-df6.summary
df7.senscmo14<-df7.summary
df8.senscmo14<-df8.summary
df9.senscmo14<-df9.summary
df10.senscmo14<-df10.summary
df11.senscmo14<-df11.summary
df12.senscmo14<-df12.summary
df13.senscmo14<-df13.summary
df14.senscmo14<-df14.summary
df15.senscmo14<-df15.summary
df16.senscmo14<-df16.summary
df17.senscmo14<-df17.summary
df18.senscmo14<-df18.summary
df19.senscmo14<-df19.summary
df20.senscmo14<-df20.summary
df21.senscmo14<-df21.summary
df22.senscmo14<-df22.summary
df23.senscmo14<-df23.summary
df24.senscmo14<-df24.summary
df25.senscmo14<-df25.summary
df26.senscmo14<-df26.summary
df27.senscmo14<-df27.summary
df28.senscmo14<-df28.summary
df29.senscmo14<-df29.summary
df30.senscmo14<-df30.summary




rm(df1.sim)
rm(df2.sim)
rm(df3.sim)
rm(df4.sim)
rm(df5.sim)
rm(df6.sim)
rm(df7.sim)
rm(df8.sim)
rm(df9.sim)
rm(df10.sim)
rm(df11.sim)
rm(df12.sim)
rm(df13.sim)
rm(df14.sim)
rm(df15.sim)
rm(df16.sim)
rm(df17.sim)
rm(df18.sim)
rm(df19.sim)
rm(df20.sim)
rm(df21.sim)
rm(df22.sim)
rm(df23.sim)
rm(df24.sim)
rm(df25.sim)
rm(df26.sim)
rm(df27.sim)
rm(df28.sim)
rm(df29.sim)
rm(df30.sim)
}

# 1 way sensitivity cmo 14 case results ------------------------------------------------------------
senscmo14.overall_c_vect<-c()
for (i in 1:30){
  senscmo14.overall_c_vect[i]<-get(paste("df", i, ".overallcmo14_c_mean",sep = ""))
}

senscmo14.overall_u_vect<-c()
for (i in 1:30){
  senscmo14.overall_u_vect[i]<-get(paste("df", i, ".overallcmo14_u_mean",sep = ""))
}

senscmo14.survival_c_vect<-c()
for (i in 1:30){
  senscmo14.survival_c_vect[i]<-get(paste("df", i, ".senscmo14_c_mean",sep = ""))
}

senscmo14.survival_u_vect<-c()
for (i in 1:30){
  senscmo14.survival_u_vect[i]<-get(paste("df", i, ".senscmo14_u_mean",sep = ""))
}

senscmo14.ce_results<- matrix(c(senscmo14.overall_c_vect,senscmo14.overall_u_vect,senscmo14.survival_c_vect,senscmo14.survival_u_vect), nrow=30, byrow=FALSE)
colnames(senscmo14.ce_results) <- c("overall_c","overall_u","survival_c","survival_u")
#----

# SENSITIVITY ANALYSIS markov objects cmo 28 -------------------------

 
{


# markov objects
mo1.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28), name="MarkovChain Q1")
mo2.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_2), name="MarkovChain Q1")
mo3.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_3), name="MarkovChain Q1")
mo4.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_4), name="MarkovChain Q1")
mo5.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_5), name="MarkovChain Q1")
mo6.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_6), name="MarkovChain Q1")
mo7.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_7), name="MarkovChain Q1")
mo8.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_8), name="MarkovChain Q1")
mo9.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_9), name="MarkovChain Q1")
mo10.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_10), name="MarkovChain Q1")
mo11.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_11), name="MarkovChain Q1")
mo12.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_12), name="MarkovChain Q1")
mo13.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_13), name="MarkovChain Q1")
mo14.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_14), name="MarkovChain Q1")
mo15.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_15), name="MarkovChain Q1")
mo16.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_16), name="MarkovChain Q1")
mo17.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_17), name="MarkovChain Q1")
mo18.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_18), name="MarkovChain Q1")
mo19.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_19), name="MarkovChain Q1")
mo20.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_20), name="MarkovChain Q1")
mo21.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_21), name="MarkovChain Q1")
mo22.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_22), name="MarkovChain Q1")
mo23.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_23), name="MarkovChain Q1")
mo24.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_24), name="MarkovChain Q1")
mo25.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_25), name="MarkovChain Q1")
mo26.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_26), name="MarkovChain Q1")
mo27.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_27), name="MarkovChain Q1")
mo28.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_28), name="MarkovChain Q1")
mo29.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_29), name="MarkovChain Q1")
mo30.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo28_30), name="MarkovChain Q1")

rm(example.df)
rm(df1.msm)
rm(df1.ptm)
rm(df1.tm)
}




# SENSITIVITY ANALYSIS first order monte carlo simulations cmo 28 ---------



B <- 100
N <- 30
{
sim1.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo1.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim2.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo2.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim3.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo3.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim4.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo4.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim5.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo5.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim6.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo6.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim7.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo7.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim8.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo8.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim9.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo9.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim10.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo10.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim11.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo11.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim12.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo12.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim13.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo13.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim14.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo14.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim15.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo15.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim16.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo16.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim17.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo17.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim18.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo18.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim19.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo19.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim20.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo20.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim21.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo21.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim22.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo22.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim23.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo23.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim24.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo24.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim25.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo25.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim26.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo26.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim27.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo27.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim28.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo28.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim29.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo29.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim30.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo30.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})


}
# 1 non-agressive
# 2 aggressive
# 3 cmo
# 4 discharged
# 5 death
{
# Convert simulations into data frames 
df1.sim<- as.data.frame(sim1.msm)
df1.sim<-df1.sim %>% gather(key = "id", value = "state")
df1.sim<-df1.sim %>% mutate(col1=streak_run(state, k=1000))
df1.sim<-df1.sim %>% filter(!(state=="4" & col1!=1))
df1.sim<-df1.sim %>% filter(!(state=="5" & col1!=1))

df2.sim<- as.data.frame(sim2.msm)
df2.sim<-df2.sim %>% gather(key = "id", value = "state")
df2.sim<-df2.sim %>% mutate(col1=streak_run(state, k=1000))
df2.sim<-df2.sim %>% filter(!(state=="4" & col1!=1))
df2.sim<-df2.sim %>% filter(!(state=="5" & col1!=1))

df3.sim<- as.data.frame(sim3.msm)
df3.sim<-df3.sim %>% gather(key = "id", value = "state")
df3.sim<-df3.sim %>% mutate(col1=streak_run(state, k=1000))
df3.sim<-df3.sim %>% filter(!(state=="4" & col1!=1))
df3.sim<-df3.sim %>% filter(!(state=="5" & col1!=1))

df4.sim<- as.data.frame(sim4.msm)
df4.sim<-df4.sim %>% gather(key = "id", value = "state")
df4.sim<-df4.sim %>% mutate(col1=streak_run(state, k=1000))
df4.sim<-df4.sim %>% filter(!(state=="4" & col1!=1))
df4.sim<-df4.sim %>% filter(!(state=="5" & col1!=1))

df5.sim<- as.data.frame(sim5.msm)
df5.sim<-df5.sim %>% gather(key = "id", value = "state")
df5.sim<-df5.sim %>% mutate(col1=streak_run(state, k=1000))
df5.sim<-df5.sim %>% filter(!(state=="4" & col1!=1))
df5.sim<-df5.sim %>% filter(!(state=="5" & col1!=1))

df6.sim<- as.data.frame(sim6.msm)
df6.sim<-df6.sim %>% gather(key = "id", value = "state")
df6.sim<-df6.sim %>% mutate(col1=streak_run(state, k=1000))
df6.sim<-df6.sim %>% filter(!(state=="4" & col1!=1))
df6.sim<-df6.sim %>% filter(!(state=="5" & col1!=1))

df7.sim<- as.data.frame(sim7.msm)
df7.sim<-df7.sim %>% gather(key = "id", value = "state")
df7.sim<-df7.sim %>% mutate(col1=streak_run(state, k=1000))
df7.sim<-df7.sim %>% filter(!(state=="4" & col1!=1))
df7.sim<-df7.sim %>% filter(!(state=="5" & col1!=1))

df8.sim<- as.data.frame(sim8.msm)
df8.sim<-df8.sim %>% gather(key = "id", value = "state")
df8.sim<-df8.sim %>% mutate(col1=streak_run(state, k=1000))
df8.sim<-df8.sim %>% filter(!(state=="4" & col1!=1))
df8.sim<-df8.sim %>% filter(!(state=="5" & col1!=1))

df9.sim<- as.data.frame(sim9.msm)
df9.sim<-df9.sim %>% gather(key = "id", value = "state")
df9.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df9.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df9.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df10.sim<- as.data.frame(sim10.msm)
df10.sim<-df9.sim %>% gather(key = "id", value = "state")
df10.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df10.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df10.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df11.sim<- as.data.frame(sim11.msm)
df11.sim<-df11.sim %>% gather(key = "id", value = "state")
df11.sim<-df11.sim %>% mutate(col1=streak_run(state, k=1000))
df11.sim<-df11.sim %>% filter(!(state=="4" & col1!=1))
df11.sim<-df11.sim %>% filter(!(state=="5" & col1!=1))

df12.sim<- as.data.frame(sim12.msm)
df12.sim<-df12.sim %>% gather(key = "id", value = "state")
df12.sim<-df12.sim %>% mutate(col1=streak_run(state, k=1000))
df12.sim<-df12.sim %>% filter(!(state=="4" & col1!=1))
df12.sim<-df12.sim %>% filter(!(state=="5" & col1!=1))

df13.sim<- as.data.frame(sim13.msm)
df13.sim<-df13.sim %>% gather(key = "id", value = "state")
df13.sim<-df13.sim %>% mutate(col1=streak_run(state, k=1000))
df13.sim<-df13.sim %>% filter(!(state=="4" & col1!=1))
df13.sim<-df13.sim %>% filter(!(state=="5" & col1!=1))

df14.sim<- as.data.frame(sim14.msm)
df14.sim<-df14.sim %>% gather(key = "id", value = "state")
df14.sim<-df14.sim %>% mutate(col1=streak_run(state, k=1000))
df14.sim<-df14.sim %>% filter(!(state=="4" & col1!=1))
df14.sim<-df14.sim %>% filter(!(state=="5" & col1!=1))

df15.sim<- as.data.frame(sim15.msm)
df15.sim<-df15.sim %>% gather(key = "id", value = "state")
df15.sim<-df15.sim %>% mutate(col1=streak_run(state, k=1000))
df15.sim<-df15.sim %>% filter(!(state=="4" & col1!=1))
df15.sim<-df15.sim %>% filter(!(state=="5" & col1!=1))

df16.sim<- as.data.frame(sim16.msm)
df16.sim<-df16.sim %>% gather(key = "id", value = "state")
df16.sim<-df16.sim %>% mutate(col1=streak_run(state, k=1000))
df16.sim<-df16.sim %>% filter(!(state=="4" & col1!=1))
df16.sim<-df16.sim %>% filter(!(state=="5" & col1!=1))

df17.sim<- as.data.frame(sim17.msm)
df17.sim<-df17.sim %>% gather(key = "id", value = "state")
df17.sim<-df17.sim %>% mutate(col1=streak_run(state, k=1000))
df17.sim<-df17.sim %>% filter(!(state=="4" & col1!=1))
df17.sim<-df17.sim %>% filter(!(state=="5" & col1!=1))

df18.sim<- as.data.frame(sim18.msm)
df18.sim<-df18.sim %>% gather(key = "id", value = "state")
df18.sim<-df18.sim %>% mutate(col1=streak_run(state, k=1000))
df18.sim<-df18.sim %>% filter(!(state=="4" & col1!=1))
df18.sim<-df18.sim %>% filter(!(state=="5" & col1!=1))

df19.sim<- as.data.frame(sim19.msm)
df19.sim<-df19.sim %>% gather(key = "id", value = "state")
df19.sim<-df19.sim %>% mutate(col1=streak_run(state, k=1000))
df19.sim<-df19.sim %>% filter(!(state=="4" & col1!=1))
df19.sim<-df19.sim %>% filter(!(state=="5" & col1!=1))

df20.sim<- as.data.frame(sim20.msm)
df20.sim<-df9.sim %>% gather(key = "id", value = "state")
df20.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df20.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df20.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df21.sim<- as.data.frame(sim21.msm)
df21.sim<-df21.sim %>% gather(key = "id", value = "state")
df21.sim<-df21.sim %>% mutate(col1=streak_run(state, k=1000))
df21.sim<-df21.sim %>% filter(!(state=="4" & col1!=1))
df21.sim<-df21.sim %>% filter(!(state=="5" & col1!=1))

df22.sim<- as.data.frame(sim22.msm)
df22.sim<-df22.sim %>% gather(key = "id", value = "state")
df22.sim<-df22.sim %>% mutate(col1=streak_run(state, k=1000))
df22.sim<-df22.sim %>% filter(!(state=="4" & col1!=1))
df22.sim<-df22.sim %>% filter(!(state=="5" & col1!=1))

df23.sim<- as.data.frame(sim23.msm)
df23.sim<-df23.sim %>% gather(key = "id", value = "state")
df23.sim<-df23.sim %>% mutate(col1=streak_run(state, k=1000))
df23.sim<-df23.sim %>% filter(!(state=="4" & col1!=1))
df23.sim<-df23.sim %>% filter(!(state=="5" & col1!=1))

df24.sim<- as.data.frame(sim24.msm)
df24.sim<-df24.sim %>% gather(key = "id", value = "state")
df24.sim<-df24.sim %>% mutate(col1=streak_run(state, k=1000))
df24.sim<-df24.sim %>% filter(!(state=="4" & col1!=1))
df24.sim<-df24.sim %>% filter(!(state=="5" & col1!=1))

df25.sim<- as.data.frame(sim25.msm)
df25.sim<-df25.sim %>% gather(key = "id", value = "state")
df25.sim<-df25.sim %>% mutate(col1=streak_run(state, k=1000))
df25.sim<-df25.sim %>% filter(!(state=="4" & col1!=1))
df25.sim<-df25.sim %>% filter(!(state=="5" & col1!=1))

df26.sim<- as.data.frame(sim26.msm)
df26.sim<-df26.sim %>% gather(key = "id", value = "state")
df26.sim<-df26.sim %>% mutate(col1=streak_run(state, k=1000))
df26.sim<-df26.sim %>% filter(!(state=="4" & col1!=1))
df26.sim<-df26.sim %>% filter(!(state=="5" & col1!=1))

df27.sim<- as.data.frame(sim27.msm)
df27.sim<-df27.sim %>% gather(key = "id", value = "state")
df27.sim<-df27.sim %>% mutate(col1=streak_run(state, k=1000))
df27.sim<-df27.sim %>% filter(!(state=="4" & col1!=1))
df27.sim<-df27.sim %>% filter(!(state=="5" & col1!=1))

df28.sim<- as.data.frame(sim28.msm)
df28.sim<-df28.sim %>% gather(key = "id", value = "state")
df28.sim<-df28.sim %>% mutate(col1=streak_run(state, k=1000))
df28.sim<-df28.sim %>% filter(!(state=="4" & col1!=1))
df28.sim<-df28.sim %>% filter(!(state=="5" & col1!=1))

df29.sim<- as.data.frame(sim29.msm)
df29.sim<-df29.sim %>% gather(key = "id", value = "state")
df29.sim<-df29.sim %>% mutate(col1=streak_run(state, k=1000))
df29.sim<-df29.sim %>% filter(!(state=="4" & col1!=1))
df29.sim<-df29.sim %>% filter(!(state=="5" & col1!=1))

df30.sim<- as.data.frame(sim30.msm)
df30.sim<-df30.sim %>% gather(key = "id", value = "state")
df30.sim<-df30.sim %>% mutate(col1=streak_run(state, k=1000))
df30.sim<-df30.sim %>% filter(!(state=="4" & col1!=1))
df30.sim<-df30.sim %>% filter(!(state=="5" & col1!=1))

# rm(sim1.msm) 
# rm(sim2.msm)
# rm(sim3.msm)
# rm(sim4.msm)
# rm(sim5.msm)
# rm(sim6.msm)
# rm(sim7.msm)
# rm(sim8.msm)
# rm(sim9.msm)
# rm(sim10.msm)
# rm(sim11.msm)
# rm(sim12.msm)
# rm(sim13.msm)
# rm(sim14.msm)
# rm(sim15.msm)
# rm(sim16.msm)
# rm(sim17.msm)
# rm(sim18.msm)
# rm(sim19.msm)
# rm(sim20.msm)
# rm(sim21.msm)
# rm(sim22.msm)
# rm(sim23.msm)
# rm(sim24.msm)
# rm(sim25.msm)
# rm(sim26.msm)
# rm(sim27.msm)
# rm(sim28.msm)
# rm(sim29.msm)
# rm(sim30.msm)
}

# SENSITIVITY ANALYSIS Utilities and costs cmo 28 -------------------------


{
# Utility value for being in ICU:	0.66, 0.39-0.93,	Beta,	(Cost effectiveness of antimicrobial catheters in the intensive care unit: addressing uncertainty in the decision)
# Utility value for highly invasive care:	0.55,	0.39-0.71,	(Beta,	Comparison of Health-Related Quality of Life Preferences Between Physicians and Cirrhotic Patients: Implications for Cost–Utility Analysesin Chronic Liver Disease)
# Utility value for paliative care:	0.28,	0.23-0.35,	Beta,	(Ultrasound Elastography for Fibrosis Surveillance Is Cos tEffective in Patients with Chronic Hepatitis C Virus in the UK)

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-

# sources: BIDMC - Patient Financial Services & HMFP - Finance

# utilities
u_nhic<-0.66
u_hic<-0.55
u_cmo<-0.28
u_discharge<-1
u_died<-1

# 1 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df1.sim<-df1.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df1.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df1.sim$day>0, 340,0))+4650+(ifelse(df1.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00 # assumping death at beggining of day and no extra costs 

df1.sim<-df1.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df1.summary<- df1.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= mean(utility),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df1.overall<- df1.summary[!duplicated(df1.summary$id), ]
#
df1.overallcmo28_u_mean<-mean(df1.summary$utility_mean)
df1.overallcmo28_c_mean<-mean(df1.summary$costs_sum)

# Mean survival utility and costs at N dayss
df1.survival<-df1.summary %>% filter(state%in%4)
df1.senscmo28_u_mean<-mean(df1.survival$utility_mean)
df1.senscmo28_c_mean<-mean(df1.survival$costs_sum)

#-------------------------------------------------------------------------------

# 2 day hic ////////////////////////////////////////////////////////////////////

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-

# Create flags for sequential days  
df2.sim<-df2.sim %>% mutate(day=(streak_run(id, k=1000)-1))

# Create costs
c_nhic<-3805+662+(ifelse(df2.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df2.sim$day>0, 340,0))+4650+(ifelse(df2.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*1)+(340*1)+(724*1)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC 

df2.sim<-df2.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df2.summary<- df2.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))), # adding extra days of utility given HIC
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df2.overall<- df2.summary[!duplicated(df2.summary$id), ]
#
df2.overallcmo28_u_mean<-mean(df2.summary$utility_mean)
df2.overallcmo28_c_mean<-mean(df2.summary$costs_sum)

# Mean survival utility and costs at N dayss
df2.survival<-df2.summary %>% filter(state%in%4)
df2.senscmo28_u_mean<-mean(df2.survival$utility_mean)
df2.senscmo28_c_mean<-mean(df2.survival$costs_sum)

#-------------------------------------------------------------------------------

# 3 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df3.sim<-df3.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df3.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df3.sim$day>0, 340,0))+4650+(ifelse(df3.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*2)+(340*2)+(724*2))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC

df3.sim<-df3.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df3.summary<- df3.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df3.overall<- df3.summary[!duplicated(df3.summary$id), ]
#
df3.overallcmo28_u_mean<-mean(df3.summary$utility_mean)
df3.overallcmo28_c_mean<-mean(df3.summary$costs_sum)

# Mean survival utility and costs at N dayss
df3.survival<-df3.summary %>% filter(state%in%4)
df3.senscmo28_u_mean<-mean(df3.survival$utility_mean)
df3.senscmo28_c_mean<-mean(df3.survival$costs_sum)

#-------------------------------------------------------------------------------

# 4 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df4.sim<-df4.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df4.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df4.sim$day>0, 340,0))+4650+(ifelse(df4.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*3)+(340*3)+(724*3))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df4.sim<-df4.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df4.summary<- df4.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df4.overall<- df4.summary[!duplicated(df4.summary$id), ]
#
df4.overallcmo28_u_mean<-mean(df4.summary$utility_mean)
df4.overallcmo28_c_mean<-mean(df4.summary$costs_sum)

# Mean survival utility and costs at N dayss
df4.survival<-df4.summary %>% filter(state%in%4)
df4.senscmo28_u_mean<-mean(df4.survival$utility_mean)
df4.senscmo28_c_mean<-mean(df4.survival$costs_sum)

#-------------------------------------------------------------------------------

# 5 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df5.sim<-df5.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df5.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df5.sim$day>0, 340,0))+4650+(ifelse(df5.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*4)+(340*4)+(724*4))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df5.sim<-df5.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df5.summary<- df5.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df5.overall<- df5.summary[!duplicated(df5.summary$id), ]
#
df5.overallcmo28_u_mean<-mean(df5.summary$utility_mean)
df5.overallcmo28_c_mean<-mean(df5.summary$costs_sum)

# Mean survival utility and costs at N dayss
df5.survival<-df5.summary %>% filter(state%in%4)
df5.senscmo28_u_mean<-mean(df5.survival$utility_mean)
df5.senscmo28_c_mean<-mean(df5.survival$costs_sum)

#-------------------------------------------------------------------------------

# 6 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df6.sim<-df6.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df6.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df6.sim$day>0, 340,0))+4650+(ifelse(df6.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*5)+(340*5)+(724*5))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df6.sim<-df6.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df6.summary<- df6.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df6.overall<- df6.summary[!duplicated(df6.summary$id), ]
#
df6.overallcmo28_u_mean<-mean(df6.summary$utility_mean)
df6.overallcmo28_c_mean<-mean(df6.summary$costs_sum)

# Mean survival utility and costs at N dayss
df6.survival<-df6.summary %>% filter(state%in%4)
df6.senscmo28_u_mean<-mean(df6.survival$utility_mean)
df6.senscmo28_c_mean<-mean(df6.survival$costs_sum)

#-------------------------------------------------------------------------------

# 7 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df7.sim<-df7.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df7.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df7.sim$day>0, 340,0))+4650+(ifelse(df7.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*6)+(340*6)+(724*6))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df7.sim<-df7.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df7.summary<- df7.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df7.overall<- df7.summary[!duplicated(df7.summary$id), ]
#
df7.overallcmo28_u_mean<-mean(df7.summary$utility_mean)
df7.overallcmo28_c_mean<-mean(df7.summary$costs_sum)

# Mean survival utility and costs at N dayss
df7.survival<-df7.summary %>% filter(state%in%4)
df7.senscmo28_u_mean<-mean(df7.survival$utility_mean)
df7.senscmo28_c_mean<-mean(df7.survival$costs_sum)

#-------------------------------------------------------------------------------

# 8 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df8.sim<-df8.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df8.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df8.sim$day>0, 340,0))+4650+(ifelse(df8.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*7)+(340*7)+(724*7)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df8.sim<-df8.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df8.summary<- df8.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df8.overall<- df8.summary[!duplicated(df8.summary$id), ]
#
df8.overallcmo28_u_mean<-mean(df8.summary$utility_mean)
df8.overallcmo28_c_mean<-mean(df8.summary$costs_sum)

# Mean survival utility and costs at N dayss
df8.survival<-df8.summary %>% filter(state%in%4)
df8.senscmo28_u_mean<-mean(df8.survival$utility_mean)
df8.senscmo28_c_mean<-mean(df8.survival$costs_sum)

#-------------------------------------------------------------------------------

# 9 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df9.sim<-df9.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df9.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df9.sim$day>0, 340,0))+4650+(ifelse(df9.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*8)+(340*8)+(724*8))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df9.sim<-df9.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df9.summary<- df9.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df9.overall<- df9.summary[!duplicated(df9.summary$id), ]
#
df9.overallcmo28_u_mean<-mean(df9.summary$utility_mean)
df9.overallcmo28_c_mean<-mean(df9.summary$costs_sum)

# Mean survival utility and costs at N dayss
df9.survival<-df9.summary %>% filter(state%in%4)
df9.senscmo28_u_mean<-mean(df9.survival$utility_mean)
df9.senscmo28_c_mean<-mean(df9.survival$costs_sum)

#-------------------------------------------------------------------------------

# 10 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df10.sim<-df10.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df10.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df10.sim$day>0, 340,0))+4650+(ifelse(df10.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*9)+(340*9)+(724*9))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df10.sim<-df10.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df10.summary<- df10.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df10.overall<- df10.summary[!duplicated(df10.summary$id), ]
#
df10.overallcmo28_u_mean<-mean(df10.summary$utility_mean)
df10.overallcmo28_c_mean<-mean(df10.summary$costs_sum)

# Mean survival utility and costs at N dayss
df10.survival<-df10.summary %>% filter(state%in%4)
df10.senscmo28_u_mean<-mean(df10.survival$utility_mean)
df10.senscmo28_c_mean<-mean(df10.survival$costs_sum)

#-------------------------------------------------------------------------------

# 11 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df11.sim<-df11.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df11.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df11.sim$day>0, 340,0))+4650+(ifelse(df11.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*10)+(340*10)+(724*10))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df11.sim<-df11.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df11.summary<- df11.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df11.overall<- df11.summary[!duplicated(df11.summary$id), ]
#
df11.overallcmo28_u_mean<-mean(df11.summary$utility_mean)
df11.overallcmo28_c_mean<-mean(df11.summary$costs_sum)

# Mean survival utility and costs at N dayss
df11.survival<-df11.summary %>% filter(state%in%4)
df11.senscmo28_u_mean<-mean(df11.survival$utility_mean)
df11.senscmo28_c_mean<-mean(df11.survival$costs_sum)

#-------------------------------------------------------------------------------

# 12 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df12.sim<-df12.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df12.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df12.sim$day>0, 340,0))+4650+(ifelse(df12.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*11)+(340*11)+(724*11))   # assumping death at beggining of day and no extra costs 

df12.sim<-df12.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df12.summary<- df12.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df12.overall<- df12.summary[!duplicated(df12.summary$id), ]
#
df12.overallcmo28_u_mean<-mean(df12.summary$utility_mean)
df12.overallcmo28_c_mean<-mean(df12.summary$costs_sum)

# Mean survival utility and costs at N dayss
df12.survival<-df12.summary %>% filter(state%in%4)
df12.senscmo28_u_mean<-mean(df12.survival$utility_mean)
df12.senscmo28_c_mean<-mean(df12.survival$costs_sum)

#-------------------------------------------------------------------------------

# 13 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df13.sim<-df13.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df13.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df13.sim$day>0, 340,0))+4650+(ifelse(df13.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*12)+(340*12)+(724*12)) # assumping death at beggining of day and no extra costs 

df13.sim<-df13.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df13.summary<- df13.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df13.overall<- df13.summary[!duplicated(df13.summary$id), ]
#
df13.overallcmo28_u_mean<-mean(df13.summary$utility_mean)
df13.overallcmo28_c_mean<-mean(df13.summary$costs_sum)

# Mean survival utility and costs at N dayss
df13.survival<-df13.summary %>% filter(state%in%4)
df13.senscmo28_u_mean<-mean(df13.survival$utility_mean)
df13.senscmo28_c_mean<-mean(df13.survival$costs_sum)

#-------------------------------------------------------------------------------

# 14 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df14.sim<-df14.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df14.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df14.sim$day>0, 340,0))+4650+(ifelse(df14.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*13)+(340*13)+(724*13))  # assumping death at beggining of day and no extra costs 

df14.sim<-df14.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df14.summary<- df14.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df14.overall<- df14.summary[!duplicated(df14.summary$id), ]
#
df14.overallcmo28_u_mean<-mean(df14.summary$utility_mean)
df14.overallcmo28_c_mean<-mean(df14.summary$costs_sum)

# Mean survival utility and costs at N dayss
df14.survival<-df14.summary %>% filter(state%in%4)
df14.senscmo28_u_mean<-mean(df14.survival$utility_mean)
df14.senscmo28_c_mean<-mean(df14.survival$costs_sum)

#-------------------------------------------------------------------------------

# 15 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df15.sim<-df15.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df15.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df15.sim$day>0, 340,0))+4650+(ifelse(df15.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*14)+(340*14)+(724*14))  # assumping death at beggining of day and no extra costs 

df15.sim<-df15.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df15.summary<- df15.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df15.overall<- df15.summary[!duplicated(df15.summary$id), ]
#
df15.overallcmo28_u_mean<-mean(df15.summary$utility_mean)
df15.overallcmo28_c_mean<-mean(df15.summary$costs_sum)

# Mean survival utility and costs at N dayss
df15.survival<-df15.summary %>% filter(state%in%4)
df15.senscmo28_u_mean<-mean(df15.survival$utility_mean)
df15.senscmo28_c_mean<-mean(df15.survival$costs_sum)

#-------------------------------------------------------------------------------

# 16 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df16.sim<-df16.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df16.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df16.sim$day>0, 340,0))+4650+(ifelse(df16.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*15)+(340*15)+(724*15))  # assumping death at beggining of day and no extra costs 

df16.sim<-df16.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df16.summary<- df16.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df16.overall<- df16.summary[!duplicated(df16.summary$id), ]
#
df16.overallcmo28_u_mean<-mean(df16.summary$utility_mean)
df16.overallcmo28_c_mean<-mean(df16.summary$costs_sum)

# Mean survival utility and costs at N dayss
df16.survival<-df16.summary %>% filter(state%in%4)
df16.senscmo28_u_mean<-mean(df16.survival$utility_mean)
df16.senscmo28_c_mean<-mean(df16.survival$costs_sum)

#-------------------------------------------------------------------------------

# 17 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df17.sim<-df17.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df17.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df17.sim$day>0, 340,0))+4650+(ifelse(df17.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*16)+(340*16)+(724*16))  # assumping death at beggining of day and no extra costs 

df17.sim<-df17.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df17.summary<- df17.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df17.overall<- df17.summary[!duplicated(df17.summary$id), ]
#
df17.overallcmo28_u_mean<-mean(df17.summary$utility_mean)
df17.overallcmo28_c_mean<-mean(df17.summary$costs_sum)

# Mean survival utility and costs at N dayss
df17.survival<-df17.summary %>% filter(state%in%4)
df17.senscmo28_u_mean<-mean(df17.survival$utility_mean)
df17.senscmo28_c_mean<-mean(df17.survival$costs_sum)

#-------------------------------------------------------------------------------

# 18 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df18.sim<-df18.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df18.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df18.sim$day>0, 340,0))+4650+(ifelse(df18.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*17)+(340*17)+(724*17))  # assumping death at beggining of day and no extra costs 

df18.sim<-df18.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df18.summary<- df18.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df18.overall<- df18.summary[!duplicated(df18.summary$id), ]
#
df18.overallcmo28_u_mean<-mean(df18.summary$utility_mean)
df18.overallcmo28_c_mean<-mean(df18.summary$costs_sum)

# Mean survival utility and costs at N dayss
df18.survival<-df18.summary %>% filter(state%in%4)
df18.senscmo28_u_mean<-mean(df18.survival$utility_mean)
df18.senscmo28_c_mean<-mean(df18.survival$costs_sum)

#-------------------------------------------------------------------------------

# 19 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df19.sim<-df19.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df19.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df19.sim$day>0, 340,0))+4650+(ifelse(df19.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*18)+(340*18)+(724*18))  # assumping death at beggining of day and no extra costs 

df19.sim<-df19.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df19.summary<- df19.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df19.overall<- df19.summary[!duplicated(df19.summary$id), ]
#
df19.overallcmo28_u_mean<-mean(df19.summary$utility_mean)
df19.overallcmo28_c_mean<-mean(df19.summary$costs_sum)

# Mean survival utility and costs at N dayss
df19.survival<-df19.summary %>% filter(state%in%4)
df19.senscmo28_u_mean<-mean(df19.survival$utility_mean)
df19.senscmo28_c_mean<-mean(df19.survival$costs_sum)

#-------------------------------------------------------------------------------

# 20 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df20.sim<-df20.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df20.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df20.sim$day>0, 340,0))+4650+(ifelse(df20.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*19)+(340*19)+(724*19))  # assumping death at beggining of day and no extra costs 

df20.sim<-df20.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df20.summary<- df20.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df20.overall<- df20.summary[!duplicated(df20.summary$id), ]
#
df20.overallcmo28_u_mean<-mean(df20.summary$utility_mean)
df20.overallcmo28_c_mean<-mean(df20.summary$costs_sum)

# Mean survival utility and costs at N dayss
df20.survival<-df20.summary %>% filter(state%in%4)
df20.senscmo28_u_mean<-mean(df20.survival$utility_mean)
df20.senscmo28_c_mean<-mean(df20.survival$costs_sum)

#-------------------------------------------------------------------------------

# 21 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df21.sim<-df21.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df21.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df21.sim$day>0, 340,0))+4650+(ifelse(df21.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*20)+(340*20)+(724*20))  # assumping death at beggining of day and no extra costs 

df21.sim<-df21.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df21.summary<- df21.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df21.overall<- df21.summary[!duplicated(df21.summary$id), ]
#
df21.overallcmo28_u_mean<-mean(df21.summary$utility_mean)
df21.overallcmo28_c_mean<-mean(df21.summary$costs_sum)

# Mean survival utility and costs at N dayss
df21.survival<-df21.summary %>% filter(state%in%4)
df21.senscmo28_u_mean<-mean(df21.survival$utility_mean)
df21.senscmo28_c_mean<-mean(df21.survival$costs_sum)

#-------------------------------------------------------------------------------

# 22 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df22.sim<-df22.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df22.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df22.sim$day>0, 340,0))+4650+(ifelse(df22.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*21)+(340*21)+(724*21)) # assumping death at beggining of day and no extra costs 

df22.sim<-df22.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df22.summary<- df22.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df22.overall<- df22.summary[!duplicated(df22.summary$id), ]
#
df22.overallcmo28_u_mean<-mean(df22.summary$utility_mean)
df22.overallcmo28_c_mean<-mean(df22.summary$costs_sum)

# Mean survival utility and costs at N dayss
df22.survival<-df22.summary %>% filter(state%in%4)
df22.senscmo28_u_mean<-mean(df22.survival$utility_mean)
df22.senscmo28_c_mean<-mean(df22.survival$costs_sum)

#-------------------------------------------------------------------------------

# 23 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df23.sim<-df23.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df23.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df23.sim$day>0, 340,0))+4650+(ifelse(df23.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*22)+(340*22)+(724*22)) # assumping death at beggining of day and no extra costs 

df23.sim<-df23.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df23.summary<- df23.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df23.overall<- df23.summary[!duplicated(df23.summary$id), ]
#
df23.overallcmo28_u_mean<-mean(df23.summary$utility_mean)
df23.overallcmo28_c_mean<-mean(df23.summary$costs_sum)

# Mean survival utility and costs at N dayss
df23.survival<-df23.summary %>% filter(state%in%4)
df23.senscmo28_u_mean<-mean(df23.survival$utility_mean)
df23.senscmo28_c_mean<-mean(df23.survival$costs_sum)

#-------------------------------------------------------------------------------

# 24 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df24.sim<-df24.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df24.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df24.sim$day>0, 340,0))+4650+(ifelse(df24.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*23)+(340*23)+(724*23))  # assumping death at beggining of day and no extra costs 

df24.sim<-df24.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df24.summary<- df24.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df24.overall<- df24.summary[!duplicated(df24.summary$id), ]
#
df24.overallcmo28_u_mean<-mean(df24.summary$utility_mean)
df24.overallcmo28_c_mean<-mean(df24.summary$costs_sum)

# Mean survival utility and costs at N dayss
df24.survival<-df24.summary %>% filter(state%in%4)
df24.senscmo28_u_mean<-mean(df24.survival$utility_mean)
df24.senscmo28_c_mean<-mean(df24.survival$costs_sum)

#-------------------------------------------------------------------------------

# 25 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df25.sim<-df25.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df25.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df25.sim$day>0, 340,0))+4650+(ifelse(df25.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*24)+(340*24)+(724*24)) # assumping death at beggining of day and no extra costs 

df25.sim<-df25.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df25.summary<- df25.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df25.overall<- df25.summary[!duplicated(df25.summary$id), ]
#
df25.overallcmo28_u_mean<-mean(df25.summary$utility_mean)
df25.overallcmo28_c_mean<-mean(df25.summary$costs_sum)

# Mean survival utility and costs at N dayss
df25.survival<-df25.summary %>% filter(state%in%4)
df25.senscmo28_u_mean<-mean(df25.survival$utility_mean)
df25.senscmo28_c_mean<-mean(df25.survival$costs_sum)

#-------------------------------------------------------------------------------

# 26 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df26.sim<-df26.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df26.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df26.sim$day>0, 340,0))+4650+(ifelse(df26.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*25)+(340*25)+(724*25))  # assumping death at beggining of day and no extra costs 

df26.sim<-df26.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df26.summary<- df26.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df26.overall<- df26.summary[!duplicated(df26.summary$id), ]
#
df26.overallcmo28_u_mean<-mean(df26.summary$utility_mean)
df26.overallcmo28_c_mean<-mean(df26.summary$costs_sum)

# Mean survival utility and costs at N dayss
df26.survival<-df26.summary %>% filter(state%in%4)
df26.senscmo28_u_mean<-mean(df26.survival$utility_mean)
df26.senscmo28_c_mean<-mean(df26.survival$costs_sum)

#-------------------------------------------------------------------------------

# 27 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df27.sim<-df27.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df27.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df27.sim$day>0, 340,0))+4650+(ifelse(df27.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*26)+(340*26)+(724*26))  # assumping death at beggining of day and no extra costs 

df27.sim<-df27.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df27.summary<- df27.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df27.overall<- df27.summary[!duplicated(df27.summary$id), ]
#
df27.overallcmo28_u_mean<-mean(df27.summary$utility_mean)
df27.overallcmo28_c_mean<-mean(df27.summary$costs_sum)

# Mean survival utility and costs at N dayss
df27.survival<-df27.summary %>% filter(state%in%4)
df27.senscmo28_u_mean<-mean(df27.survival$utility_mean)
df27.senscmo28_c_mean<-mean(df27.survival$costs_sum)

#-------------------------------------------------------------------------------

# 28 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df28.sim<-df28.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df28.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df28.sim$day>0, 340,0))+4650+(ifelse(df28.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*27)+(340*27)+(724*27))  # assumping death at beggining of day and no extra costs 

df28.sim<-df28.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df28.summary<- df28.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df28.overall<- df28.summary[!duplicated(df28.summary$id), ]
#
df28.overallcmo28_u_mean<-mean(df28.summary$utility_mean)
df28.overallcmo28_c_mean<-mean(df28.summary$costs_sum)

# Mean survival utility and costs at N dayss
df28.survival<-df28.summary %>% filter(state%in%4)
df28.senscmo28_u_mean<-mean(df28.survival$utility_mean)
df28.senscmo28_c_mean<-mean(df28.survival$costs_sum)

#-------------------------------------------------------------------------------

# 29 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df29.sim<-df29.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df29.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df29.sim$day>0, 340,0))+4650+(ifelse(df29.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*28)+(340*28)+(724*28))  # assumping death at beggining of day and no extra costs 

df29.sim<-df29.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df29.summary<- df29.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean=(sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df29.overall<- df29.summary[!duplicated(df29.summary$id), ]
#
df29.overallcmo28_u_mean<-mean(df29.summary$utility_mean)
df29.overallcmo28_c_mean<-mean(df29.summary$costs_sum)

# Mean survival utility and costs at N dayss
df29.survival<-df29.summary %>% filter(state%in%4)
df29.senscmo28_u_mean<-mean(df29.survival$utility_mean)
df29.senscmo28_c_mean<-mean(df29.survival$costs_sum)

#-------------------------------------------------------------------------------

# 30 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df30.sim<-df30.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df30.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df30.sim$day>0, 340,0))+4650+(ifelse(df30.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*29)+(340*29)+(724*29))  # assumping death at beggining of day and no extra costs 

df30.sim<-df30.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df30.summary<- df30.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df30.overall<- df30.summary[!duplicated(df30.summary$id), ]
#
df30.overallcmo28_u_mean<-mean(df30.summary$utility_mean)
df30.overallcmo28_c_mean<-mean(df30.summary$costs_sum)

# Mean survival utility and costs at N dayss
df30.survival<-df30.summary %>% filter(state%in%4)
df30.senscmo28_u_mean<-mean(df30.survival$utility_mean)
df30.senscmo28_c_mean<-mean(df30.survival$costs_sum)

df1.senscmo28<-df1.summary
df2.senscmo28<-df2.summary
df3.senscmo28<-df3.summary
df4.senscmo28<-df4.summary
df5.senscmo28<-df5.summary
df6.senscmo28<-df6.summary
df7.senscmo28<-df7.summary
df8.senscmo28<-df8.summary
df9.senscmo28<-df9.summary
df10.senscmo28<-df10.summary
df11.senscmo28<-df11.summary
df12.senscmo28<-df12.summary
df13.senscmo28<-df13.summary
df14.senscmo28<-df14.summary
df15.senscmo28<-df15.summary
df16.senscmo28<-df16.summary
df17.senscmo28<-df17.summary
df18.senscmo28<-df18.summary
df19.senscmo28<-df19.summary
df20.senscmo28<-df20.summary
df21.senscmo28<-df21.summary
df22.senscmo28<-df22.summary
df23.senscmo28<-df23.summary
df24.senscmo28<-df24.summary
df25.senscmo28<-df25.summary
df26.senscmo28<-df26.summary
df27.senscmo28<-df27.summary
df28.senscmo28<-df28.summary
df29.senscmo28<-df29.summary
df30.senscmo28<-df30.summary



rm(df1.sim)
rm(df2.sim)
rm(df3.sim)
rm(df4.sim)
rm(df5.sim)
rm(df6.sim)
rm(df7.sim)
rm(df8.sim)
rm(df9.sim)
rm(df10.sim)
rm(df11.sim)
rm(df12.sim)
rm(df13.sim)
rm(df14.sim)
rm(df15.sim)
rm(df16.sim)
rm(df17.sim)
rm(df18.sim)
rm(df19.sim)
rm(df20.sim)
rm(df21.sim)
rm(df22.sim)
rm(df23.sim)
rm(df24.sim)
rm(df25.sim)
rm(df26.sim)
rm(df27.sim)
rm(df28.sim)
rm(df29.sim)
rm(df30.sim)
}

# 1 way sensitivity cmo 28 case results ------------------------------------------------------------
senscmo28.overall_c_vect<-c()
for (i in 1:30){
  senscmo28.overall_c_vect[i]<-get(paste("df", i, ".overallcmo28_c_mean",sep = ""))
}

senscmo28.overall_u_vect<-c()
for (i in 1:30){
  senscmo28.overall_u_vect[i]<-get(paste("df", i, ".overallcmo28_u_mean",sep = ""))
}

senscmo28.survival_c_vect<-c()
for (i in 1:30){
  senscmo28.survival_c_vect[i]<-get(paste("df", i, ".senscmo28_c_mean",sep = ""))
}

senscmo28.survival_u_vect<-c()
for (i in 1:30){
  senscmo28.survival_u_vect[i]<-get(paste("df", i, ".senscmo28_u_mean",sep = ""))
}

senscmo28.ce_results<- matrix(c(senscmo28.overall_c_vect,senscmo28.overall_u_vect,senscmo28.survival_c_vect,senscmo28.survival_u_vect), nrow=30, byrow=FALSE)
colnames(senscmo28.ce_results) <- c("overall_c","overall_u","survival_c","survival_u")
#----


# markov objects  cmo 52%----
{
mo1.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52), name="MarkovChain Q1")

mo2.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_2), name="MarkovChain Q1")
mo3.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_3), name="MarkovChain Q1")
mo4.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_4), name="MarkovChain Q1")
mo5.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_5), name="MarkovChain Q1")
mo6.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_6), name="MarkovChain Q1")
mo7.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_7), name="MarkovChain Q1")  
mo8.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_8), name="MarkovChain Q1")
mo9.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_9), name="MarkovChain Q1")
mo10.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_10), name="MarkovChain Q1")
mo11.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_11), name="MarkovChain Q1")
mo12.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_12), name="MarkovChain Q1")
mo13.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_13), name="MarkovChain Q1")
mo14.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_14), name="MarkovChain Q1")
mo15.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_15), name="MarkovChain Q1")
mo16.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_16), name="MarkovChain Q1")
mo17.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_17), name="MarkovChain Q1")
mo18.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_18), name="MarkovChain Q1")
mo19.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_19), name="MarkovChain Q1")
mo20.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_20), name="MarkovChain Q1")
mo21.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_21), name="MarkovChain Q1")
mo22.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_22), name="MarkovChain Q1")
mo23.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_23), name="MarkovChain Q1")
mo24.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_24), name="MarkovChain Q1")
mo25.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_25), name="MarkovChain Q1")
mo26.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_26), name="MarkovChain Q1")
mo27.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_27), name="MarkovChain Q1")
mo28.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_28), name="MarkovChain Q1")
mo29.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_29), name="MarkovChain Q1")
mo30.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo52_30), name="MarkovChain Q1")

rm(example.df)
rm(df1.msm)
rm(df1.ptm)
rm(df1.tm)
}

#



# SENSITIVITY ANALYSIS first order monte carlo simulations cmo 52 ---------



B <- 100
N <- 30
{
sim1.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo1.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim2.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo2.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim3.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo3.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim4.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo4.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim5.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo5.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim6.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo6.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim7.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo7.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim8.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo8.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim9.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo9.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim10.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo10.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim11.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo11.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim12.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo12.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim13.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo13.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim14.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo14.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim15.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo15.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim16.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo16.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim17.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo17.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim18.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo18.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim19.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo19.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim20.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo20.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim21.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo21.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim22.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo22.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim23.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo23.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim24.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo24.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim25.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo25.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim26.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo26.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim27.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo27.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim28.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo28.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim29.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo29.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim30.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo30.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})
}
# rm(mo1.msm) 
# rm(mo2.msm)
# rm(mo3.msm)
# rm(mo4.msm)
# rm(mo5.msm)
# rm(mo6.msm)
# rm(mo7.msm)
# rm(mo8.msm)
# rm(mo9.msm)
# rm(mo10.msm)
# rm(mo11.msm)
# rm(mo12.msm)
# rm(mo13.msm)
# rm(mo14.msm)
# rm(mo15.msm)
# rm(mo16.msm)
# rm(mo17.msm)
# rm(mo18.msm)
# rm(mo19.msm)
# rm(mo20.msm)
# rm(mo21.msm)
# rm(mo22.msm)
# rm(mo23.msm)
# rm(mo24.msm)
# rm(mo25.msm)
# rm(mo26.msm)
# rm(mo27.msm)
# rm(mo28.msm)
# rm(mo29.msm)
# rm(mo30.msm)

# 1 non-agressive
# 2 aggressive
# 3 cmo
# 4 discharged
# 5 death

# Convert simulations into data frames 
{
df1.sim<- as.data.frame(sim1.msm)
df1.sim<-df1.sim %>% gather(key = "id", value = "state")
df1.sim<-df1.sim %>% mutate(col1=streak_run(state, k=1000))
df1.sim<-df1.sim %>% filter(!(state=="4" & col1!=1))
df1.sim<-df1.sim %>% filter(!(state=="5" & col1!=1))

df2.sim<- as.data.frame(sim2.msm)
df2.sim<-df2.sim %>% gather(key = "id", value = "state")
df2.sim<-df2.sim %>% mutate(col1=streak_run(state, k=1000))
df2.sim<-df2.sim %>% filter(!(state=="4" & col1!=1))
df2.sim<-df2.sim %>% filter(!(state=="5" & col1!=1))

df3.sim<- as.data.frame(sim3.msm)
df3.sim<-df3.sim %>% gather(key = "id", value = "state")
df3.sim<-df3.sim %>% mutate(col1=streak_run(state, k=1000))
df3.sim<-df3.sim %>% filter(!(state=="4" & col1!=1))
df3.sim<-df3.sim %>% filter(!(state=="5" & col1!=1))

df4.sim<- as.data.frame(sim4.msm)
df4.sim<-df4.sim %>% gather(key = "id", value = "state")
df4.sim<-df4.sim %>% mutate(col1=streak_run(state, k=1000))
df4.sim<-df4.sim %>% filter(!(state=="4" & col1!=1))
df4.sim<-df4.sim %>% filter(!(state=="5" & col1!=1))

df5.sim<- as.data.frame(sim5.msm)
df5.sim<-df5.sim %>% gather(key = "id", value = "state")
df5.sim<-df5.sim %>% mutate(col1=streak_run(state, k=1000))
df5.sim<-df5.sim %>% filter(!(state=="4" & col1!=1))
df5.sim<-df5.sim %>% filter(!(state=="5" & col1!=1))

df6.sim<- as.data.frame(sim6.msm)
df6.sim<-df6.sim %>% gather(key = "id", value = "state")
df6.sim<-df6.sim %>% mutate(col1=streak_run(state, k=1000))
df6.sim<-df6.sim %>% filter(!(state=="4" & col1!=1))
df6.sim<-df6.sim %>% filter(!(state=="5" & col1!=1))

df7.sim<- as.data.frame(sim7.msm)
df7.sim<-df7.sim %>% gather(key = "id", value = "state")
df7.sim<-df7.sim %>% mutate(col1=streak_run(state, k=1000))
df7.sim<-df7.sim %>% filter(!(state=="4" & col1!=1))
df7.sim<-df7.sim %>% filter(!(state=="5" & col1!=1))

df8.sim<- as.data.frame(sim8.msm)
df8.sim<-df8.sim %>% gather(key = "id", value = "state")
df8.sim<-df8.sim %>% mutate(col1=streak_run(state, k=1000))
df8.sim<-df8.sim %>% filter(!(state=="4" & col1!=1))
df8.sim<-df8.sim %>% filter(!(state=="5" & col1!=1))

df9.sim<- as.data.frame(sim9.msm)
df9.sim<-df9.sim %>% gather(key = "id", value = "state")
df9.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df9.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df9.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df10.sim<- as.data.frame(sim10.msm)
df10.sim<-df9.sim %>% gather(key = "id", value = "state")
df10.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df10.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df10.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df11.sim<- as.data.frame(sim11.msm)
df11.sim<-df11.sim %>% gather(key = "id", value = "state")
df11.sim<-df11.sim %>% mutate(col1=streak_run(state, k=1000))
df11.sim<-df11.sim %>% filter(!(state=="4" & col1!=1))
df11.sim<-df11.sim %>% filter(!(state=="5" & col1!=1))

df12.sim<- as.data.frame(sim12.msm)
df12.sim<-df12.sim %>% gather(key = "id", value = "state")
df12.sim<-df12.sim %>% mutate(col1=streak_run(state, k=1000))
df12.sim<-df12.sim %>% filter(!(state=="4" & col1!=1))
df12.sim<-df12.sim %>% filter(!(state=="5" & col1!=1))

df13.sim<- as.data.frame(sim13.msm)
df13.sim<-df13.sim %>% gather(key = "id", value = "state")
df13.sim<-df13.sim %>% mutate(col1=streak_run(state, k=1000))
df13.sim<-df13.sim %>% filter(!(state=="4" & col1!=1))
df13.sim<-df13.sim %>% filter(!(state=="5" & col1!=1))

df14.sim<- as.data.frame(sim14.msm)
df14.sim<-df14.sim %>% gather(key = "id", value = "state")
df14.sim<-df14.sim %>% mutate(col1=streak_run(state, k=1000))
df14.sim<-df14.sim %>% filter(!(state=="4" & col1!=1))
df14.sim<-df14.sim %>% filter(!(state=="5" & col1!=1))

df15.sim<- as.data.frame(sim15.msm)
df15.sim<-df15.sim %>% gather(key = "id", value = "state")
df15.sim<-df15.sim %>% mutate(col1=streak_run(state, k=1000))
df15.sim<-df15.sim %>% filter(!(state=="4" & col1!=1))
df15.sim<-df15.sim %>% filter(!(state=="5" & col1!=1))

df16.sim<- as.data.frame(sim16.msm)
df16.sim<-df16.sim %>% gather(key = "id", value = "state")
df16.sim<-df16.sim %>% mutate(col1=streak_run(state, k=1000))
df16.sim<-df16.sim %>% filter(!(state=="4" & col1!=1))
df16.sim<-df16.sim %>% filter(!(state=="5" & col1!=1))

df17.sim<- as.data.frame(sim17.msm)
df17.sim<-df17.sim %>% gather(key = "id", value = "state")
df17.sim<-df17.sim %>% mutate(col1=streak_run(state, k=1000))
df17.sim<-df17.sim %>% filter(!(state=="4" & col1!=1))
df17.sim<-df17.sim %>% filter(!(state=="5" & col1!=1))

df18.sim<- as.data.frame(sim18.msm)
df18.sim<-df18.sim %>% gather(key = "id", value = "state")
df18.sim<-df18.sim %>% mutate(col1=streak_run(state, k=1000))
df18.sim<-df18.sim %>% filter(!(state=="4" & col1!=1))
df18.sim<-df18.sim %>% filter(!(state=="5" & col1!=1))

df19.sim<- as.data.frame(sim19.msm)
df19.sim<-df19.sim %>% gather(key = "id", value = "state")
df19.sim<-df19.sim %>% mutate(col1=streak_run(state, k=1000))
df19.sim<-df19.sim %>% filter(!(state=="4" & col1!=1))
df19.sim<-df19.sim %>% filter(!(state=="5" & col1!=1))

df20.sim<- as.data.frame(sim20.msm)
df20.sim<-df9.sim %>% gather(key = "id", value = "state")
df20.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df20.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df20.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df21.sim<- as.data.frame(sim21.msm)
df21.sim<-df21.sim %>% gather(key = "id", value = "state")
df21.sim<-df21.sim %>% mutate(col1=streak_run(state, k=1000))
df21.sim<-df21.sim %>% filter(!(state=="4" & col1!=1))
df21.sim<-df21.sim %>% filter(!(state=="5" & col1!=1))

df22.sim<- as.data.frame(sim22.msm)
df22.sim<-df22.sim %>% gather(key = "id", value = "state")
df22.sim<-df22.sim %>% mutate(col1=streak_run(state, k=1000))
df22.sim<-df22.sim %>% filter(!(state=="4" & col1!=1))
df22.sim<-df22.sim %>% filter(!(state=="5" & col1!=1))

df23.sim<- as.data.frame(sim23.msm)
df23.sim<-df23.sim %>% gather(key = "id", value = "state")
df23.sim<-df23.sim %>% mutate(col1=streak_run(state, k=1000))
df23.sim<-df23.sim %>% filter(!(state=="4" & col1!=1))
df23.sim<-df23.sim %>% filter(!(state=="5" & col1!=1))

df24.sim<- as.data.frame(sim24.msm)
df24.sim<-df24.sim %>% gather(key = "id", value = "state")
df24.sim<-df24.sim %>% mutate(col1=streak_run(state, k=1000))
df24.sim<-df24.sim %>% filter(!(state=="4" & col1!=1))
df24.sim<-df24.sim %>% filter(!(state=="5" & col1!=1))

df25.sim<- as.data.frame(sim25.msm)
df25.sim<-df25.sim %>% gather(key = "id", value = "state")
df25.sim<-df25.sim %>% mutate(col1=streak_run(state, k=1000))
df25.sim<-df25.sim %>% filter(!(state=="4" & col1!=1))
df25.sim<-df25.sim %>% filter(!(state=="5" & col1!=1))

df26.sim<- as.data.frame(sim26.msm)
df26.sim<-df26.sim %>% gather(key = "id", value = "state")
df26.sim<-df26.sim %>% mutate(col1=streak_run(state, k=1000))
df26.sim<-df26.sim %>% filter(!(state=="4" & col1!=1))
df26.sim<-df26.sim %>% filter(!(state=="5" & col1!=1))

df27.sim<- as.data.frame(sim27.msm)
df27.sim<-df27.sim %>% gather(key = "id", value = "state")
df27.sim<-df27.sim %>% mutate(col1=streak_run(state, k=1000))
df27.sim<-df27.sim %>% filter(!(state=="4" & col1!=1))
df27.sim<-df27.sim %>% filter(!(state=="5" & col1!=1))

df28.sim<- as.data.frame(sim28.msm)
df28.sim<-df28.sim %>% gather(key = "id", value = "state")
df28.sim<-df28.sim %>% mutate(col1=streak_run(state, k=1000))
df28.sim<-df28.sim %>% filter(!(state=="4" & col1!=1))
df28.sim<-df28.sim %>% filter(!(state=="5" & col1!=1))

df29.sim<- as.data.frame(sim29.msm)
df29.sim<-df29.sim %>% gather(key = "id", value = "state")
df29.sim<-df29.sim %>% mutate(col1=streak_run(state, k=1000))
df29.sim<-df29.sim %>% filter(!(state=="4" & col1!=1))
df29.sim<-df29.sim %>% filter(!(state=="5" & col1!=1))

df30.sim<- as.data.frame(sim30.msm)
df30.sim<-df30.sim %>% gather(key = "id", value = "state")
df30.sim<-df30.sim %>% mutate(col1=streak_run(state, k=1000))
df30.sim<-df30.sim %>% filter(!(state=="4" & col1!=1))
df30.sim<-df30.sim %>% filter(!(state=="5" & col1!=1))

rm(sim1.msm) 
rm(sim2.msm)
rm(sim3.msm)
rm(sim4.msm)
rm(sim5.msm)
rm(sim6.msm)
rm(sim7.msm)
rm(sim8.msm)
rm(sim9.msm)
rm(sim10.msm)
rm(sim11.msm)
rm(sim12.msm)
rm(sim13.msm)
rm(sim14.msm)
rm(sim15.msm)
rm(sim16.msm)
rm(sim17.msm)
rm(sim18.msm)
rm(sim19.msm)
rm(sim20.msm)
rm(sim21.msm)
rm(sim22.msm)
rm(sim23.msm)
rm(sim24.msm)
rm(sim25.msm)
rm(sim26.msm)
rm(sim27.msm)
rm(sim28.msm)
rm(sim29.msm)
rm(sim30.msm)
}


# SENSITIVITY ANALYSIS Utilities and costs cmo 52 -------------------------

{
# Utility value for being in ICU:	0.66, 0.39-0.93,	Beta,	(Cost effectiveness of antimicrobial catheters in the intensive care unit: addressing uncertainty in the decision)
# Utility value for highly invasive care:	0.55,	0.39-0.71,	(Beta,	Comparison of Health-Related Quality of Life Preferences Between Physicians and Cirrhotic Patients: Implications for Cost–Utility Analysesin Chronic Liver Disease)
# Utility value for paliative care:	0.28,	0.23-0.35,	Beta,	(Ultrasound Elastography for Fibrosis Surveillance Is Cos tEffective in Patients with Chronic Hepatitis C Virus in the UK)

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-

# sources: BIDMC - Patient Financial Services & HMFP - Finance

# utilities
u_nhic<-0.66
u_hic<-0.55
u_cmo<-0.28
u_discharge<-1
u_died<-1

# 1 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df1.sim<-df1.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df1.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df1.sim$day>0, 340,0))+4650+(ifelse(df1.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00 # assumping death at beggining of day and no extra costs 

df1.sim<-df1.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df1.summary<- df1.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= mean(utility),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df1.overall<- df1.summary[!duplicated(df1.summary$id), ]
#
df1.overallcmo52_u_mean<-mean(df1.summary$utility_mean)
df1.overallcmo52_c_mean<-mean(df1.summary$costs_sum)

# Mean survival utility and costs at N dayss
df1.survival<-df1.summary %>% filter(state%in%4)
df1.senscmo52_u_mean<-mean(df1.survival$utility_mean)
df1.senscmo52_c_mean<-mean(df1.survival$costs_sum)

#-------------------------------------------------------------------------------

# 2 day hic ////////////////////////////////////////////////////////////////////

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-

# Create flags for sequential days  
df2.sim<-df2.sim %>% mutate(day=(streak_run(id, k=1000)-1))

# Create costs
c_nhic<-3805+662+(ifelse(df2.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df2.sim$day>0, 340,0))+4650+(ifelse(df2.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*1)+(340*1)+(724*1)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC 

df2.sim<-df2.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df2.summary<- df2.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))), # adding extra days of utility given HIC
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df2.overall<- df2.summary[!duplicated(df2.summary$id), ]
#
df2.overallcmo52_u_mean<-mean(df2.summary$utility_mean)
df2.overallcmo52_c_mean<-mean(df2.summary$costs_sum)

# Mean survival utility and costs at N dayss
df2.survival<-df2.summary %>% filter(state%in%4)
df2.senscmo52_u_mean<-mean(df2.survival$utility_mean)
df2.senscmo52_c_mean<-mean(df2.survival$costs_sum)

#-------------------------------------------------------------------------------

# 3 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df3.sim<-df3.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df3.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df3.sim$day>0, 340,0))+4650+(ifelse(df3.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*2)+(340*2)+(724*2))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC

df3.sim<-df3.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df3.summary<- df3.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df3.overall<- df3.summary[!duplicated(df3.summary$id), ]
#
df3.overallcmo52_u_mean<-mean(df3.summary$utility_mean)
df3.overallcmo52_c_mean<-mean(df3.summary$costs_sum)

# Mean survival utility and costs at N dayss
df3.survival<-df3.summary %>% filter(state%in%4)
df3.senscmo52_u_mean<-mean(df3.survival$utility_mean)
df3.senscmo52_c_mean<-mean(df3.survival$costs_sum)

#-------------------------------------------------------------------------------

# 4 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df4.sim<-df4.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df4.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df4.sim$day>0, 340,0))+4650+(ifelse(df4.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*3)+(340*3)+(724*3))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df4.sim<-df4.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df4.summary<- df4.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df4.overall<- df4.summary[!duplicated(df4.summary$id), ]
#
df4.overallcmo52_u_mean<-mean(df4.summary$utility_mean)
df4.overallcmo52_c_mean<-mean(df4.summary$costs_sum)

# Mean survival utility and costs at N dayss
df4.survival<-df4.summary %>% filter(state%in%4)
df4.senscmo52_u_mean<-mean(df4.survival$utility_mean)
df4.senscmo52_c_mean<-mean(df4.survival$costs_sum)

#-------------------------------------------------------------------------------

# 5 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df5.sim<-df5.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df5.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df5.sim$day>0, 340,0))+4650+(ifelse(df5.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*4)+(340*4)+(724*4))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df5.sim<-df5.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df5.summary<- df5.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df5.overall<- df5.summary[!duplicated(df5.summary$id), ]
#
df5.overallcmo52_u_mean<-mean(df5.summary$utility_mean)
df5.overallcmo52_c_mean<-mean(df5.summary$costs_sum)

# Mean survival utility and costs at N dayss
df5.survival<-df5.summary %>% filter(state%in%4)
df5.senscmo52_u_mean<-mean(df5.survival$utility_mean)
df5.senscmo52_c_mean<-mean(df5.survival$costs_sum)

#-------------------------------------------------------------------------------

# 6 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df6.sim<-df6.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df6.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df6.sim$day>0, 340,0))+4650+(ifelse(df6.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*5)+(340*5)+(724*5))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df6.sim<-df6.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df6.summary<- df6.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df6.overall<- df6.summary[!duplicated(df6.summary$id), ]
#
df6.overallcmo52_u_mean<-mean(df6.summary$utility_mean)
df6.overallcmo52_c_mean<-mean(df6.summary$costs_sum)

# Mean survival utility and costs at N dayss
df6.survival<-df6.summary %>% filter(state%in%4)
df6.senscmo52_u_mean<-mean(df6.survival$utility_mean)
df6.senscmo52_c_mean<-mean(df6.survival$costs_sum)

#-------------------------------------------------------------------------------

# 7 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df7.sim<-df7.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df7.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df7.sim$day>0, 340,0))+4650+(ifelse(df7.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*6)+(340*6)+(724*6))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df7.sim<-df7.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df7.summary<- df7.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df7.overall<- df7.summary[!duplicated(df7.summary$id), ]
#
df7.overallcmo52_u_mean<-mean(df7.summary$utility_mean)
df7.overallcmo52_c_mean<-mean(df7.summary$costs_sum)

# Mean survival utility and costs at N dayss
df7.survival<-df7.summary %>% filter(state%in%4)
df7.senscmo52_u_mean<-mean(df7.survival$utility_mean)
df7.senscmo52_c_mean<-mean(df7.survival$costs_sum)

#-------------------------------------------------------------------------------

# 8 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df8.sim<-df8.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df8.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df8.sim$day>0, 340,0))+4650+(ifelse(df8.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*7)+(340*7)+(724*7)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df8.sim<-df8.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df8.summary<- df8.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df8.overall<- df8.summary[!duplicated(df8.summary$id), ]
#
df8.overallcmo52_u_mean<-mean(df8.summary$utility_mean)
df8.overallcmo52_c_mean<-mean(df8.summary$costs_sum)

# Mean survival utility and costs at N dayss
df8.survival<-df8.summary %>% filter(state%in%4)
df8.senscmo52_u_mean<-mean(df8.survival$utility_mean)
df8.senscmo52_c_mean<-mean(df8.survival$costs_sum)

#-------------------------------------------------------------------------------

# 9 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df9.sim<-df9.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df9.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df9.sim$day>0, 340,0))+4650+(ifelse(df9.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*8)+(340*8)+(724*8))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df9.sim<-df9.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df9.summary<- df9.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df9.overall<- df9.summary[!duplicated(df9.summary$id), ]
#
df9.overallcmo52_u_mean<-mean(df9.summary$utility_mean)
df9.overallcmo52_c_mean<-mean(df9.summary$costs_sum)

# Mean survival utility and costs at N dayss
df9.survival<-df9.summary %>% filter(state%in%4)
df9.senscmo52_u_mean<-mean(df9.survival$utility_mean)
df9.senscmo52_c_mean<-mean(df9.survival$costs_sum)

#-------------------------------------------------------------------------------

# 10 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df10.sim<-df10.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df10.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df10.sim$day>0, 340,0))+4650+(ifelse(df10.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*9)+(340*9)+(724*9))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df10.sim<-df10.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df10.summary<- df10.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df10.overall<- df10.summary[!duplicated(df10.summary$id), ]
#
df10.overallcmo52_u_mean<-mean(df10.summary$utility_mean)
df10.overallcmo52_c_mean<-mean(df10.summary$costs_sum)

# Mean survival utility and costs at N dayss
df10.survival<-df10.summary %>% filter(state%in%4)
df10.senscmo52_u_mean<-mean(df10.survival$utility_mean)
df10.senscmo52_c_mean<-mean(df10.survival$costs_sum)

#-------------------------------------------------------------------------------

# 11 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df11.sim<-df11.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df11.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df11.sim$day>0, 340,0))+4650+(ifelse(df11.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*10)+(340*10)+(724*10))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df11.sim<-df11.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df11.summary<- df11.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df11.overall<- df11.summary[!duplicated(df11.summary$id), ]
#
df11.overallcmo52_u_mean<-mean(df11.summary$utility_mean)
df11.overallcmo52_c_mean<-mean(df11.summary$costs_sum)

# Mean survival utility and costs at N dayss
df11.survival<-df11.summary %>% filter(state%in%4)
df11.senscmo52_u_mean<-mean(df11.survival$utility_mean)
df11.senscmo52_c_mean<-mean(df11.survival$costs_sum)

#-------------------------------------------------------------------------------

# 12 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df12.sim<-df12.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df12.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df12.sim$day>0, 340,0))+4650+(ifelse(df12.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*11)+(340*11)+(724*11))   # assumping death at beggining of day and no extra costs 

df12.sim<-df12.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df12.summary<- df12.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df12.overall<- df12.summary[!duplicated(df12.summary$id), ]
#
df12.overallcmo52_u_mean<-mean(df12.summary$utility_mean)
df12.overallcmo52_c_mean<-mean(df12.summary$costs_sum)

# Mean survival utility and costs at N dayss
df12.survival<-df12.summary %>% filter(state%in%4)
df12.senscmo52_u_mean<-mean(df12.survival$utility_mean)
df12.senscmo52_c_mean<-mean(df12.survival$costs_sum)

#-------------------------------------------------------------------------------

# 13 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df13.sim<-df13.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df13.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df13.sim$day>0, 340,0))+4650+(ifelse(df13.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*12)+(340*12)+(724*12)) # assumping death at beggining of day and no extra costs 

df13.sim<-df13.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df13.summary<- df13.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df13.overall<- df13.summary[!duplicated(df13.summary$id), ]
#
df13.overallcmo52_u_mean<-mean(df13.summary$utility_mean)
df13.overallcmo52_c_mean<-mean(df13.summary$costs_sum)

# Mean survival utility and costs at N dayss
df13.survival<-df13.summary %>% filter(state%in%4)
df13.senscmo52_u_mean<-mean(df13.survival$utility_mean)
df13.senscmo52_c_mean<-mean(df13.survival$costs_sum)

#-------------------------------------------------------------------------------

# 14 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df14.sim<-df14.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df14.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df14.sim$day>0, 340,0))+4650+(ifelse(df14.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*13)+(340*13)+(724*13))  # assumping death at beggining of day and no extra costs 

df14.sim<-df14.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df14.summary<- df14.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df14.overall<- df14.summary[!duplicated(df14.summary$id), ]
#
df14.overallcmo52_u_mean<-mean(df14.summary$utility_mean)
df14.overallcmo52_c_mean<-mean(df14.summary$costs_sum)

# Mean survival utility and costs at N dayss
df14.survival<-df14.summary %>% filter(state%in%4)
df14.senscmo52_u_mean<-mean(df14.survival$utility_mean)
df14.senscmo52_c_mean<-mean(df14.survival$costs_sum)

#-------------------------------------------------------------------------------

# 15 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df15.sim<-df15.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df15.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df15.sim$day>0, 340,0))+4650+(ifelse(df15.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*14)+(340*14)+(724*14))  # assumping death at beggining of day and no extra costs 

df15.sim<-df15.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df15.summary<- df15.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df15.overall<- df15.summary[!duplicated(df15.summary$id), ]
#
df15.overallcmo52_u_mean<-mean(df15.summary$utility_mean)
df15.overallcmo52_c_mean<-mean(df15.summary$costs_sum)

# Mean survival utility and costs at N dayss
df15.survival<-df15.summary %>% filter(state%in%4)
df15.senscmo52_u_mean<-mean(df15.survival$utility_mean)
df15.senscmo52_c_mean<-mean(df15.survival$costs_sum)

#-------------------------------------------------------------------------------

# 16 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df16.sim<-df16.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df16.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df16.sim$day>0, 340,0))+4650+(ifelse(df16.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*15)+(340*15)+(724*15))  # assumping death at beggining of day and no extra costs 

df16.sim<-df16.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df16.summary<- df16.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df16.overall<- df16.summary[!duplicated(df16.summary$id), ]
#
df16.overallcmo52_u_mean<-mean(df16.summary$utility_mean)
df16.overallcmo52_c_mean<-mean(df16.summary$costs_sum)

# Mean survival utility and costs at N dayss
df16.survival<-df16.summary %>% filter(state%in%4)
df16.senscmo52_u_mean<-mean(df16.survival$utility_mean)
df16.senscmo52_c_mean<-mean(df16.survival$costs_sum)

#-------------------------------------------------------------------------------

# 17 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df17.sim<-df17.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df17.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df17.sim$day>0, 340,0))+4650+(ifelse(df17.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*16)+(340*16)+(724*16))  # assumping death at beggining of day and no extra costs 

df17.sim<-df17.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df17.summary<- df17.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df17.overall<- df17.summary[!duplicated(df17.summary$id), ]
#
df17.overallcmo52_u_mean<-mean(df17.summary$utility_mean)
df17.overallcmo52_c_mean<-mean(df17.summary$costs_sum)

# Mean survival utility and costs at N dayss
df17.survival<-df17.summary %>% filter(state%in%4)
df17.senscmo52_u_mean<-mean(df17.survival$utility_mean)
df17.senscmo52_c_mean<-mean(df17.survival$costs_sum)

#-------------------------------------------------------------------------------

# 18 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df18.sim<-df18.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df18.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df18.sim$day>0, 340,0))+4650+(ifelse(df18.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*17)+(340*17)+(724*17))  # assumping death at beggining of day and no extra costs 

df18.sim<-df18.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df18.summary<- df18.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df18.overall<- df18.summary[!duplicated(df18.summary$id), ]
#
df18.overallcmo52_u_mean<-mean(df18.summary$utility_mean)
df18.overallcmo52_c_mean<-mean(df18.summary$costs_sum)

# Mean survival utility and costs at N dayss
df18.survival<-df18.summary %>% filter(state%in%4)
df18.senscmo52_u_mean<-mean(df18.survival$utility_mean)
df18.senscmo52_c_mean<-mean(df18.survival$costs_sum)

#-------------------------------------------------------------------------------

# 19 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df19.sim<-df19.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df19.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df19.sim$day>0, 340,0))+4650+(ifelse(df19.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*18)+(340*18)+(724*18))  # assumping death at beggining of day and no extra costs 

df19.sim<-df19.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df19.summary<- df19.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df19.overall<- df19.summary[!duplicated(df19.summary$id), ]
#
df19.overallcmo52_u_mean<-mean(df19.summary$utility_mean)
df19.overallcmo52_c_mean<-mean(df19.summary$costs_sum)

# Mean survival utility and costs at N dayss
df19.survival<-df19.summary %>% filter(state%in%4)
df19.senscmo52_u_mean<-mean(df19.survival$utility_mean)
df19.senscmo52_c_mean<-mean(df19.survival$costs_sum)

#-------------------------------------------------------------------------------

# 20 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df20.sim<-df20.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df20.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df20.sim$day>0, 340,0))+4650+(ifelse(df20.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*19)+(340*19)+(724*19))  # assumping death at beggining of day and no extra costs 

df20.sim<-df20.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df20.summary<- df20.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df20.overall<- df20.summary[!duplicated(df20.summary$id), ]
#
df20.overallcmo52_u_mean<-mean(df20.summary$utility_mean)
df20.overallcmo52_c_mean<-mean(df20.summary$costs_sum)

# Mean survival utility and costs at N dayss
df20.survival<-df20.summary %>% filter(state%in%4)
df20.senscmo52_u_mean<-mean(df20.survival$utility_mean)
df20.senscmo52_c_mean<-mean(df20.survival$costs_sum)

#-------------------------------------------------------------------------------

# 21 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df21.sim<-df21.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df21.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df21.sim$day>0, 340,0))+4650+(ifelse(df21.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*20)+(340*20)+(724*20))  # assumping death at beggining of day and no extra costs 

df21.sim<-df21.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df21.summary<- df21.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df21.overall<- df21.summary[!duplicated(df21.summary$id), ]
#
df21.overallcmo52_u_mean<-mean(df21.summary$utility_mean)
df21.overallcmo52_c_mean<-mean(df21.summary$costs_sum)

# Mean survival utility and costs at N dayss
df21.survival<-df21.summary %>% filter(state%in%4)
df21.senscmo52_u_mean<-mean(df21.survival$utility_mean)
df21.senscmo52_c_mean<-mean(df21.survival$costs_sum)

#-------------------------------------------------------------------------------

# 22 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df22.sim<-df22.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df22.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df22.sim$day>0, 340,0))+4650+(ifelse(df22.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*21)+(340*21)+(724*21)) # assumping death at beggining of day and no extra costs 

df22.sim<-df22.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df22.summary<- df22.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df22.overall<- df22.summary[!duplicated(df22.summary$id), ]
#
df22.overallcmo52_u_mean<-mean(df22.summary$utility_mean)
df22.overallcmo52_c_mean<-mean(df22.summary$costs_sum)

# Mean survival utility and costs at N dayss
df22.survival<-df22.summary %>% filter(state%in%4)
df22.senscmo52_u_mean<-mean(df22.survival$utility_mean)
df22.senscmo52_c_mean<-mean(df22.survival$costs_sum)

#-------------------------------------------------------------------------------

# 23 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df23.sim<-df23.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df23.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df23.sim$day>0, 340,0))+4650+(ifelse(df23.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*22)+(340*22)+(724*22)) # assumping death at beggining of day and no extra costs 

df23.sim<-df23.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df23.summary<- df23.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df23.overall<- df23.summary[!duplicated(df23.summary$id), ]
#
df23.overallcmo52_u_mean<-mean(df23.summary$utility_mean)
df23.overallcmo52_c_mean<-mean(df23.summary$costs_sum)

# Mean survival utility and costs at N dayss
df23.survival<-df23.summary %>% filter(state%in%4)
df23.senscmo52_u_mean<-mean(df23.survival$utility_mean)
df23.senscmo52_c_mean<-mean(df23.survival$costs_sum)

#-------------------------------------------------------------------------------

# 24 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df24.sim<-df24.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df24.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df24.sim$day>0, 340,0))+4650+(ifelse(df24.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*23)+(340*23)+(724*23))  # assumping death at beggining of day and no extra costs 

df24.sim<-df24.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df24.summary<- df24.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df24.overall<- df24.summary[!duplicated(df24.summary$id), ]
#
df24.overallcmo52_u_mean<-mean(df24.summary$utility_mean)
df24.overallcmo52_c_mean<-mean(df24.summary$costs_sum)

# Mean survival utility and costs at N dayss
df24.survival<-df24.summary %>% filter(state%in%4)
df24.senscmo52_u_mean<-mean(df24.survival$utility_mean)
df24.senscmo52_c_mean<-mean(df24.survival$costs_sum)

#-------------------------------------------------------------------------------

# 25 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df25.sim<-df25.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df25.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df25.sim$day>0, 340,0))+4650+(ifelse(df25.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*24)+(340*24)+(724*24)) # assumping death at beggining of day and no extra costs 

df25.sim<-df25.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df25.summary<- df25.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df25.overall<- df25.summary[!duplicated(df25.summary$id), ]
#
df25.overallcmo52_u_mean<-mean(df25.summary$utility_mean)
df25.overallcmo52_c_mean<-mean(df25.summary$costs_sum)

# Mean survival utility and costs at N dayss
df25.survival<-df25.summary %>% filter(state%in%4)
df25.senscmo52_u_mean<-mean(df25.survival$utility_mean)
df25.senscmo52_c_mean<-mean(df25.survival$costs_sum)

#-------------------------------------------------------------------------------

# 26 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df26.sim<-df26.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df26.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df26.sim$day>0, 340,0))+4650+(ifelse(df26.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*25)+(340*25)+(724*25))  # assumping death at beggining of day and no extra costs 

df26.sim<-df26.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df26.summary<- df26.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df26.overall<- df26.summary[!duplicated(df26.summary$id), ]
#
df26.overallcmo52_u_mean<-mean(df26.summary$utility_mean)
df26.overallcmo52_c_mean<-mean(df26.summary$costs_sum)

# Mean survival utility and costs at N dayss
df26.survival<-df26.summary %>% filter(state%in%4)
df26.senscmo52_u_mean<-mean(df26.survival$utility_mean)
df26.senscmo52_c_mean<-mean(df26.survival$costs_sum)

#-------------------------------------------------------------------------------

# 27 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df27.sim<-df27.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df27.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df27.sim$day>0, 340,0))+4650+(ifelse(df27.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*26)+(340*26)+(724*26))  # assumping death at beggining of day and no extra costs 

df27.sim<-df27.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df27.summary<- df27.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df27.overall<- df27.summary[!duplicated(df27.summary$id), ]
#
df27.overallcmo52_u_mean<-mean(df27.summary$utility_mean)
df27.overallcmo52_c_mean<-mean(df27.summary$costs_sum)

# Mean survival utility and costs at N dayss
df27.survival<-df27.summary %>% filter(state%in%4)
df27.senscmo52_u_mean<-mean(df27.survival$utility_mean)
df27.senscmo52_c_mean<-mean(df27.survival$costs_sum)

#-------------------------------------------------------------------------------

# 28 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df28.sim<-df28.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df28.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df28.sim$day>0, 340,0))+4650+(ifelse(df28.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*27)+(340*27)+(724*27))  # assumping death at beggining of day and no extra costs 

df28.sim<-df28.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df28.summary<- df28.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df28.overall<- df28.summary[!duplicated(df28.summary$id), ]
#
df28.overallcmo52_u_mean<-mean(df28.summary$utility_mean)
df28.overallcmo52_c_mean<-mean(df28.summary$costs_sum)

# Mean survival utility and costs at N dayss
df28.survival<-df28.summary %>% filter(state%in%4)
df28.senscmo52_u_mean<-mean(df28.survival$utility_mean)
df28.senscmo52_c_mean<-mean(df28.survival$costs_sum)

#-------------------------------------------------------------------------------

# 29 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df29.sim<-df29.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df29.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df29.sim$day>0, 340,0))+4650+(ifelse(df29.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*28)+(340*28)+(724*28))  # assumping death at beggining of day and no extra costs 

df29.sim<-df29.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df29.summary<- df29.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean=(sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df29.overall<- df29.summary[!duplicated(df29.summary$id), ]
#
df29.overallcmo52_u_mean<-mean(df29.summary$utility_mean)
df29.overallcmo52_c_mean<-mean(df29.summary$costs_sum)

# Mean survival utility and costs at N dayss
df29.survival<-df29.summary %>% filter(state%in%4)
df29.senscmo52_u_mean<-mean(df29.survival$utility_mean)
df29.senscmo52_c_mean<-mean(df29.survival$costs_sum)

#-------------------------------------------------------------------------------

# 30 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df30.sim<-df30.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df30.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df30.sim$day>0, 340,0))+4650+(ifelse(df30.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*29)+(340*29)+(724*29))  # assumping death at beggining of day and no extra costs 

df30.sim<-df30.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df30.summary<- df30.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df30.overall<- df30.summary[!duplicated(df30.summary$id), ]
#
df30.overallcmo52_u_mean<-mean(df30.summary$utility_mean)
df30.overallcmo52_c_mean<-mean(df30.summary$costs_sum)

# Mean survival utility and costs at N dayss
df30.survival<-df30.summary %>% filter(state%in%4)
df30.senscmo52_u_mean<-mean(df30.survival$utility_mean)
df30.senscmo52_c_mean<-mean(df30.survival$costs_sum)


df1.senscmo52<-df1.summary
df2.senscmo52<-df2.summary
df3.senscmo52<-df3.summary
df4.senscmo52<-df4.summary
df5.senscmo52<-df5.summary
df6.senscmo52<-df6.summary
df7.senscmo52<-df7.summary
df8.senscmo52<-df8.summary
df9.senscmo52<-df9.summary
df10.senscmo52<-df10.summary
df11.senscmo52<-df11.summary
df12.senscmo52<-df12.summary
df13.senscmo52<-df13.summary
df14.senscmo52<-df14.summary
df15.senscmo52<-df15.summary
df16.senscmo52<-df16.summary
df17.senscmo52<-df17.summary
df18.senscmo52<-df18.summary
df19.senscmo52<-df19.summary
df20.senscmo52<-df20.summary
df21.senscmo52<-df21.summary
df22.senscmo52<-df22.summary
df23.senscmo52<-df23.summary
df24.senscmo52<-df24.summary
df25.senscmo52<-df25.summary
df26.senscmo52<-df26.summary
df27.senscmo52<-df27.summary
df28.senscmo52<-df28.summary
df29.senscmo52<-df29.summary
df30.senscmo52<-df30.summary



rm(df1.sim)
rm(df2.sim)
rm(df3.sim)
rm(df4.sim)
rm(df5.sim)
rm(df6.sim)
rm(df7.sim)
rm(df8.sim)
rm(df9.sim)
rm(df10.sim)
rm(df11.sim)
rm(df12.sim)
rm(df13.sim)
rm(df14.sim)
rm(df15.sim)
rm(df16.sim)
rm(df17.sim)
rm(df18.sim)
rm(df19.sim)
rm(df20.sim)
rm(df21.sim)
rm(df22.sim)
rm(df23.sim)
rm(df24.sim)
rm(df25.sim)
rm(df26.sim)
rm(df27.sim)
rm(df28.sim)
rm(df29.sim)
rm(df30.sim)
}

# 1 way sensitivity cmo 52 case results ------------------------------------------------------------
senscmo52.overall_c_vect<-c()
for (i in 1:30){
  senscmo52.overall_c_vect[i]<-get(paste("df", i, ".overallcmo52_c_mean",sep = ""))
}

senscmo52.overall_u_vect<-c()
for (i in 1:30){
  senscmo52.overall_u_vect[i]<-get(paste("df", i, ".overallcmo52_u_mean",sep = ""))
}

senscmo52.survival_c_vect<-c()
for (i in 1:30){
  senscmo52.survival_c_vect[i]<-get(paste("df", i, ".senscmo52_c_mean",sep = ""))
}

senscmo52.survival_u_vect<-c()
for (i in 1:30){
  senscmo52.survival_u_vect[i]<-get(paste("df", i, ".senscmo52_u_mean",sep = ""))
}

senscmo52.ce_results<- matrix(c(senscmo52.overall_c_vect,senscmo52.overall_u_vect,senscmo52.survival_c_vect,senscmo52.survival_u_vect), nrow=30, byrow=FALSE)
colnames(senscmo52.ce_results) <- c("overall_c","overall_u","survival_c","survival_u")
#----

# markov objects  cmo 76----
{
  mo1.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76), name="MarkovChain Q1")
  mo2.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_2), name="MarkovChain Q1")
  mo3.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_3), name="MarkovChain Q1")
  mo4.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_4), name="MarkovChain Q1")
  mo5.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_5), name="MarkovChain Q1")
  mo6.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_6), name="MarkovChain Q1")
  mo7.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_7), name="MarkovChain Q1")  
  mo8.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_8), name="MarkovChain Q1")
  mo9.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_9), name="MarkovChain Q1")
  mo10.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_10), name="MarkovChain Q1")
  mo11.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_11), name="MarkovChain Q1")
  mo12.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_12), name="MarkovChain Q1")
  mo13.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_13), name="MarkovChain Q1")
  mo14.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_14), name="MarkovChain Q1")
  mo15.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_15), name="MarkovChain Q1")
  mo16.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_16), name="MarkovChain Q1")
  mo17.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_17), name="MarkovChain Q1")
  mo18.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_18), name="MarkovChain Q1")
  mo19.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_19), name="MarkovChain Q1")
  mo20.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_20), name="MarkovChain Q1")
  mo21.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_21), name="MarkovChain Q1")
  mo22.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_22), name="MarkovChain Q1")
  mo23.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_23), name="MarkovChain Q1")
  mo24.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_24), name="MarkovChain Q1")
  mo25.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_25), name="MarkovChain Q1")
  mo26.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_26), name="MarkovChain Q1")
  mo27.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_27), name="MarkovChain Q1")
  mo28.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_28), name="MarkovChain Q1")
  mo29.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_29), name="MarkovChain Q1")
  mo30.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo76_30), name="MarkovChain Q1")
  

rm(example.df)
rm(df1.msm)
rm(df1.ptm)
rm(df1.tm)
}

#

# SENSITIVITY ANALYSIS first order monte carlo simulations cmo 76 ---------


B <- 100
N <- 30
{
sim1.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo1.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim2.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo2.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim3.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo3.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim4.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo4.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim5.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo5.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim6.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo6.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim7.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo7.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim8.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo8.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim9.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo9.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim10.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo10.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim11.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo11.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim12.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo12.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim13.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo13.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim14.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo14.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim15.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo15.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim16.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo16.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim17.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo17.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim18.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo18.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim19.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo19.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim20.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo20.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim21.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo21.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim22.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo22.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim23.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo23.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim24.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo24.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim25.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo25.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim26.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo26.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim27.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo27.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim28.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo28.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim29.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo29.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim30.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo30.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})


}
# 1 non-agressive
# 2 aggressive
# 3 cmo
# 4 discharged
# 5 death

# Convert simulations into data frames 
{
df1.sim<- as.data.frame(sim1.msm)
df1.sim<-df1.sim %>% gather(key = "id", value = "state")
df1.sim<-df1.sim %>% mutate(col1=streak_run(state, k=1000))
df1.sim<-df1.sim %>% filter(!(state=="4" & col1!=1))
df1.sim<-df1.sim %>% filter(!(state=="5" & col1!=1))

df2.sim<- as.data.frame(sim2.msm)
df2.sim<-df2.sim %>% gather(key = "id", value = "state")
df2.sim<-df2.sim %>% mutate(col1=streak_run(state, k=1000))
df2.sim<-df2.sim %>% filter(!(state=="4" & col1!=1))
df2.sim<-df2.sim %>% filter(!(state=="5" & col1!=1))

df3.sim<- as.data.frame(sim3.msm)
df3.sim<-df3.sim %>% gather(key = "id", value = "state")
df3.sim<-df3.sim %>% mutate(col1=streak_run(state, k=1000))
df3.sim<-df3.sim %>% filter(!(state=="4" & col1!=1))
df3.sim<-df3.sim %>% filter(!(state=="5" & col1!=1))

df4.sim<- as.data.frame(sim4.msm)
df4.sim<-df4.sim %>% gather(key = "id", value = "state")
df4.sim<-df4.sim %>% mutate(col1=streak_run(state, k=1000))
df4.sim<-df4.sim %>% filter(!(state=="4" & col1!=1))
df4.sim<-df4.sim %>% filter(!(state=="5" & col1!=1))

df5.sim<- as.data.frame(sim5.msm)
df5.sim<-df5.sim %>% gather(key = "id", value = "state")
df5.sim<-df5.sim %>% mutate(col1=streak_run(state, k=1000))
df5.sim<-df5.sim %>% filter(!(state=="4" & col1!=1))
df5.sim<-df5.sim %>% filter(!(state=="5" & col1!=1))

df6.sim<- as.data.frame(sim6.msm)
df6.sim<-df6.sim %>% gather(key = "id", value = "state")
df6.sim<-df6.sim %>% mutate(col1=streak_run(state, k=1000))
df6.sim<-df6.sim %>% filter(!(state=="4" & col1!=1))
df6.sim<-df6.sim %>% filter(!(state=="5" & col1!=1))

df7.sim<- as.data.frame(sim7.msm)
df7.sim<-df7.sim %>% gather(key = "id", value = "state")
df7.sim<-df7.sim %>% mutate(col1=streak_run(state, k=1000))
df7.sim<-df7.sim %>% filter(!(state=="4" & col1!=1))
df7.sim<-df7.sim %>% filter(!(state=="5" & col1!=1))

df8.sim<- as.data.frame(sim8.msm)
df8.sim<-df8.sim %>% gather(key = "id", value = "state")
df8.sim<-df8.sim %>% mutate(col1=streak_run(state, k=1000))
df8.sim<-df8.sim %>% filter(!(state=="4" & col1!=1))
df8.sim<-df8.sim %>% filter(!(state=="5" & col1!=1))

df9.sim<- as.data.frame(sim9.msm)
df9.sim<-df9.sim %>% gather(key = "id", value = "state")
df9.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df9.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df9.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df10.sim<- as.data.frame(sim10.msm)
df10.sim<-df9.sim %>% gather(key = "id", value = "state")
df10.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df10.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df10.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df11.sim<- as.data.frame(sim11.msm)
df11.sim<-df11.sim %>% gather(key = "id", value = "state")
df11.sim<-df11.sim %>% mutate(col1=streak_run(state, k=1000))
df11.sim<-df11.sim %>% filter(!(state=="4" & col1!=1))
df11.sim<-df11.sim %>% filter(!(state=="5" & col1!=1))

df12.sim<- as.data.frame(sim12.msm)
df12.sim<-df12.sim %>% gather(key = "id", value = "state")
df12.sim<-df12.sim %>% mutate(col1=streak_run(state, k=1000))
df12.sim<-df12.sim %>% filter(!(state=="4" & col1!=1))
df12.sim<-df12.sim %>% filter(!(state=="5" & col1!=1))

df13.sim<- as.data.frame(sim13.msm)
df13.sim<-df13.sim %>% gather(key = "id", value = "state")
df13.sim<-df13.sim %>% mutate(col1=streak_run(state, k=1000))
df13.sim<-df13.sim %>% filter(!(state=="4" & col1!=1))
df13.sim<-df13.sim %>% filter(!(state=="5" & col1!=1))

df14.sim<- as.data.frame(sim14.msm)
df14.sim<-df14.sim %>% gather(key = "id", value = "state")
df14.sim<-df14.sim %>% mutate(col1=streak_run(state, k=1000))
df14.sim<-df14.sim %>% filter(!(state=="4" & col1!=1))
df14.sim<-df14.sim %>% filter(!(state=="5" & col1!=1))

df15.sim<- as.data.frame(sim15.msm)
df15.sim<-df15.sim %>% gather(key = "id", value = "state")
df15.sim<-df15.sim %>% mutate(col1=streak_run(state, k=1000))
df15.sim<-df15.sim %>% filter(!(state=="4" & col1!=1))
df15.sim<-df15.sim %>% filter(!(state=="5" & col1!=1))

df16.sim<- as.data.frame(sim16.msm)
df16.sim<-df16.sim %>% gather(key = "id", value = "state")
df16.sim<-df16.sim %>% mutate(col1=streak_run(state, k=1000))
df16.sim<-df16.sim %>% filter(!(state=="4" & col1!=1))
df16.sim<-df16.sim %>% filter(!(state=="5" & col1!=1))

df17.sim<- as.data.frame(sim17.msm)
df17.sim<-df17.sim %>% gather(key = "id", value = "state")
df17.sim<-df17.sim %>% mutate(col1=streak_run(state, k=1000))
df17.sim<-df17.sim %>% filter(!(state=="4" & col1!=1))
df17.sim<-df17.sim %>% filter(!(state=="5" & col1!=1))

df18.sim<- as.data.frame(sim18.msm)
df18.sim<-df18.sim %>% gather(key = "id", value = "state")
df18.sim<-df18.sim %>% mutate(col1=streak_run(state, k=1000))
df18.sim<-df18.sim %>% filter(!(state=="4" & col1!=1))
df18.sim<-df18.sim %>% filter(!(state=="5" & col1!=1))

df19.sim<- as.data.frame(sim19.msm)
df19.sim<-df19.sim %>% gather(key = "id", value = "state")
df19.sim<-df19.sim %>% mutate(col1=streak_run(state, k=1000))
df19.sim<-df19.sim %>% filter(!(state=="4" & col1!=1))
df19.sim<-df19.sim %>% filter(!(state=="5" & col1!=1))

df20.sim<- as.data.frame(sim20.msm)
df20.sim<-df9.sim %>% gather(key = "id", value = "state")
df20.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df20.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df20.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df21.sim<- as.data.frame(sim21.msm)
df21.sim<-df21.sim %>% gather(key = "id", value = "state")
df21.sim<-df21.sim %>% mutate(col1=streak_run(state, k=1000))
df21.sim<-df21.sim %>% filter(!(state=="4" & col1!=1))
df21.sim<-df21.sim %>% filter(!(state=="5" & col1!=1))

df22.sim<- as.data.frame(sim22.msm)
df22.sim<-df22.sim %>% gather(key = "id", value = "state")
df22.sim<-df22.sim %>% mutate(col1=streak_run(state, k=1000))
df22.sim<-df22.sim %>% filter(!(state=="4" & col1!=1))
df22.sim<-df22.sim %>% filter(!(state=="5" & col1!=1))

df23.sim<- as.data.frame(sim23.msm)
df23.sim<-df23.sim %>% gather(key = "id", value = "state")
df23.sim<-df23.sim %>% mutate(col1=streak_run(state, k=1000))
df23.sim<-df23.sim %>% filter(!(state=="4" & col1!=1))
df23.sim<-df23.sim %>% filter(!(state=="5" & col1!=1))

df24.sim<- as.data.frame(sim24.msm)
df24.sim<-df24.sim %>% gather(key = "id", value = "state")
df24.sim<-df24.sim %>% mutate(col1=streak_run(state, k=1000))
df24.sim<-df24.sim %>% filter(!(state=="4" & col1!=1))
df24.sim<-df24.sim %>% filter(!(state=="5" & col1!=1))

df25.sim<- as.data.frame(sim25.msm)
df25.sim<-df25.sim %>% gather(key = "id", value = "state")
df25.sim<-df25.sim %>% mutate(col1=streak_run(state, k=1000))
df25.sim<-df25.sim %>% filter(!(state=="4" & col1!=1))
df25.sim<-df25.sim %>% filter(!(state=="5" & col1!=1))

df26.sim<- as.data.frame(sim26.msm)
df26.sim<-df26.sim %>% gather(key = "id", value = "state")
df26.sim<-df26.sim %>% mutate(col1=streak_run(state, k=1000))
df26.sim<-df26.sim %>% filter(!(state=="4" & col1!=1))
df26.sim<-df26.sim %>% filter(!(state=="5" & col1!=1))

df27.sim<- as.data.frame(sim27.msm)
df27.sim<-df27.sim %>% gather(key = "id", value = "state")
df27.sim<-df27.sim %>% mutate(col1=streak_run(state, k=1000))
df27.sim<-df27.sim %>% filter(!(state=="4" & col1!=1))
df27.sim<-df27.sim %>% filter(!(state=="5" & col1!=1))

df28.sim<- as.data.frame(sim28.msm)
df28.sim<-df28.sim %>% gather(key = "id", value = "state")
df28.sim<-df28.sim %>% mutate(col1=streak_run(state, k=1000))
df28.sim<-df28.sim %>% filter(!(state=="4" & col1!=1))
df28.sim<-df28.sim %>% filter(!(state=="5" & col1!=1))

df29.sim<- as.data.frame(sim29.msm)
df29.sim<-df29.sim %>% gather(key = "id", value = "state")
df29.sim<-df29.sim %>% mutate(col1=streak_run(state, k=1000))
df29.sim<-df29.sim %>% filter(!(state=="4" & col1!=1))
df29.sim<-df29.sim %>% filter(!(state=="5" & col1!=1))

df30.sim<- as.data.frame(sim30.msm)
df30.sim<-df30.sim %>% gather(key = "id", value = "state")
df30.sim<-df30.sim %>% mutate(col1=streak_run(state, k=1000))
df30.sim<-df30.sim %>% filter(!(state=="4" & col1!=1))
df30.sim<-df30.sim %>% filter(!(state=="5" & col1!=1))

rm(sim1.msm) 
rm(sim2.msm)
rm(sim3.msm)
rm(sim4.msm)
rm(sim5.msm)
rm(sim6.msm)
rm(sim7.msm)
rm(sim8.msm)
rm(sim9.msm)
rm(sim10.msm)
rm(sim11.msm)
rm(sim12.msm)
rm(sim13.msm)
rm(sim14.msm)
rm(sim15.msm)
rm(sim16.msm)
rm(sim17.msm)
rm(sim18.msm)
rm(sim19.msm)
rm(sim20.msm)
rm(sim21.msm)
rm(sim22.msm)
rm(sim23.msm)
rm(sim24.msm)
rm(sim25.msm)
rm(sim26.msm)
rm(sim27.msm)
rm(sim28.msm)
rm(sim29.msm)
rm(sim30.msm)
}



# SENSITIVITY ANALYSIS Utilities and costs cmo 76 -------------------------

{
# Utility value for being in ICU:	0.66, 0.39-0.93,	Beta,	(Cost effectiveness of antimicrobial catheters in the intensive care unit: addressing uncertainty in the decision)
# Utility value for highly invasive care:	0.55,	0.39-0.71,	(Beta,	Comparison of Health-Related Quality of Life Preferences Between Physicians and Cirrhotic Patients: Implications for Cost–Utility Analysesin Chronic Liver Disease)
# Utility value for paliative care:	0.28,	0.23-0.35,	Beta,	(Ultrasound Elastography for Fibrosis Surveillance Is Cos tEffective in Patients with Chronic Hepatitis C Virus in the UK)

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-

# sources: BIDMC - Patient Financial Services & HMFP - Finance

# utilities
u_nhic<-0.66
u_hic<-0.55
u_cmo<-0.28
u_discharge<-1
u_died<-1

# 1 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df1.sim<-df1.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df1.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df1.sim$day>0, 340,0))+4650+(ifelse(df1.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00 # assumping death at beggining of day and no extra costs 

df1.sim<-df1.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df1.summary<- df1.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= mean(utility),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df1.overall<- df1.summary[!duplicated(df1.summary$id), ]
#
df1.overallcmo76_u_mean<-mean(df1.summary$utility_mean)
df1.overallcmo76_c_mean<-mean(df1.summary$costs_sum)

# Mean survival utility and costs at N dayss
df1.survival<-df1.summary %>% filter(state%in%4)
df1.senscmo76_u_mean<-mean(df1.survival$utility_mean)
df1.senscmo76_c_mean<-mean(df1.survival$costs_sum)

#-------------------------------------------------------------------------------

# 2 day hic ////////////////////////////////////////////////////////////////////

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-

# Create flags for sequential days  
df2.sim<-df2.sim %>% mutate(day=(streak_run(id, k=1000)-1))

# Create costs
c_nhic<-3805+662+(ifelse(df2.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df2.sim$day>0, 340,0))+4650+(ifelse(df2.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*1)+(340*1)+(724*1)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC 

df2.sim<-df2.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df2.summary<- df2.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))), # adding extra days of utility given HIC
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df2.overall<- df2.summary[!duplicated(df2.summary$id), ]
#
df2.overallcmo76_u_mean<-mean(df2.summary$utility_mean)
df2.overallcmo76_c_mean<-mean(df2.summary$costs_sum)

# Mean survival utility and costs at N dayss
df2.survival<-df2.summary %>% filter(state%in%4)
df2.senscmo76_u_mean<-mean(df2.survival$utility_mean)
df2.senscmo76_c_mean<-mean(df2.survival$costs_sum)

#-------------------------------------------------------------------------------

# 3 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df3.sim<-df3.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df3.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df3.sim$day>0, 340,0))+4650+(ifelse(df3.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*2)+(340*2)+(724*2))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC

df3.sim<-df3.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df3.summary<- df3.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df3.overall<- df3.summary[!duplicated(df3.summary$id), ]
#
df3.overallcmo76_u_mean<-mean(df3.summary$utility_mean)
df3.overallcmo76_c_mean<-mean(df3.summary$costs_sum)

# Mean survival utility and costs at N dayss
df3.survival<-df3.summary %>% filter(state%in%4)
df3.senscmo76_u_mean<-mean(df3.survival$utility_mean)
df3.senscmo76_c_mean<-mean(df3.survival$costs_sum)

#-------------------------------------------------------------------------------

# 4 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df4.sim<-df4.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df4.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df4.sim$day>0, 340,0))+4650+(ifelse(df4.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*3)+(340*3)+(724*3))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df4.sim<-df4.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df4.summary<- df4.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df4.overall<- df4.summary[!duplicated(df4.summary$id), ]
#
df4.overallcmo76_u_mean<-mean(df4.summary$utility_mean)
df4.overallcmo76_c_mean<-mean(df4.summary$costs_sum)

# Mean survival utility and costs at N dayss
df4.survival<-df4.summary %>% filter(state%in%4)
df4.senscmo76_u_mean<-mean(df4.survival$utility_mean)
df4.senscmo76_c_mean<-mean(df4.survival$costs_sum)

#-------------------------------------------------------------------------------

# 5 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df5.sim<-df5.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df5.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df5.sim$day>0, 340,0))+4650+(ifelse(df5.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*4)+(340*4)+(724*4))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df5.sim<-df5.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df5.summary<- df5.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df5.overall<- df5.summary[!duplicated(df5.summary$id), ]
#
df5.overallcmo76_u_mean<-mean(df5.summary$utility_mean)
df5.overallcmo76_c_mean<-mean(df5.summary$costs_sum)

# Mean survival utility and costs at N dayss
df5.survival<-df5.summary %>% filter(state%in%4)
df5.senscmo76_u_mean<-mean(df5.survival$utility_mean)
df5.senscmo76_c_mean<-mean(df5.survival$costs_sum)

#-------------------------------------------------------------------------------

# 6 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df6.sim<-df6.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df6.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df6.sim$day>0, 340,0))+4650+(ifelse(df6.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*5)+(340*5)+(724*5))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df6.sim<-df6.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df6.summary<- df6.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df6.overall<- df6.summary[!duplicated(df6.summary$id), ]
#
df6.overallcmo76_u_mean<-mean(df6.summary$utility_mean)
df6.overallcmo76_c_mean<-mean(df6.summary$costs_sum)

# Mean survival utility and costs at N dayss
df6.survival<-df6.summary %>% filter(state%in%4)
df6.senscmo76_u_mean<-mean(df6.survival$utility_mean)
df6.senscmo76_c_mean<-mean(df6.survival$costs_sum)

#-------------------------------------------------------------------------------

# 7 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df7.sim<-df7.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df7.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df7.sim$day>0, 340,0))+4650+(ifelse(df7.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*6)+(340*6)+(724*6))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df7.sim<-df7.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df7.summary<- df7.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df7.overall<- df7.summary[!duplicated(df7.summary$id), ]
#
df7.overallcmo76_u_mean<-mean(df7.summary$utility_mean)
df7.overallcmo76_c_mean<-mean(df7.summary$costs_sum)

# Mean survival utility and costs at N dayss
df7.survival<-df7.summary %>% filter(state%in%4)
df7.senscmo76_u_mean<-mean(df7.survival$utility_mean)
df7.senscmo76_c_mean<-mean(df7.survival$costs_sum)

#-------------------------------------------------------------------------------

# 8 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df8.sim<-df8.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df8.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df8.sim$day>0, 340,0))+4650+(ifelse(df8.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*7)+(340*7)+(724*7)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df8.sim<-df8.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df8.summary<- df8.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df8.overall<- df8.summary[!duplicated(df8.summary$id), ]
#
df8.overallcmo76_u_mean<-mean(df8.summary$utility_mean)
df8.overallcmo76_c_mean<-mean(df8.summary$costs_sum)

# Mean survival utility and costs at N dayss
df8.survival<-df8.summary %>% filter(state%in%4)
df8.senscmo76_u_mean<-mean(df8.survival$utility_mean)
df8.senscmo76_c_mean<-mean(df8.survival$costs_sum)

#-------------------------------------------------------------------------------

# 9 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df9.sim<-df9.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df9.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df9.sim$day>0, 340,0))+4650+(ifelse(df9.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*8)+(340*8)+(724*8))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df9.sim<-df9.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df9.summary<- df9.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df9.overall<- df9.summary[!duplicated(df9.summary$id), ]
#
df9.overallcmo76_u_mean<-mean(df9.summary$utility_mean)
df9.overallcmo76_c_mean<-mean(df9.summary$costs_sum)

# Mean survival utility and costs at N dayss
df9.survival<-df9.summary %>% filter(state%in%4)
df9.senscmo76_u_mean<-mean(df9.survival$utility_mean)
df9.senscmo76_c_mean<-mean(df9.survival$costs_sum)

#-------------------------------------------------------------------------------

# 10 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df10.sim<-df10.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df10.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df10.sim$day>0, 340,0))+4650+(ifelse(df10.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*9)+(340*9)+(724*9))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df10.sim<-df10.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df10.summary<- df10.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df10.overall<- df10.summary[!duplicated(df10.summary$id), ]
#
df10.overallcmo76_u_mean<-mean(df10.summary$utility_mean)
df10.overallcmo76_c_mean<-mean(df10.summary$costs_sum)

# Mean survival utility and costs at N dayss
df10.survival<-df10.summary %>% filter(state%in%4)
df10.senscmo76_u_mean<-mean(df10.survival$utility_mean)
df10.senscmo76_c_mean<-mean(df10.survival$costs_sum)

#-------------------------------------------------------------------------------

# 11 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df11.sim<-df11.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df11.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df11.sim$day>0, 340,0))+4650+(ifelse(df11.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*10)+(340*10)+(724*10))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df11.sim<-df11.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df11.summary<- df11.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df11.overall<- df11.summary[!duplicated(df11.summary$id), ]
#
df11.overallcmo76_u_mean<-mean(df11.summary$utility_mean)
df11.overallcmo76_c_mean<-mean(df11.summary$costs_sum)

# Mean survival utility and costs at N dayss
df11.survival<-df11.summary %>% filter(state%in%4)
df11.senscmo76_u_mean<-mean(df11.survival$utility_mean)
df11.senscmo76_c_mean<-mean(df11.survival$costs_sum)

#-------------------------------------------------------------------------------

# 12 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df12.sim<-df12.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df12.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df12.sim$day>0, 340,0))+4650+(ifelse(df12.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*11)+(340*11)+(724*11))   # assumping death at beggining of day and no extra costs 

df12.sim<-df12.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df12.summary<- df12.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df12.overall<- df12.summary[!duplicated(df12.summary$id), ]
#
df12.overallcmo76_u_mean<-mean(df12.summary$utility_mean)
df12.overallcmo76_c_mean<-mean(df12.summary$costs_sum)

# Mean survival utility and costs at N dayss
df12.survival<-df12.summary %>% filter(state%in%4)
df12.senscmo76_u_mean<-mean(df12.survival$utility_mean)
df12.senscmo76_c_mean<-mean(df12.survival$costs_sum)

#-------------------------------------------------------------------------------

# 13 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df13.sim<-df13.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df13.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df13.sim$day>0, 340,0))+4650+(ifelse(df13.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*12)+(340*12)+(724*12)) # assumping death at beggining of day and no extra costs 

df13.sim<-df13.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df13.summary<- df13.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df13.overall<- df13.summary[!duplicated(df13.summary$id), ]
#
df13.overallcmo76_u_mean<-mean(df13.summary$utility_mean)
df13.overallcmo76_c_mean<-mean(df13.summary$costs_sum)

# Mean survival utility and costs at N dayss
df13.survival<-df13.summary %>% filter(state%in%4)
df13.senscmo76_u_mean<-mean(df13.survival$utility_mean)
df13.senscmo76_c_mean<-mean(df13.survival$costs_sum)

#-------------------------------------------------------------------------------

# 14 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df14.sim<-df14.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df14.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df14.sim$day>0, 340,0))+4650+(ifelse(df14.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*13)+(340*13)+(724*13))  # assumping death at beggining of day and no extra costs 

df14.sim<-df14.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df14.summary<- df14.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df14.overall<- df14.summary[!duplicated(df14.summary$id), ]
#
df14.overallcmo76_u_mean<-mean(df14.summary$utility_mean)
df14.overallcmo76_c_mean<-mean(df14.summary$costs_sum)

# Mean survival utility and costs at N dayss
df14.survival<-df14.summary %>% filter(state%in%4)
df14.senscmo76_u_mean<-mean(df14.survival$utility_mean)
df14.senscmo76_c_mean<-mean(df14.survival$costs_sum)

#-------------------------------------------------------------------------------

# 15 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df15.sim<-df15.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df15.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df15.sim$day>0, 340,0))+4650+(ifelse(df15.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*14)+(340*14)+(724*14))  # assumping death at beggining of day and no extra costs 

df15.sim<-df15.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df15.summary<- df15.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df15.overall<- df15.summary[!duplicated(df15.summary$id), ]
#
df15.overallcmo76_u_mean<-mean(df15.summary$utility_mean)
df15.overallcmo76_c_mean<-mean(df15.summary$costs_sum)

# Mean survival utility and costs at N dayss
df15.survival<-df15.summary %>% filter(state%in%4)
df15.senscmo76_u_mean<-mean(df15.survival$utility_mean)
df15.senscmo76_c_mean<-mean(df15.survival$costs_sum)

#-------------------------------------------------------------------------------

# 16 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df16.sim<-df16.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df16.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df16.sim$day>0, 340,0))+4650+(ifelse(df16.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*15)+(340*15)+(724*15))  # assumping death at beggining of day and no extra costs 

df16.sim<-df16.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df16.summary<- df16.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df16.overall<- df16.summary[!duplicated(df16.summary$id), ]
#
df16.overallcmo76_u_mean<-mean(df16.summary$utility_mean)
df16.overallcmo76_c_mean<-mean(df16.summary$costs_sum)

# Mean survival utility and costs at N dayss
df16.survival<-df16.summary %>% filter(state%in%4)
df16.senscmo76_u_mean<-mean(df16.survival$utility_mean)
df16.senscmo76_c_mean<-mean(df16.survival$costs_sum)

#-------------------------------------------------------------------------------

# 17 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df17.sim<-df17.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df17.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df17.sim$day>0, 340,0))+4650+(ifelse(df17.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*16)+(340*16)+(724*16))  # assumping death at beggining of day and no extra costs 

df17.sim<-df17.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df17.summary<- df17.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df17.overall<- df17.summary[!duplicated(df17.summary$id), ]
#
df17.overallcmo76_u_mean<-mean(df17.summary$utility_mean)
df17.overallcmo76_c_mean<-mean(df17.summary$costs_sum)

# Mean survival utility and costs at N dayss
df17.survival<-df17.summary %>% filter(state%in%4)
df17.senscmo76_u_mean<-mean(df17.survival$utility_mean)
df17.senscmo76_c_mean<-mean(df17.survival$costs_sum)

#-------------------------------------------------------------------------------

# 18 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df18.sim<-df18.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df18.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df18.sim$day>0, 340,0))+4650+(ifelse(df18.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*17)+(340*17)+(724*17))  # assumping death at beggining of day and no extra costs 

df18.sim<-df18.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df18.summary<- df18.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df18.overall<- df18.summary[!duplicated(df18.summary$id), ]
#
df18.overallcmo76_u_mean<-mean(df18.summary$utility_mean)
df18.overallcmo76_c_mean<-mean(df18.summary$costs_sum)

# Mean survival utility and costs at N dayss
df18.survival<-df18.summary %>% filter(state%in%4)
df18.senscmo76_u_mean<-mean(df18.survival$utility_mean)
df18.senscmo76_c_mean<-mean(df18.survival$costs_sum)

#-------------------------------------------------------------------------------

# 19 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df19.sim<-df19.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df19.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df19.sim$day>0, 340,0))+4650+(ifelse(df19.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*18)+(340*18)+(724*18))  # assumping death at beggining of day and no extra costs 

df19.sim<-df19.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df19.summary<- df19.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df19.overall<- df19.summary[!duplicated(df19.summary$id), ]
#
df19.overallcmo76_u_mean<-mean(df19.summary$utility_mean)
df19.overallcmo76_c_mean<-mean(df19.summary$costs_sum)

# Mean survival utility and costs at N dayss
df19.survival<-df19.summary %>% filter(state%in%4)
df19.senscmo76_u_mean<-mean(df19.survival$utility_mean)
df19.senscmo76_c_mean<-mean(df19.survival$costs_sum)

#-------------------------------------------------------------------------------

# 20 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df20.sim<-df20.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df20.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df20.sim$day>0, 340,0))+4650+(ifelse(df20.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*19)+(340*19)+(724*19))  # assumping death at beggining of day and no extra costs 

df20.sim<-df20.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df20.summary<- df20.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df20.overall<- df20.summary[!duplicated(df20.summary$id), ]
#
df20.overallcmo76_u_mean<-mean(df20.summary$utility_mean)
df20.overallcmo76_c_mean<-mean(df20.summary$costs_sum)

# Mean survival utility and costs at N dayss
df20.survival<-df20.summary %>% filter(state%in%4)
df20.senscmo76_u_mean<-mean(df20.survival$utility_mean)
df20.senscmo76_c_mean<-mean(df20.survival$costs_sum)

#-------------------------------------------------------------------------------

# 21 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df21.sim<-df21.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df21.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df21.sim$day>0, 340,0))+4650+(ifelse(df21.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*20)+(340*20)+(724*20))  # assumping death at beggining of day and no extra costs 

df21.sim<-df21.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df21.summary<- df21.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df21.overall<- df21.summary[!duplicated(df21.summary$id), ]
#
df21.overallcmo76_u_mean<-mean(df21.summary$utility_mean)
df21.overallcmo76_c_mean<-mean(df21.summary$costs_sum)

# Mean survival utility and costs at N dayss
df21.survival<-df21.summary %>% filter(state%in%4)
df21.senscmo76_u_mean<-mean(df21.survival$utility_mean)
df21.senscmo76_c_mean<-mean(df21.survival$costs_sum)

#-------------------------------------------------------------------------------

# 22 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df22.sim<-df22.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df22.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df22.sim$day>0, 340,0))+4650+(ifelse(df22.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*21)+(340*21)+(724*21)) # assumping death at beggining of day and no extra costs 

df22.sim<-df22.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df22.summary<- df22.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df22.overall<- df22.summary[!duplicated(df22.summary$id), ]
#
df22.overallcmo76_u_mean<-mean(df22.summary$utility_mean)
df22.overallcmo76_c_mean<-mean(df22.summary$costs_sum)

# Mean survival utility and costs at N dayss
df22.survival<-df22.summary %>% filter(state%in%4)
df22.senscmo76_u_mean<-mean(df22.survival$utility_mean)
df22.senscmo76_c_mean<-mean(df22.survival$costs_sum)

#-------------------------------------------------------------------------------

# 23 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df23.sim<-df23.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df23.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df23.sim$day>0, 340,0))+4650+(ifelse(df23.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*22)+(340*22)+(724*22)) # assumping death at beggining of day and no extra costs 

df23.sim<-df23.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df23.summary<- df23.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df23.overall<- df23.summary[!duplicated(df23.summary$id), ]
#
df23.overallcmo76_u_mean<-mean(df23.summary$utility_mean)
df23.overallcmo76_c_mean<-mean(df23.summary$costs_sum)

# Mean survival utility and costs at N dayss
df23.survival<-df23.summary %>% filter(state%in%4)
df23.senscmo76_u_mean<-mean(df23.survival$utility_mean)
df23.senscmo76_c_mean<-mean(df23.survival$costs_sum)

#-------------------------------------------------------------------------------

# 24 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df24.sim<-df24.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df24.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df24.sim$day>0, 340,0))+4650+(ifelse(df24.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*23)+(340*23)+(724*23))  # assumping death at beggining of day and no extra costs 

df24.sim<-df24.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df24.summary<- df24.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df24.overall<- df24.summary[!duplicated(df24.summary$id), ]
#
df24.overallcmo76_u_mean<-mean(df24.summary$utility_mean)
df24.overallcmo76_c_mean<-mean(df24.summary$costs_sum)

# Mean survival utility and costs at N dayss
df24.survival<-df24.summary %>% filter(state%in%4)
df24.senscmo76_u_mean<-mean(df24.survival$utility_mean)
df24.senscmo76_c_mean<-mean(df24.survival$costs_sum)

#-------------------------------------------------------------------------------

# 25 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df25.sim<-df25.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df25.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df25.sim$day>0, 340,0))+4650+(ifelse(df25.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*24)+(340*24)+(724*24)) # assumping death at beggining of day and no extra costs 

df25.sim<-df25.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df25.summary<- df25.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df25.overall<- df25.summary[!duplicated(df25.summary$id), ]
#
df25.overallcmo76_u_mean<-mean(df25.summary$utility_mean)
df25.overallcmo76_c_mean<-mean(df25.summary$costs_sum)

# Mean survival utility and costs at N dayss
df25.survival<-df25.summary %>% filter(state%in%4)
df25.senscmo76_u_mean<-mean(df25.survival$utility_mean)
df25.senscmo76_c_mean<-mean(df25.survival$costs_sum)

#-------------------------------------------------------------------------------

# 26 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df26.sim<-df26.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df26.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df26.sim$day>0, 340,0))+4650+(ifelse(df26.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*25)+(340*25)+(724*25))  # assumping death at beggining of day and no extra costs 

df26.sim<-df26.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df26.summary<- df26.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df26.overall<- df26.summary[!duplicated(df26.summary$id), ]
#
df26.overallcmo76_u_mean<-mean(df26.summary$utility_mean)
df26.overallcmo76_c_mean<-mean(df26.summary$costs_sum)

# Mean survival utility and costs at N dayss
df26.survival<-df26.summary %>% filter(state%in%4)
df26.senscmo76_u_mean<-mean(df26.survival$utility_mean)
df26.senscmo76_c_mean<-mean(df26.survival$costs_sum)

#-------------------------------------------------------------------------------

# 27 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df27.sim<-df27.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df27.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df27.sim$day>0, 340,0))+4650+(ifelse(df27.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*26)+(340*26)+(724*26))  # assumping death at beggining of day and no extra costs 

df27.sim<-df27.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df27.summary<- df27.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df27.overall<- df27.summary[!duplicated(df27.summary$id), ]
#
df27.overallcmo76_u_mean<-mean(df27.summary$utility_mean)
df27.overallcmo76_c_mean<-mean(df27.summary$costs_sum)

# Mean survival utility and costs at N dayss
df27.survival<-df27.summary %>% filter(state%in%4)
df27.senscmo76_u_mean<-mean(df27.survival$utility_mean)
df27.senscmo76_c_mean<-mean(df27.survival$costs_sum)

#-------------------------------------------------------------------------------

# 28 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df28.sim<-df28.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df28.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df28.sim$day>0, 340,0))+4650+(ifelse(df28.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*27)+(340*27)+(724*27))  # assumping death at beggining of day and no extra costs 

df28.sim<-df28.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df28.summary<- df28.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df28.overall<- df28.summary[!duplicated(df28.summary$id), ]
#
df28.overallcmo76_u_mean<-mean(df28.summary$utility_mean)
df28.overallcmo76_c_mean<-mean(df28.summary$costs_sum)

# Mean survival utility and costs at N dayss
df28.survival<-df28.summary %>% filter(state%in%4)
df28.senscmo76_u_mean<-mean(df28.survival$utility_mean)
df28.senscmo76_c_mean<-mean(df28.survival$costs_sum)

#-------------------------------------------------------------------------------

# 29 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df29.sim<-df29.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df29.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df29.sim$day>0, 340,0))+4650+(ifelse(df29.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*28)+(340*28)+(724*28))  # assumping death at beggining of day and no extra costs 

df29.sim<-df29.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df29.summary<- df29.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean=(sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df29.overall<- df29.summary[!duplicated(df29.summary$id), ]
#
df29.overallcmo76_u_mean<-mean(df29.summary$utility_mean)
df29.overallcmo76_c_mean<-mean(df29.summary$costs_sum)

# Mean survival utility and costs at N dayss
df29.survival<-df29.summary %>% filter(state%in%4)
df29.senscmo76_u_mean<-mean(df29.survival$utility_mean)
df29.senscmo76_c_mean<-mean(df29.survival$costs_sum)

#-------------------------------------------------------------------------------

# 30 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df30.sim<-df30.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df30.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df30.sim$day>0, 340,0))+4650+(ifelse(df30.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*29)+(340*29)+(724*29))  # assumping death at beggining of day and no extra costs 

df30.sim<-df30.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df30.summary<- df30.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df30.overall<- df30.summary[!duplicated(df30.summary$id), ]
#
df30.overallcmo76_u_mean<-mean(df30.summary$utility_mean)
df30.overallcmo76_c_mean<-mean(df30.summary$costs_sum)

# Mean survival utility and costs at N dayss
df30.survival<-df30.summary %>% filter(state%in%4)
df30.senscmo76_u_mean<-mean(df30.survival$utility_mean)
df30.senscmo76_c_mean<-mean(df30.survival$costs_sum)


df1.senscmo76<-df1.summary
df2.senscmo76<-df2.summary
df3.senscmo76<-df3.summary
df4.senscmo76<-df4.summary
df5.senscmo76<-df5.summary
df6.senscmo76<-df6.summary
df7.senscmo76<-df7.summary
df8.senscmo76<-df8.summary
df9.senscmo76<-df9.summary
df10.senscmo76<-df10.summary
df11.senscmo76<-df11.summary
df12.senscmo76<-df12.summary
df13.senscmo76<-df13.summary
df14.senscmo76<-df14.summary
df15.senscmo76<-df15.summary
df16.senscmo76<-df16.summary
df17.senscmo76<-df17.summary
df18.senscmo76<-df18.summary
df19.senscmo76<-df19.summary
df20.senscmo76<-df20.summary
df21.senscmo76<-df21.summary
df22.senscmo76<-df22.summary
df23.senscmo76<-df23.summary
df24.senscmo76<-df24.summary
df25.senscmo76<-df25.summary
df26.senscmo76<-df26.summary
df27.senscmo76<-df27.summary
df28.senscmo76<-df28.summary
df29.senscmo76<-df29.summary
df30.senscmo76<-df30.summary



rm(df1.sim)
rm(df2.sim)
rm(df3.sim)
rm(df4.sim)
rm(df5.sim)
rm(df6.sim)
rm(df7.sim)
rm(df8.sim)
rm(df9.sim)
rm(df10.sim)
rm(df11.sim)
rm(df12.sim)
rm(df13.sim)
rm(df14.sim)
rm(df15.sim)
rm(df16.sim)
rm(df17.sim)
rm(df18.sim)
rm(df19.sim)
rm(df20.sim)
rm(df21.sim)
rm(df22.sim)
rm(df23.sim)
rm(df24.sim)
rm(df25.sim)
rm(df26.sim)
rm(df27.sim)
rm(df28.sim)
rm(df29.sim)
rm(df30.sim)
}


# 1 way sensitivity cmo 76 case results ------------------------------------------------------------
senscmo76.overall_c_vect<-c()
for (i in 1:30){
  senscmo76.overall_c_vect[i]<-get(paste("df", i, ".overallcmo76_c_mean",sep = ""))
}

senscmo76.overall_u_vect<-c()
for (i in 1:30){
  senscmo76.overall_u_vect[i]<-get(paste("df", i, ".overallcmo76_u_mean",sep = ""))
}

senscmo76.survival_c_vect<-c()
for (i in 1:30){
  senscmo76.survival_c_vect[i]<-get(paste("df", i, ".senscmo76_c_mean",sep = ""))
}

senscmo76.survival_u_vect<-c()
for (i in 1:30){
  senscmo76.survival_u_vect[i]<-get(paste("df", i, ".senscmo76_u_mean",sep = ""))
}

senscmo76.ce_results<- matrix(c(senscmo76.overall_c_vect,senscmo76.overall_u_vect,senscmo76.survival_c_vect,senscmo76.survival_u_vect), nrow=30, byrow=FALSE)
colnames(senscmo76.ce_results) <- c("overall_c","overall_u","survival_c","survival_u")
#----


# markov objects  cmo 90----
{
mo1.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90), name="MarkovChain Q1")
mo2.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_2), name="MarkovChain Q1")
mo3.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_3), name="MarkovChain Q1")
mo4.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_4), name="MarkovChain Q1")
mo5.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_5), name="MarkovChain Q1")
mo6.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_6), name="MarkovChain Q1")
mo7.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_7), name="MarkovChain Q1")  
mo8.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_8), name="MarkovChain Q1")
mo9.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_9), name="MarkovChain Q1")
mo10.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_10), name="MarkovChain Q1")
mo11.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_11), name="MarkovChain Q1")
mo12.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_12), name="MarkovChain Q1")
mo13.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_13), name="MarkovChain Q1")
mo14.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_14), name="MarkovChain Q1")
mo15.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_15), name="MarkovChain Q1")
mo16.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_16), name="MarkovChain Q1")
mo17.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_17), name="MarkovChain Q1")
mo18.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_18), name="MarkovChain Q1")
mo19.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_19), name="MarkovChain Q1")
mo20.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_20), name="MarkovChain Q1")
mo21.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_21), name="MarkovChain Q1")
mo22.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_22), name="MarkovChain Q1")
mo23.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_23), name="MarkovChain Q1")
mo24.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_24), name="MarkovChain Q1")
mo25.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_25), name="MarkovChain Q1")
mo26.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_26), name="MarkovChain Q1")
mo27.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_27), name="MarkovChain Q1")
mo28.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_28), name="MarkovChain Q1")
mo29.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_29), name="MarkovChain Q1")
mo30.msm<-new("markovchain",transitionMatrix=(sens_matrix.cmo90_30), name="MarkovChain Q1")
}

rm(example.df)
rm(df1.msm)
rm(df1.ptm)
rm(df1.tm)





#


# SENSITIVITY ANALYSIS first order monte carlo simulations cmo 90 ----



B <- 100
N <- 30
{
sim1.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo1.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim2.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo2.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim3.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo3.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim4.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo4.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim5.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo5.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim6.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo6.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim7.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo7.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim8.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo8.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim9.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo9.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim10.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo10.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim11.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo11.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim12.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo12.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim13.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo13.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim14.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo14.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim15.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo15.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim16.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo16.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim17.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo17.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim18.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo18.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim19.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo19.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim20.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo20.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim21.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo21.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim22.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo22.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim23.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo23.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim24.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo24.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim25.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo25.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim26.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo26.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim27.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo27.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim28.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo28.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim29.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo29.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

sim30.msm <- replicate(B, {
  X <- rmarkovchain(n = N, 
                    object = mo30.msm, 
                    t0 = "2",
                    include.t0 = TRUE,
                    parallel = TRUE,
                    num.cores=3)})

# rm(mo1.msm) 
# rm(mo2.msm)
# rm(mo3.msm)
# rm(mo4.msm)
# rm(mo5.msm)
# rm(mo6.msm)
# rm(mo7.msm)
# rm(mo8.msm)
# rm(mo9.msm)
# rm(mo10.msm)
# rm(mo11.msm)
# rm(mo12.msm)
# rm(mo13.msm)
# rm(mo14.msm)
# rm(mo15.msm)
# rm(mo16.msm)
# rm(mo17.msm)
# rm(mo18.msm)
# rm(mo19.msm)
# rm(mo20.msm)
# rm(mo21.msm)
# rm(mo22.msm)
# rm(mo23.msm)
# rm(mo24.msm)
# rm(mo25.msm)
# rm(mo26.msm)
# rm(mo27.msm)
# rm(mo28.msm)
# rm(mo29.msm)
# rm(mo30.msm)
}
# 1 non-agressive
# 2 aggressive
# 3 cmo
# 4 discharged
# 5 death

# Convert simulations into data frames 
{
df1.sim<- as.data.frame(sim1.msm)
df1.sim<-df1.sim %>% gather(key = "id", value = "state")
df1.sim<-df1.sim %>% mutate(col1=streak_run(state, k=1000))
df1.sim<-df1.sim %>% filter(!(state=="4" & col1!=1))
df1.sim<-df1.sim %>% filter(!(state=="5" & col1!=1))

df2.sim<- as.data.frame(sim2.msm)
df2.sim<-df2.sim %>% gather(key = "id", value = "state")
df2.sim<-df2.sim %>% mutate(col1=streak_run(state, k=1000))
df2.sim<-df2.sim %>% filter(!(state=="4" & col1!=1))
df2.sim<-df2.sim %>% filter(!(state=="5" & col1!=1))

df3.sim<- as.data.frame(sim3.msm)
df3.sim<-df3.sim %>% gather(key = "id", value = "state")
df3.sim<-df3.sim %>% mutate(col1=streak_run(state, k=1000))
df3.sim<-df3.sim %>% filter(!(state=="4" & col1!=1))
df3.sim<-df3.sim %>% filter(!(state=="5" & col1!=1))

df4.sim<- as.data.frame(sim4.msm)
df4.sim<-df4.sim %>% gather(key = "id", value = "state")
df4.sim<-df4.sim %>% mutate(col1=streak_run(state, k=1000))
df4.sim<-df4.sim %>% filter(!(state=="4" & col1!=1))
df4.sim<-df4.sim %>% filter(!(state=="5" & col1!=1))

df5.sim<- as.data.frame(sim5.msm)
df5.sim<-df5.sim %>% gather(key = "id", value = "state")
df5.sim<-df5.sim %>% mutate(col1=streak_run(state, k=1000))
df5.sim<-df5.sim %>% filter(!(state=="4" & col1!=1))
df5.sim<-df5.sim %>% filter(!(state=="5" & col1!=1))

df6.sim<- as.data.frame(sim6.msm)
df6.sim<-df6.sim %>% gather(key = "id", value = "state")
df6.sim<-df6.sim %>% mutate(col1=streak_run(state, k=1000))
df6.sim<-df6.sim %>% filter(!(state=="4" & col1!=1))
df6.sim<-df6.sim %>% filter(!(state=="5" & col1!=1))

df7.sim<- as.data.frame(sim7.msm)
df7.sim<-df7.sim %>% gather(key = "id", value = "state")
df7.sim<-df7.sim %>% mutate(col1=streak_run(state, k=1000))
df7.sim<-df7.sim %>% filter(!(state=="4" & col1!=1))
df7.sim<-df7.sim %>% filter(!(state=="5" & col1!=1))

df8.sim<- as.data.frame(sim8.msm)
df8.sim<-df8.sim %>% gather(key = "id", value = "state")
df8.sim<-df8.sim %>% mutate(col1=streak_run(state, k=1000))
df8.sim<-df8.sim %>% filter(!(state=="4" & col1!=1))
df8.sim<-df8.sim %>% filter(!(state=="5" & col1!=1))

df9.sim<- as.data.frame(sim9.msm)
df9.sim<-df9.sim %>% gather(key = "id", value = "state")
df9.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df9.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df9.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df10.sim<- as.data.frame(sim10.msm)
df10.sim<-df9.sim %>% gather(key = "id", value = "state")
df10.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df10.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df10.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df11.sim<- as.data.frame(sim11.msm)
df11.sim<-df11.sim %>% gather(key = "id", value = "state")
df11.sim<-df11.sim %>% mutate(col1=streak_run(state, k=1000))
df11.sim<-df11.sim %>% filter(!(state=="4" & col1!=1))
df11.sim<-df11.sim %>% filter(!(state=="5" & col1!=1))

df12.sim<- as.data.frame(sim12.msm)
df12.sim<-df12.sim %>% gather(key = "id", value = "state")
df12.sim<-df12.sim %>% mutate(col1=streak_run(state, k=1000))
df12.sim<-df12.sim %>% filter(!(state=="4" & col1!=1))
df12.sim<-df12.sim %>% filter(!(state=="5" & col1!=1))

df13.sim<- as.data.frame(sim13.msm)
df13.sim<-df13.sim %>% gather(key = "id", value = "state")
df13.sim<-df13.sim %>% mutate(col1=streak_run(state, k=1000))
df13.sim<-df13.sim %>% filter(!(state=="4" & col1!=1))
df13.sim<-df13.sim %>% filter(!(state=="5" & col1!=1))

df14.sim<- as.data.frame(sim14.msm)
df14.sim<-df14.sim %>% gather(key = "id", value = "state")
df14.sim<-df14.sim %>% mutate(col1=streak_run(state, k=1000))
df14.sim<-df14.sim %>% filter(!(state=="4" & col1!=1))
df14.sim<-df14.sim %>% filter(!(state=="5" & col1!=1))

df15.sim<- as.data.frame(sim15.msm)
df15.sim<-df15.sim %>% gather(key = "id", value = "state")
df15.sim<-df15.sim %>% mutate(col1=streak_run(state, k=1000))
df15.sim<-df15.sim %>% filter(!(state=="4" & col1!=1))
df15.sim<-df15.sim %>% filter(!(state=="5" & col1!=1))

df16.sim<- as.data.frame(sim16.msm)
df16.sim<-df16.sim %>% gather(key = "id", value = "state")
df16.sim<-df16.sim %>% mutate(col1=streak_run(state, k=1000))
df16.sim<-df16.sim %>% filter(!(state=="4" & col1!=1))
df16.sim<-df16.sim %>% filter(!(state=="5" & col1!=1))

df17.sim<- as.data.frame(sim17.msm)
df17.sim<-df17.sim %>% gather(key = "id", value = "state")
df17.sim<-df17.sim %>% mutate(col1=streak_run(state, k=1000))
df17.sim<-df17.sim %>% filter(!(state=="4" & col1!=1))
df17.sim<-df17.sim %>% filter(!(state=="5" & col1!=1))

df18.sim<- as.data.frame(sim18.msm)
df18.sim<-df18.sim %>% gather(key = "id", value = "state")
df18.sim<-df18.sim %>% mutate(col1=streak_run(state, k=1000))
df18.sim<-df18.sim %>% filter(!(state=="4" & col1!=1))
df18.sim<-df18.sim %>% filter(!(state=="5" & col1!=1))

df19.sim<- as.data.frame(sim19.msm)
df19.sim<-df19.sim %>% gather(key = "id", value = "state")
df19.sim<-df19.sim %>% mutate(col1=streak_run(state, k=1000))
df19.sim<-df19.sim %>% filter(!(state=="4" & col1!=1))
df19.sim<-df19.sim %>% filter(!(state=="5" & col1!=1))

df20.sim<- as.data.frame(sim20.msm)
df20.sim<-df9.sim %>% gather(key = "id", value = "state")
df20.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
df20.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
df20.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))

df21.sim<- as.data.frame(sim21.msm)
df21.sim<-df21.sim %>% gather(key = "id", value = "state")
df21.sim<-df21.sim %>% mutate(col1=streak_run(state, k=1000))
df21.sim<-df21.sim %>% filter(!(state=="4" & col1!=1))
df21.sim<-df21.sim %>% filter(!(state=="5" & col1!=1))

df22.sim<- as.data.frame(sim22.msm)
df22.sim<-df22.sim %>% gather(key = "id", value = "state")
df22.sim<-df22.sim %>% mutate(col1=streak_run(state, k=1000))
df22.sim<-df22.sim %>% filter(!(state=="4" & col1!=1))
df22.sim<-df22.sim %>% filter(!(state=="5" & col1!=1))

df23.sim<- as.data.frame(sim23.msm)
df23.sim<-df23.sim %>% gather(key = "id", value = "state")
df23.sim<-df23.sim %>% mutate(col1=streak_run(state, k=1000))
df23.sim<-df23.sim %>% filter(!(state=="4" & col1!=1))
df23.sim<-df23.sim %>% filter(!(state=="5" & col1!=1))

df24.sim<- as.data.frame(sim24.msm)
df24.sim<-df24.sim %>% gather(key = "id", value = "state")
df24.sim<-df24.sim %>% mutate(col1=streak_run(state, k=1000))
df24.sim<-df24.sim %>% filter(!(state=="4" & col1!=1))
df24.sim<-df24.sim %>% filter(!(state=="5" & col1!=1))

df25.sim<- as.data.frame(sim25.msm)
df25.sim<-df25.sim %>% gather(key = "id", value = "state")
df25.sim<-df25.sim %>% mutate(col1=streak_run(state, k=1000))
df25.sim<-df25.sim %>% filter(!(state=="4" & col1!=1))
df25.sim<-df25.sim %>% filter(!(state=="5" & col1!=1))

df26.sim<- as.data.frame(sim26.msm)
df26.sim<-df26.sim %>% gather(key = "id", value = "state")
df26.sim<-df26.sim %>% mutate(col1=streak_run(state, k=1000))
df26.sim<-df26.sim %>% filter(!(state=="4" & col1!=1))
df26.sim<-df26.sim %>% filter(!(state=="5" & col1!=1))

df27.sim<- as.data.frame(sim27.msm)
df27.sim<-df27.sim %>% gather(key = "id", value = "state")
df27.sim<-df27.sim %>% mutate(col1=streak_run(state, k=1000))
df27.sim<-df27.sim %>% filter(!(state=="4" & col1!=1))
df27.sim<-df27.sim %>% filter(!(state=="5" & col1!=1))

df28.sim<- as.data.frame(sim28.msm)
df28.sim<-df28.sim %>% gather(key = "id", value = "state")
df28.sim<-df28.sim %>% mutate(col1=streak_run(state, k=1000))
df28.sim<-df28.sim %>% filter(!(state=="4" & col1!=1))
df28.sim<-df28.sim %>% filter(!(state=="5" & col1!=1))

df29.sim<- as.data.frame(sim29.msm)
df29.sim<-df29.sim %>% gather(key = "id", value = "state")
df29.sim<-df29.sim %>% mutate(col1=streak_run(state, k=1000))
df29.sim<-df29.sim %>% filter(!(state=="4" & col1!=1))
df29.sim<-df29.sim %>% filter(!(state=="5" & col1!=1))

df30.sim<- as.data.frame(sim30.msm)
df30.sim<-df30.sim %>% gather(key = "id", value = "state")
df30.sim<-df30.sim %>% mutate(col1=streak_run(state, k=1000))
df30.sim<-df30.sim %>% filter(!(state=="4" & col1!=1))
df30.sim<-df30.sim %>% filter(!(state=="5" & col1!=1))

rm(sim1.msm) 
rm(sim2.msm)
rm(sim3.msm)
rm(sim4.msm)
rm(sim5.msm)
rm(sim6.msm)
rm(sim7.msm)
rm(sim8.msm)
rm(sim9.msm)
rm(sim10.msm)
rm(sim11.msm)
rm(sim12.msm)
rm(sim13.msm)
rm(sim14.msm)
rm(sim15.msm)
rm(sim16.msm)
rm(sim17.msm)
rm(sim18.msm)
rm(sim19.msm)
rm(sim20.msm)
rm(sim21.msm)
rm(sim22.msm)
rm(sim23.msm)
rm(sim24.msm)
rm(sim25.msm)
rm(sim26.msm)
rm(sim27.msm)
rm(sim28.msm)
rm(sim29.msm)
rm(sim30.msm)
}



# SENSITIVITY ANALYSIS Utilities and costs cmo 90 -------------------------

{
# Utility value for being in ICU:	0.66, 0.39-0.93,	Beta,	(Cost effectiveness of antimicrobial catheters in the intensive care unit: addressing uncertainty in the decision)
# Utility value for highly invasive care:	0.55,	0.39-0.71,	(Beta,	Comparison of Health-Related Quality of Life Preferences Between Physicians and Cirrhotic Patients: Implications for Cost–Utility Analysesin Chronic Liver Disease)
# Utility value for paliative care:	0.28,	0.23-0.35,	Beta,	(Ultrasound Elastography for Fibrosis Surveillance Is Cos tEffective in Patients with Chronic Hepatitis C Virus in the UK)

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-

# sources: BIDMC - Patient Financial Services & HMFP - Finance

# utilities
u_nhic<-0.66
u_hic<-0.55
u_cmo<-0.28
u_discharge<-1
u_died<-1

# 1 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df1.sim<-df1.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df1.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df1.sim$day>0, 340,0))+4650+(ifelse(df1.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00 # assumping death at beggining of day and no extra costs 

df1.sim<-df1.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df1.summary<- df1.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= mean(utility),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df1.overall<- df1.summary[!duplicated(df1.summary$id), ]
#
df1.overallcmo90_u_mean<-mean(df1.summary$utility_mean)
df1.overallcmo90_c_mean<-mean(df1.summary$costs_sum)

# Mean survival utility and costs at N dayss
df1.survival<-df1.summary %>% filter(state%in%4)
df1.senscmo90_u_mean<-mean(df1.survival$utility_mean)
df1.senscmo90_c_mean<-mean(df1.survival$costs_sum)

#-------------------------------------------------------------------------------

# 2 day hic ////////////////////////////////////////////////////////////////////

# Daily costs:
# ICU Room & Board	 $3,805.00 	-	-
# Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
# Mechanical ventilation first day 	 $928.99 	-	-
# Mechanical ventilation	 $775.00 	-	-
# Comfort care	 $988.00 	-	-
# Initial hospital physican care	 $662.00 	-	-
# Subsequent hospital physican care	 $340.00 	-	-
# Hospital discharge day	 $353.00 	-	-
# Critical care phsycian care	 $724.00 	-	-

# Create flags for sequential days  
df2.sim<-df2.sim %>% mutate(day=(streak_run(id, k=1000)-1))

# Create costs
c_nhic<-3805+662+(ifelse(df2.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df2.sim$day>0, 340,0))+4650+(ifelse(df2.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*1)+(340*1)+(724*1)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC 

df2.sim<-df2.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df2.summary<- df2.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))), # adding extra days of utility given HIC
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df2.overall<- df2.summary[!duplicated(df2.summary$id), ]
#
df2.overallcmo90_u_mean<-mean(df2.summary$utility_mean)
df2.overallcmo90_c_mean<-mean(df2.summary$costs_sum)

# Mean survival utility and costs at N dayss
df2.survival<-df2.summary %>% filter(state%in%4)
df2.senscmo90_u_mean<-mean(df2.survival$utility_mean)
df2.senscmo90_c_mean<-mean(df2.survival$costs_sum)

#-------------------------------------------------------------------------------

# 3 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df3.sim<-df3.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df3.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df3.sim$day>0, 340,0))+4650+(ifelse(df3.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*2)+(340*2)+(724*2))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC

df3.sim<-df3.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df3.summary<- df3.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df3.overall<- df3.summary[!duplicated(df3.summary$id), ]
#
df3.overallcmo90_u_mean<-mean(df3.summary$utility_mean)
df3.overallcmo90_c_mean<-mean(df3.summary$costs_sum)

# Mean survival utility and costs at N dayss
df3.survival<-df3.summary %>% filter(state%in%4)
df3.senscmo90_u_mean<-mean(df3.survival$utility_mean)
df3.senscmo90_c_mean<-mean(df3.survival$costs_sum)

#-------------------------------------------------------------------------------

# 4 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df4.sim<-df4.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df4.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df4.sim$day>0, 340,0))+4650+(ifelse(df4.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*3)+(340*3)+(724*3))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df4.sim<-df4.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df4.summary<- df4.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df4.overall<- df4.summary[!duplicated(df4.summary$id), ]
#
df4.overallcmo90_u_mean<-mean(df4.summary$utility_mean)
df4.overallcmo90_c_mean<-mean(df4.summary$costs_sum)

# Mean survival utility and costs at N dayss
df4.survival<-df4.summary %>% filter(state%in%4)
df4.senscmo90_u_mean<-mean(df4.survival$utility_mean)
df4.senscmo90_c_mean<-mean(df4.survival$costs_sum)

#-------------------------------------------------------------------------------

# 5 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df5.sim<-df5.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df5.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df5.sim$day>0, 340,0))+4650+(ifelse(df5.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*4)+(340*4)+(724*4))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df5.sim<-df5.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df5.summary<- df5.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df5.overall<- df5.summary[!duplicated(df5.summary$id), ]
#
df5.overallcmo90_u_mean<-mean(df5.summary$utility_mean)
df5.overallcmo90_c_mean<-mean(df5.summary$costs_sum)

# Mean survival utility and costs at N dayss
df5.survival<-df5.summary %>% filter(state%in%4)
df5.senscmo90_u_mean<-mean(df5.survival$utility_mean)
df5.senscmo90_c_mean<-mean(df5.survival$costs_sum)

#-------------------------------------------------------------------------------

# 6 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df6.sim<-df6.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df6.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df6.sim$day>0, 340,0))+4650+(ifelse(df6.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*5)+(340*5)+(724*5))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df6.sim<-df6.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df6.summary<- df6.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df6.overall<- df6.summary[!duplicated(df6.summary$id), ]
#
df6.overallcmo90_u_mean<-mean(df6.summary$utility_mean)
df6.overallcmo90_c_mean<-mean(df6.summary$costs_sum)

# Mean survival utility and costs at N dayss
df6.survival<-df6.summary %>% filter(state%in%4)
df6.senscmo90_u_mean<-mean(df6.survival$utility_mean)
df6.senscmo90_c_mean<-mean(df6.survival$costs_sum)

#-------------------------------------------------------------------------------

# 7 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df7.sim<-df7.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df7.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df7.sim$day>0, 340,0))+4650+(ifelse(df7.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*6)+(340*6)+(724*6))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df7.sim<-df7.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df7.summary<- df7.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df7.overall<- df7.summary[!duplicated(df7.summary$id), ]
#
df7.overallcmo90_u_mean<-mean(df7.summary$utility_mean)
df7.overallcmo90_c_mean<-mean(df7.summary$costs_sum)

# Mean survival utility and costs at N dayss
df7.survival<-df7.summary %>% filter(state%in%4)
df7.senscmo90_u_mean<-mean(df7.survival$utility_mean)
df7.senscmo90_c_mean<-mean(df7.survival$costs_sum)

#-------------------------------------------------------------------------------

# 8 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df8.sim<-df8.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df8.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df8.sim$day>0, 340,0))+4650+(ifelse(df8.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*7)+(340*7)+(724*7)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df8.sim<-df8.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df8.summary<- df8.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df8.overall<- df8.summary[!duplicated(df8.summary$id), ]
#
df8.overallcmo90_u_mean<-mean(df8.summary$utility_mean)
df8.overallcmo90_c_mean<-mean(df8.summary$costs_sum)

# Mean survival utility and costs at N dayss
df8.survival<-df8.summary %>% filter(state%in%4)
df8.senscmo90_u_mean<-mean(df8.survival$utility_mean)
df8.senscmo90_c_mean<-mean(df8.survival$costs_sum)

#-------------------------------------------------------------------------------

# 9 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df9.sim<-df9.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df9.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df9.sim$day>0, 340,0))+4650+(ifelse(df9.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*8)+(340*8)+(724*8))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df9.sim<-df9.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                               state=="1"~u_nhic,
                                               state=="3"~u_cmo,
                                               state=="4"~u_discharge, 
                                               state=="5"~u_died),
                            costs= case_when(state=="1"~c_nhic,
                                             state=="2"~c_hic,
                                             state=="3"~c_cmo,
                                             state=="4"~c_lastday,
                                             state=="5"~c_lastday)) 

# Get means of costs and utility 
df9.summary<- df9.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df9.overall<- df9.summary[!duplicated(df9.summary$id), ]
#
df9.overallcmo90_u_mean<-mean(df9.summary$utility_mean)
df9.overallcmo90_c_mean<-mean(df9.summary$costs_sum)

# Mean survival utility and costs at N dayss
df9.survival<-df9.summary %>% filter(state%in%4)
df9.senscmo90_u_mean<-mean(df9.survival$utility_mean)
df9.senscmo90_c_mean<-mean(df9.survival$costs_sum)

#-------------------------------------------------------------------------------

# 10 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df10.sim<-df10.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df10.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df10.sim$day>0, 340,0))+4650+(ifelse(df10.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*9)+(340*9)+(724*9))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 

df10.sim<-df10.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df10.summary<- df10.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df10.overall<- df10.summary[!duplicated(df10.summary$id), ]
#
df10.overallcmo90_u_mean<-mean(df10.summary$utility_mean)
df10.overallcmo90_c_mean<-mean(df10.summary$costs_sum)

# Mean survival utility and costs at N dayss
df10.survival<-df10.summary %>% filter(state%in%4)
df10.senscmo90_u_mean<-mean(df10.survival$utility_mean)
df10.senscmo90_c_mean<-mean(df10.survival$costs_sum)

#-------------------------------------------------------------------------------

# 11 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df11.sim<-df11.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df11.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df11.sim$day>0, 340,0))+4650+(ifelse(df11.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*10)+(340*10)+(724*10))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 

df11.sim<-df11.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df11.summary<- df11.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df11.overall<- df11.summary[!duplicated(df11.summary$id), ]
#
df11.overallcmo90_u_mean<-mean(df11.summary$utility_mean)
df11.overallcmo90_c_mean<-mean(df11.summary$costs_sum)

# Mean survival utility and costs at N dayss
df11.survival<-df11.summary %>% filter(state%in%4)
df11.senscmo90_u_mean<-mean(df11.survival$utility_mean)
df11.senscmo90_c_mean<-mean(df11.survival$costs_sum)

#-------------------------------------------------------------------------------

# 12 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df12.sim<-df12.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df12.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df12.sim$day>0, 340,0))+4650+(ifelse(df12.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*11)+(340*11)+(724*11))   # assumping death at beggining of day and no extra costs 

df12.sim<-df12.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df12.summary<- df12.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df12.overall<- df12.summary[!duplicated(df12.summary$id), ]
#
df12.overallcmo90_u_mean<-mean(df12.summary$utility_mean)
df12.overallcmo90_c_mean<-mean(df12.summary$costs_sum)

# Mean survival utility and costs at N dayss
df12.survival<-df12.summary %>% filter(state%in%4)
df12.senscmo90_u_mean<-mean(df12.survival$utility_mean)
df12.senscmo90_c_mean<-mean(df12.survival$costs_sum)

#-------------------------------------------------------------------------------

# 13 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df13.sim<-df13.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df13.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df13.sim$day>0, 340,0))+4650+(ifelse(df13.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*12)+(340*12)+(724*12)) # assumping death at beggining of day and no extra costs 

df13.sim<-df13.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df13.summary<- df13.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df13.overall<- df13.summary[!duplicated(df13.summary$id), ]
#
df13.overallcmo90_u_mean<-mean(df13.summary$utility_mean)
df13.overallcmo90_c_mean<-mean(df13.summary$costs_sum)

# Mean survival utility and costs at N dayss
df13.survival<-df13.summary %>% filter(state%in%4)
df13.senscmo90_u_mean<-mean(df13.survival$utility_mean)
df13.senscmo90_c_mean<-mean(df13.survival$costs_sum)

#-------------------------------------------------------------------------------

# 14 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df14.sim<-df14.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df14.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df14.sim$day>0, 340,0))+4650+(ifelse(df14.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*13)+(340*13)+(724*13))  # assumping death at beggining of day and no extra costs 

df14.sim<-df14.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df14.summary<- df14.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df14.overall<- df14.summary[!duplicated(df14.summary$id), ]
#
df14.overallcmo90_u_mean<-mean(df14.summary$utility_mean)
df14.overallcmo90_c_mean<-mean(df14.summary$costs_sum)

# Mean survival utility and costs at N dayss
df14.survival<-df14.summary %>% filter(state%in%4)
df14.senscmo90_u_mean<-mean(df14.survival$utility_mean)
df14.senscmo90_c_mean<-mean(df14.survival$costs_sum)

#-------------------------------------------------------------------------------

# 15 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df15.sim<-df15.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df15.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df15.sim$day>0, 340,0))+4650+(ifelse(df15.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*14)+(340*14)+(724*14))  # assumping death at beggining of day and no extra costs 

df15.sim<-df15.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df15.summary<- df15.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df15.overall<- df15.summary[!duplicated(df15.summary$id), ]
#
df15.overallcmo90_u_mean<-mean(df15.summary$utility_mean)
df15.overallcmo90_c_mean<-mean(df15.summary$costs_sum)

# Mean survival utility and costs at N dayss
df15.survival<-df15.summary %>% filter(state%in%4)
df15.senscmo90_u_mean<-mean(df15.survival$utility_mean)
df15.senscmo90_c_mean<-mean(df15.survival$costs_sum)

#-------------------------------------------------------------------------------

# 16 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df16.sim<-df16.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df16.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df16.sim$day>0, 340,0))+4650+(ifelse(df16.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*15)+(340*15)+(724*15))  # assumping death at beggining of day and no extra costs 

df16.sim<-df16.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df16.summary<- df16.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df16.overall<- df16.summary[!duplicated(df16.summary$id), ]
#
df16.overallcmo90_u_mean<-mean(df16.summary$utility_mean)
df16.overallcmo90_c_mean<-mean(df16.summary$costs_sum)

# Mean survival utility and costs at N dayss
df16.survival<-df16.summary %>% filter(state%in%4)
df16.senscmo90_u_mean<-mean(df16.survival$utility_mean)
df16.senscmo90_c_mean<-mean(df16.survival$costs_sum)

#-------------------------------------------------------------------------------

# 17 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df17.sim<-df17.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df17.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df17.sim$day>0, 340,0))+4650+(ifelse(df17.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*16)+(340*16)+(724*16))  # assumping death at beggining of day and no extra costs 

df17.sim<-df17.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df17.summary<- df17.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df17.overall<- df17.summary[!duplicated(df17.summary$id), ]
#
df17.overallcmo90_u_mean<-mean(df17.summary$utility_mean)
df17.overallcmo90_c_mean<-mean(df17.summary$costs_sum)

# Mean survival utility and costs at N dayss
df17.survival<-df17.summary %>% filter(state%in%4)
df17.senscmo90_u_mean<-mean(df17.survival$utility_mean)
df17.senscmo90_c_mean<-mean(df17.survival$costs_sum)

#-------------------------------------------------------------------------------

# 18 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df18.sim<-df18.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df18.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df18.sim$day>0, 340,0))+4650+(ifelse(df18.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*17)+(340*17)+(724*17))  # assumping death at beggining of day and no extra costs 

df18.sim<-df18.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df18.summary<- df18.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df18.overall<- df18.summary[!duplicated(df18.summary$id), ]
#
df18.overallcmo90_u_mean<-mean(df18.summary$utility_mean)
df18.overallcmo90_c_mean<-mean(df18.summary$costs_sum)

# Mean survival utility and costs at N dayss
df18.survival<-df18.summary %>% filter(state%in%4)
df18.senscmo90_u_mean<-mean(df18.survival$utility_mean)
df18.senscmo90_c_mean<-mean(df18.survival$costs_sum)

#-------------------------------------------------------------------------------

# 19 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df19.sim<-df19.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df19.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df19.sim$day>0, 340,0))+4650+(ifelse(df19.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*18)+(340*18)+(724*18))  # assumping death at beggining of day and no extra costs 

df19.sim<-df19.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df19.summary<- df19.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df19.overall<- df19.summary[!duplicated(df19.summary$id), ]
#
df19.overallcmo90_u_mean<-mean(df19.summary$utility_mean)
df19.overallcmo90_c_mean<-mean(df19.summary$costs_sum)

# Mean survival utility and costs at N dayss
df19.survival<-df19.summary %>% filter(state%in%4)
df19.senscmo90_u_mean<-mean(df19.survival$utility_mean)
df19.senscmo90_c_mean<-mean(df19.survival$costs_sum)

#-------------------------------------------------------------------------------

# 20 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df20.sim<-df20.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df20.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df20.sim$day>0, 340,0))+4650+(ifelse(df20.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*19)+(340*19)+(724*19))  # assumping death at beggining of day and no extra costs 

df20.sim<-df20.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df20.summary<- df20.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df20.overall<- df20.summary[!duplicated(df20.summary$id), ]
#
df20.overallcmo90_u_mean<-mean(df20.summary$utility_mean)
df20.overallcmo90_c_mean<-mean(df20.summary$costs_sum)

# Mean survival utility and costs at N dayss
df20.survival<-df20.summary %>% filter(state%in%4)
df20.senscmo90_u_mean<-mean(df20.survival$utility_mean)
df20.senscmo90_c_mean<-mean(df20.survival$costs_sum)

#-------------------------------------------------------------------------------

# 21 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df21.sim<-df21.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df21.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df21.sim$day>0, 340,0))+4650+(ifelse(df21.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*20)+(340*20)+(724*20))  # assumping death at beggining of day and no extra costs 

df21.sim<-df21.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df21.summary<- df21.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df21.overall<- df21.summary[!duplicated(df21.summary$id), ]
#
df21.overallcmo90_u_mean<-mean(df21.summary$utility_mean)
df21.overallcmo90_c_mean<-mean(df21.summary$costs_sum)

# Mean survival utility and costs at N dayss
df21.survival<-df21.summary %>% filter(state%in%4)
df21.senscmo90_u_mean<-mean(df21.survival$utility_mean)
df21.senscmo90_c_mean<-mean(df21.survival$costs_sum)

#-------------------------------------------------------------------------------

# 22 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df22.sim<-df22.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df22.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df22.sim$day>0, 340,0))+4650+(ifelse(df22.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*21)+(340*21)+(724*21)) # assumping death at beggining of day and no extra costs 

df22.sim<-df22.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df22.summary<- df22.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df22.overall<- df22.summary[!duplicated(df22.summary$id), ]
#
df22.overallcmo90_u_mean<-mean(df22.summary$utility_mean)
df22.overallcmo90_c_mean<-mean(df22.summary$costs_sum)

# Mean survival utility and costs at N dayss
df22.survival<-df22.summary %>% filter(state%in%4)
df22.senscmo90_u_mean<-mean(df22.survival$utility_mean)
df22.senscmo90_c_mean<-mean(df22.survival$costs_sum)

#-------------------------------------------------------------------------------

# 23 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df23.sim<-df23.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df23.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df23.sim$day>0, 340,0))+4650+(ifelse(df23.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*22)+(340*22)+(724*22)) # assumping death at beggining of day and no extra costs 

df23.sim<-df23.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df23.summary<- df23.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df23.overall<- df23.summary[!duplicated(df23.summary$id), ]
#
df23.overallcmo90_u_mean<-mean(df23.summary$utility_mean)
df23.overallcmo90_c_mean<-mean(df23.summary$costs_sum)

# Mean survival utility and costs at N dayss
df23.survival<-df23.summary %>% filter(state%in%4)
df23.senscmo90_u_mean<-mean(df23.survival$utility_mean)
df23.senscmo90_c_mean<-mean(df23.survival$costs_sum)

#-------------------------------------------------------------------------------

# 24 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df24.sim<-df24.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df24.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df24.sim$day>0, 340,0))+4650+(ifelse(df24.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*23)+(340*23)+(724*23))  # assumping death at beggining of day and no extra costs 

df24.sim<-df24.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df24.summary<- df24.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df24.overall<- df24.summary[!duplicated(df24.summary$id), ]
#
df24.overallcmo90_u_mean<-mean(df24.summary$utility_mean)
df24.overallcmo90_c_mean<-mean(df24.summary$costs_sum)

# Mean survival utility and costs at N dayss
df24.survival<-df24.summary %>% filter(state%in%4)
df24.senscmo90_u_mean<-mean(df24.survival$utility_mean)
df24.senscmo90_c_mean<-mean(df24.survival$costs_sum)

#-------------------------------------------------------------------------------

# 25 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df25.sim<-df25.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df25.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df25.sim$day>0, 340,0))+4650+(ifelse(df25.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*24)+(340*24)+(724*24)) # assumping death at beggining of day and no extra costs 

df25.sim<-df25.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df25.summary<- df25.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df25.overall<- df25.summary[!duplicated(df25.summary$id), ]
#
df25.overallcmo90_u_mean<-mean(df25.summary$utility_mean)
df25.overallcmo90_c_mean<-mean(df25.summary$costs_sum)

# Mean survival utility and costs at N dayss
df25.survival<-df25.summary %>% filter(state%in%4)
df25.senscmo90_u_mean<-mean(df25.survival$utility_mean)
df25.senscmo90_c_mean<-mean(df25.survival$costs_sum)

#-------------------------------------------------------------------------------

# 26 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df26.sim<-df26.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df26.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df26.sim$day>0, 340,0))+4650+(ifelse(df26.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*25)+(340*25)+(724*25))  # assumping death at beggining of day and no extra costs 

df26.sim<-df26.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df26.summary<- df26.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df26.overall<- df26.summary[!duplicated(df26.summary$id), ]
#
df26.overallcmo90_u_mean<-mean(df26.summary$utility_mean)
df26.overallcmo90_c_mean<-mean(df26.summary$costs_sum)

# Mean survival utility and costs at N dayss
df26.survival<-df26.summary %>% filter(state%in%4)
df26.senscmo90_u_mean<-mean(df26.survival$utility_mean)
df26.senscmo90_c_mean<-mean(df26.survival$costs_sum)

#-------------------------------------------------------------------------------

# 27 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df27.sim<-df27.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df27.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df27.sim$day>0, 340,0))+4650+(ifelse(df27.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*26)+(340*26)+(724*26))  # assumping death at beggining of day and no extra costs 

df27.sim<-df27.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df27.summary<- df27.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df27.overall<- df27.summary[!duplicated(df27.summary$id), ]
#
df27.overallcmo90_u_mean<-mean(df27.summary$utility_mean)
df27.overallcmo90_c_mean<-mean(df27.summary$costs_sum)

# Mean survival utility and costs at N dayss
df27.survival<-df27.summary %>% filter(state%in%4)
df27.senscmo90_u_mean<-mean(df27.survival$utility_mean)
df27.senscmo90_c_mean<-mean(df27.survival$costs_sum)

#-------------------------------------------------------------------------------

# 28 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df28.sim<-df28.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df28.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df28.sim$day>0, 340,0))+4650+(ifelse(df28.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*27)+(340*27)+(724*27))  # assumping death at beggining of day and no extra costs 

df28.sim<-df28.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df28.summary<- df28.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df28.overall<- df28.summary[!duplicated(df28.summary$id), ]
#
df28.overallcmo90_u_mean<-mean(df28.summary$utility_mean)
df28.overallcmo90_c_mean<-mean(df28.summary$costs_sum)

# Mean survival utility and costs at N dayss
df28.survival<-df28.summary %>% filter(state%in%4)
df28.senscmo90_u_mean<-mean(df28.survival$utility_mean)
df28.senscmo90_c_mean<-mean(df28.survival$costs_sum)

#-------------------------------------------------------------------------------

# 29 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df29.sim<-df29.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df29.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df29.sim$day>0, 340,0))+4650+(ifelse(df29.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*28)+(340*28)+(724*28))  # assumping death at beggining of day and no extra costs 

df29.sim<-df29.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df29.summary<- df29.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean=(sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df29.overall<- df29.summary[!duplicated(df29.summary$id), ]
#
df29.overallcmo90_u_mean<-mean(df29.summary$utility_mean)
df29.overallcmo90_c_mean<-mean(df29.summary$costs_sum)

# Mean survival utility and costs at N dayss
df29.survival<-df29.summary %>% filter(state%in%4)
df29.senscmo90_u_mean<-mean(df29.survival$utility_mean)
df29.senscmo90_c_mean<-mean(df29.survival$costs_sum)

#-------------------------------------------------------------------------------

# 30 day hic ////////////////////////////////////////////////////////////////////

# Create flags for sequential days  
df30.sim<-df30.sim %>% mutate(day=(streak_run(id, k=1000)-1))
# Create costs
c_nhic<-3805+662+(ifelse(df30.sim$day>0, 340,0))
c_hic<-3805+662+(ifelse(df30.sim$day>0, 340,0))+4650+(ifelse(df30.sim$day%in%0, 928.99, 0))
c_cmo<-3805+988
c_lastday<-353.00+(3805+4650+928+(775*29)+(340*29)+(724*29))  # assumping death at beggining of day and no extra costs 

df30.sim<-df30.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 

# Get means of costs and utility 
df30.summary<- df30.sim %>% 
  group_by(id) %>% 
  mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
         costs_sum= sum(costs)) %>% 
  ungroup() 

# Overall utility and cost of strategy at N days

df30.overall<- df30.summary[!duplicated(df30.summary$id), ]
#
df30.overallcmo90_u_mean<-mean(df30.summary$utility_mean)
df30.overallcmo90_c_mean<-mean(df30.summary$costs_sum)

# Mean survival utility and costs at N dayss
df30.survival<-df30.summary %>% filter(state%in%4)
df30.senscmo90_u_mean<-mean(df30.survival$utility_mean)
df30.senscmo90_c_mean<-mean(df30.survival$costs_sum)



df1.senscmo90<-df1.summary
df2.senscmo90<-df2.summary
df3.senscmo90<-df3.summary
df4.senscmo90<-df4.summary
df5.senscmo90<-df5.summary
df6.senscmo90<-df6.summary
df7.senscmo90<-df7.summary
df8.senscmo90<-df8.summary
df9.senscmo90<-df9.summary
df10.senscmo90<-df10.summary
df11.senscmo90<-df11.summary
df12.senscmo90<-df12.summary
df13.senscmo90<-df13.summary
df14.senscmo90<-df14.summary
df15.senscmo90<-df15.summary
df16.senscmo90<-df16.summary
df17.senscmo90<-df17.summary
df18.senscmo90<-df18.summary
df19.senscmo90<-df19.summary
df20.senscmo90<-df20.summary
df21.senscmo90<-df21.summary
df22.senscmo90<-df22.summary
df23.senscmo90<-df23.summary
df24.senscmo90<-df24.summary
df25.senscmo90<-df25.summary
df26.senscmo90<-df26.summary
df27.senscmo90<-df27.summary
df28.senscmo90<-df28.summary
df29.senscmo90<-df29.summary
df30.senscmo90<-df30.summary




rm(df1.sim)
rm(df2.sim)
rm(df3.sim)
rm(df4.sim)
rm(df5.sim)
rm(df6.sim)
rm(df7.sim)
rm(df8.sim)
rm(df9.sim)
rm(df10.sim)
rm(df11.sim)
rm(df12.sim)
rm(df13.sim)
rm(df14.sim)
rm(df15.sim)
rm(df16.sim)
rm(df17.sim)
rm(df18.sim)
rm(df19.sim)
rm(df20.sim)
rm(df21.sim)
rm(df22.sim)
rm(df23.sim)
rm(df24.sim)
rm(df25.sim)
rm(df26.sim)
rm(df27.sim)
rm(df28.sim)
rm(df29.sim)
rm(df30.sim)
}

# 1 way sensitivity cmo 90 case results ------------------------------------------------------------
senscmo90.overall_c_vect<-c()
for (i in 1:30){
  senscmo90.overall_c_vect[i]<-get(paste("df", i, ".overallcmo90_c_mean",sep = ""))
}

senscmo90.overall_u_vect<-c()
for (i in 1:30){
  senscmo90.overall_u_vect[i]<-get(paste("df", i, ".overallcmo90_u_mean",sep = ""))
}

senscmo90.survival_c_vect<-c()
for (i in 1:30){
  senscmo90.survival_c_vect[i]<-get(paste("df", i, ".senscmo90_c_mean",sep = ""))
}

senscmo90.survival_u_vect<-c()
for (i in 1:30){
  senscmo90.survival_u_vect[i]<-get(paste("df", i, ".senscmo90_u_mean",sep = ""))
}

senscmo90.ce_results<- matrix(c(senscmo90.overall_c_vect,senscmo90.overall_u_vect,senscmo90.survival_c_vect,senscmo90.survival_u_vect), nrow=30, byrow=FALSE)
colnames(senscmo90.ce_results) <- c("overall_c","overall_u","survival_c","survival_u")
#----

#-----
#______________________________________________________________________________#
#                            2 WAY SENSITIVITY ANALYSIS                        #  
#______________________________________________________________________________#

# 2 WAY SENSITIVITY ANALYSIS  ---------------------------------------------

# 2 WAY SENsITIVITY for GOING FROM HIT TO CMO AND FOR CMO INTO OTHER STATES
# COMPUTING THE SENSITIVITY MATRICES FOR CHANGING CMO AND DEATH PROBABILITIES
{
  example.df<-df
  example.df<-example.df %>% select(icustay_id, icudayseq_asc, states, sofa_group)
  colnames(example.df)[1] <- 'id'  
  colnames(example.df)[2] <- 'day'  
  colnames(example.df)[4] <- 'sofa'  
  
  f1 <- function(data, n){
    ids <- data %>%
      mutate(stateslead = lead(states, default = last(states))) %>%
      group_by(grp = rleid(states == 1)) %>% 
      filter(n() == n, states == 1, stateslead != 1) %>%     
      group_by(id) %>%     
      filter(n() == 1) %>%
      pull(id)
    
    data %>%
      filter(id %in% ids) %>%
      group_by(id) %>% 
      filter(cumsum(states) > 0)
  }
  
  # https://stackoverflow.com/questions/55432875/select-rows-of-ids-that-have-a-pattern-without-losing-the-other-rows/55434003?noredirect=1#comment97588830_55434003
  # aknowledgement to akrun for code assistance for f1
  
  # 1 DAY OF HIC
  
  df1.msm<-f1(example.df, 1)
  # transition table
  df1.tt<-(statetable.msm(states, id, data=df1.msm))
  
  # transition matrix
  df1.tm<-as.matrix.data.frame(df1.tt)
  df1.tm<-rbind(df1.tm, c(0,0,0,1,0))
  df1.tm<-rbind(df1.tm, c(0,0,0,0,1))
  df1.ptm<-df1.tm/rowSums(df1.tm)
  
  # cmo probability is 14% and death 40%
  df1.ptm[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
  df1.ptm[3, ]<- c(0, 0, 0.4, 0.2,0.4)
  sens_matrix.2way14_40<-df1.ptm
  
  # transition matrix
  df1.tm<-as.matrix.data.frame(df1.tt)
  df1.tm<-rbind(df1.tm, c(0,0,0,1,0))
  df1.tm<-rbind(df1.tm, c(0,0,0,0,1))
  df1.ptm<-df1.tm/rowSums(df1.tm)
  
  # cmo probability is 28% and death 52%
  df1.ptm[2, ] <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
  df1.ptm[3, ]<- c(0, 0, 0.32, 0.16,0.52)
  sens_matrix.2way28_52<-df1.ptm
  
  # transition matrix
  df1.tm<-as.matrix.data.frame(df1.tt)
  df1.tm<-rbind(df1.tm, c(0,0,0,1,0))
  df1.tm<-rbind(df1.tm, c(0,0,0,0,1))
  df1.ptm<-df1.tm/rowSums(df1.tm)
  
  # cmo probability is 52% and death 65%
  df1.ptm[2, ] <- c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
  df1.ptm[3, ]<- c(0, 0, 0.23, 0.12,0.65)
  sens_matrix.2way52_65<-df1.ptm
  
  # transition matrix
  df1.tm<-as.matrix.data.frame(df1.tt)
  df1.tm<-rbind(df1.tm, c(0,0,0,1,0))
  df1.tm<-rbind(df1.tm, c(0,0,0,0,1))
  df1.ptm<-df1.tm/rowSums(df1.tm)
  
  # cmo probability is 76% and death 77%
  df1.ptm[2, ] <- c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
  df1.ptm[3, ]<- c(0, 0, 0.1533333, 0.07666667,0.77)
  sens_matrix.2way76_77<-df1.ptm
  
  # transition matrix
  df1.tm<-as.matrix.data.frame(df1.tt)
  df1.tm<-rbind(df1.tm, c(0,0,0,1,0))
  df1.tm<-rbind(df1.tm, c(0,0,0,0,1))
  df1.ptm<-df1.tm/rowSums(df1.tm)
  
  # cmo probability is 90% and death 90%
  df1.ptm[2, ] <- c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
  df1.ptm[3, ]<- c(0, 0, 0.06666666, 0.03333333,0.9)
  sens_matrix.2way90_90<-df1.ptm
  
  
}

{
# 2 day hic
#14_40
sens_matrix.2way14_40_2<-mo2.msm@transitionMatrix
sens_matrix.2way14_40_2[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_2[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_2<-mo2.msm@transitionMatrix
sens_matrix.2way28_52_2[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_2[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_2<-mo2.msm@transitionMatrix
sens_matrix.2way52_65_2[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_2[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_2<-mo2.msm@transitionMatrix
sens_matrix.2way76_77_2[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_2[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_2<-mo2.msm@transitionMatrix
sens_matrix.2way90_90_2[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_2[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)


# 3 day hic
#14_40
sens_matrix.2way14_40_3<-mo3.msm@transitionMatrix
sens_matrix.2way14_40_3[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_3[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_3<-mo3.msm@transitionMatrix
sens_matrix.2way28_52_3[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_3[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_3<-mo3.msm@transitionMatrix
sens_matrix.2way52_65_3[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_3[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_3<-mo3.msm@transitionMatrix
sens_matrix.2way76_77_3[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_3[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_3<-mo3.msm@transitionMatrix
sens_matrix.2way90_90_3[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_3[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)


# 4 day hic
#14_40
sens_matrix.2way14_40_4<-mo4.msm@transitionMatrix
sens_matrix.2way14_40_4[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_4[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_4<-mo4.msm@transitionMatrix
sens_matrix.2way28_52_4[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_4[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_4<-mo4.msm@transitionMatrix
sens_matrix.2way52_65_4[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_4[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_4<-mo4.msm@transitionMatrix
sens_matrix.2way76_77_4[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_4[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_4<-mo4.msm@transitionMatrix
sens_matrix.2way90_90_4[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_4[3, ]<- c(0, 0, 0.06666666, 0.03333333,0.9)

# 5 day hic
#14_40
sens_matrix.2way14_40_5<-mo5.msm@transitionMatrix
sens_matrix.2way14_40_5[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_5[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_5<-mo5.msm@transitionMatrix
sens_matrix.2way28_52_5[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_5[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_5<-mo5.msm@transitionMatrix
sens_matrix.2way52_65_5[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_5[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_5<-mo5.msm@transitionMatrix
sens_matrix.2way76_77_5[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_5[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_5<-mo5.msm@transitionMatrix
sens_matrix.2way90_90_5[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_5[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 6 day hic
#14_40
sens_matrix.2way14_40_6<-mo6.msm@transitionMatrix
sens_matrix.2way14_40_6[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_6[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_6<-mo6.msm@transitionMatrix
sens_matrix.2way28_52_6[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_6[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_6<-mo6.msm@transitionMatrix
sens_matrix.2way52_65_6[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_6[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_6<-mo6.msm@transitionMatrix
sens_matrix.2way76_77_6[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_6[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_6<-mo6.msm@transitionMatrix
sens_matrix.2way90_90_6[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_6[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 7 day hic
#14_40
sens_matrix.2way14_40_7<-mo7.msm@transitionMatrix
sens_matrix.2way14_40_7[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_7[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_7<-mo7.msm@transitionMatrix
sens_matrix.2way28_52_7[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_7[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_7<-mo7.msm@transitionMatrix
sens_matrix.2way52_65_7[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_7[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_7<-mo7.msm@transitionMatrix
sens_matrix.2way76_77_7[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_7[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_7<-mo7.msm@transitionMatrix
sens_matrix.2way90_90_7[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_7[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 8 day hic
#14_40
sens_matrix.2way14_40_8<-mo8.msm@transitionMatrix
sens_matrix.2way14_40_8[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_8[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_8<-mo8.msm@transitionMatrix
sens_matrix.2way28_52_8[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_8[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_8<-mo8.msm@transitionMatrix
sens_matrix.2way52_65_8[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_8[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_8<-mo8.msm@transitionMatrix
sens_matrix.2way76_77_8[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_8[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_8<-mo8.msm@transitionMatrix
sens_matrix.2way90_90_8[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_8[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 9 day hic
#14_40
sens_matrix.2way14_40_9<-mo9.msm@transitionMatrix
sens_matrix.2way14_40_9[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_9[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_9<-mo9.msm@transitionMatrix
sens_matrix.2way28_52_9[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_9[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_9<-mo9.msm@transitionMatrix
sens_matrix.2way52_65_9[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_9[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_9<-mo9.msm@transitionMatrix
sens_matrix.2way76_77_9[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_9[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_9<-mo9.msm@transitionMatrix
sens_matrix.2way90_90_9[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_9[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 10 day hic
#14_40
sens_matrix.2way14_40_10<-mo10.msm@transitionMatrix
sens_matrix.2way14_40_10[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_10[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_10<-mo10.msm@transitionMatrix
sens_matrix.2way28_52_10[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_10[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_10<-mo10.msm@transitionMatrix
sens_matrix.2way52_65_10[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_10[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_10<-mo10.msm@transitionMatrix
sens_matrix.2way76_77_10[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_10[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_10<-mo10.msm@transitionMatrix
sens_matrix.2way90_90_10[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_10[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)


# 11 day hic
#14_40
sens_matrix.2way14_40_11<-mo11.msm@transitionMatrix
sens_matrix.2way14_40_11[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_11[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_11<-mo11.msm@transitionMatrix
sens_matrix.2way28_52_11[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_11[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_11<-mo11.msm@transitionMatrix
sens_matrix.2way52_65_11[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_11[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_11<-mo11.msm@transitionMatrix
sens_matrix.2way76_77_11[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_11[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_11<-mo11.msm@transitionMatrix
sens_matrix.2way90_90_11[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_11[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)



# 12 day hic
#14_40
sens_matrix.2way14_40_12<-mo12.msm@transitionMatrix
sens_matrix.2way14_40_12[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_12[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_12<-mo12.msm@transitionMatrix
sens_matrix.2way28_52_12[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_12[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_12<-mo12.msm@transitionMatrix
sens_matrix.2way52_65_12[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_12[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_12<-mo12.msm@transitionMatrix
sens_matrix.2way76_77_12[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_12[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_12<-mo12.msm@transitionMatrix
sens_matrix.2way90_90_12[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_12[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)


# 13 day hic
#14_40
sens_matrix.2way14_40_13<-mo13.msm@transitionMatrix
sens_matrix.2way14_40_13[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_13[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_13<-mo13.msm@transitionMatrix
sens_matrix.2way28_52_13[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_13[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_13<-mo13.msm@transitionMatrix
sens_matrix.2way52_65_13[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_13[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_13<-mo13.msm@transitionMatrix
sens_matrix.2way76_77_13[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_13[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_13<-mo13.msm@transitionMatrix
sens_matrix.2way90_90_13[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_13[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)


# 14 day hic
#14_40
sens_matrix.2way14_40_14<-mo14.msm@transitionMatrix
sens_matrix.2way14_40_14[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_14[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_14<-mo14.msm@transitionMatrix
sens_matrix.2way28_52_14[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_14[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_14<-mo14.msm@transitionMatrix
sens_matrix.2way52_65_14[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_14[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_14<-mo14.msm@transitionMatrix
sens_matrix.2way76_77_14[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_14[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_14<-mo14.msm@transitionMatrix
sens_matrix.2way90_90_14[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_14[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 15 day hic
#14_40
sens_matrix.2way14_40_15<-mo15.msm@transitionMatrix
sens_matrix.2way14_40_15[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_15[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_15<-mo15.msm@transitionMatrix
sens_matrix.2way28_52_15[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_15[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_15<-mo15.msm@transitionMatrix
sens_matrix.2way52_65_15[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_15[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_15<-mo15.msm@transitionMatrix
sens_matrix.2way76_77_15[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_15[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_15<-mo15.msm@transitionMatrix
sens_matrix.2way90_90_15[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_15[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 16 day hic
#14_40
sens_matrix.2way14_40_16<-mo16.msm@transitionMatrix
sens_matrix.2way14_40_16[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_16[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_16<-mo16.msm@transitionMatrix
sens_matrix.2way28_52_16[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_16[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_16<-mo16.msm@transitionMatrix
sens_matrix.2way52_65_16[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_16[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_16<-mo16.msm@transitionMatrix
sens_matrix.2way76_77_16[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_16[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_16<-mo16.msm@transitionMatrix
sens_matrix.2way90_90_16[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_16[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 17 day hic
#14_40
sens_matrix.2way14_40_17<-mo17.msm@transitionMatrix
sens_matrix.2way14_40_17[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_17[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_17<-mo17.msm@transitionMatrix
sens_matrix.2way28_52_17[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_17[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_17<-mo17.msm@transitionMatrix
sens_matrix.2way52_65_17[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_17[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_17<-mo17.msm@transitionMatrix
sens_matrix.2way76_77_17[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_17[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_17<-mo17.msm@transitionMatrix
sens_matrix.2way90_90_17[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_17[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 18 day hic
#14_40
sens_matrix.2way14_40_18<-mo18.msm@transitionMatrix
sens_matrix.2way14_40_18[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_18[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_18<-mo18.msm@transitionMatrix
sens_matrix.2way28_52_18[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_18[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_18<-mo18.msm@transitionMatrix
sens_matrix.2way52_65_18[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_18[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_18<-mo18.msm@transitionMatrix
sens_matrix.2way76_77_18[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_18[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_18<-mo18.msm@transitionMatrix
sens_matrix.2way90_90_18[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_18[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 19 day hic
#14_40
sens_matrix.2way14_40_19<-mo19.msm@transitionMatrix
sens_matrix.2way14_40_19[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_19[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_19<-mo19.msm@transitionMatrix
sens_matrix.2way28_52_19[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_19[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_19<-mo19.msm@transitionMatrix
sens_matrix.2way52_65_19[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_19[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_19<-mo19.msm@transitionMatrix
sens_matrix.2way76_77_19[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_19[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)

#90_90
sens_matrix.2way90_90_19<-mo19.msm@transitionMatrix
sens_matrix.2way90_90_19[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_19[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 20 day hic
#14_40
sens_matrix.2way14_40_20<-mo20.msm@transitionMatrix
sens_matrix.2way14_40_20[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_20[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_20<-mo20.msm@transitionMatrix
sens_matrix.2way28_52_20[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_20[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_20<-mo20.msm@transitionMatrix
sens_matrix.2way52_65_20[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_20[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_20<-mo20.msm@transitionMatrix
sens_matrix.2way76_77_20[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_20[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_20<-mo20.msm@transitionMatrix
sens_matrix.2way90_90_20[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_20[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)


# 21 day hic
#14_40
sens_matrix.2way14_40_21<-mo21.msm@transitionMatrix
sens_matrix.2way14_40_21[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_21[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_21<-mo21.msm@transitionMatrix
sens_matrix.2way28_52_21[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_21[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_21<-mo21.msm@transitionMatrix
sens_matrix.2way52_65_21[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_21[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_21<-mo21.msm@transitionMatrix
sens_matrix.2way76_77_21[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_21[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_21<-mo21.msm@transitionMatrix
sens_matrix.2way90_90_21[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_21[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)



# 22 day hic
#14_40
sens_matrix.2way14_40_22<-mo22.msm@transitionMatrix
sens_matrix.2way14_40_22[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_22[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_22<-mo22.msm@transitionMatrix
sens_matrix.2way28_52_22[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_22[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_22<-mo22.msm@transitionMatrix
sens_matrix.2way52_65_22[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_22[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_22<-mo22.msm@transitionMatrix
sens_matrix.2way76_77_22[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_22[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_22<-mo22.msm@transitionMatrix
sens_matrix.2way90_90_22[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_22[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)


# 23 day hic
#14_40
sens_matrix.2way14_40_23<-mo23.msm@transitionMatrix
sens_matrix.2way14_40_23[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_23[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_23<-mo23.msm@transitionMatrix
sens_matrix.2way28_52_23[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_23[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_23<-mo23.msm@transitionMatrix
sens_matrix.2way52_65_23[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_23[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_23<-mo23.msm@transitionMatrix
sens_matrix.2way76_77_23[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_23[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_23<-mo23.msm@transitionMatrix
sens_matrix.2way90_90_23[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_23[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)


# 24 day hic
#14_40
sens_matrix.2way14_40_24<-mo24.msm@transitionMatrix
sens_matrix.2way14_40_24[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_24[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_24<-mo24.msm@transitionMatrix
sens_matrix.2way28_52_24[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_24[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_24<-mo24.msm@transitionMatrix
sens_matrix.2way52_65_24[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_24[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_24<-mo24.msm@transitionMatrix
sens_matrix.2way76_77_24[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_24[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_24<-mo24.msm@transitionMatrix
sens_matrix.2way90_90_24[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_24[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 25 day hic
#14_40
sens_matrix.2way14_40_25<-mo25.msm@transitionMatrix
sens_matrix.2way14_40_25[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_25[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_25<-mo25.msm@transitionMatrix
sens_matrix.2way28_52_25[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_25[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_25<-mo25.msm@transitionMatrix
sens_matrix.2way52_65_25[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_25[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_25<-mo25.msm@transitionMatrix
sens_matrix.2way76_77_25[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_25[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_25<-mo25.msm@transitionMatrix
sens_matrix.2way90_90_25[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_25[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 26 day hic
#14_40
sens_matrix.2way14_40_26<-mo26.msm@transitionMatrix
sens_matrix.2way14_40_26[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_26[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_26<-mo26.msm@transitionMatrix
sens_matrix.2way28_52_26[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_26[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_26<-mo26.msm@transitionMatrix
sens_matrix.2way52_65_26[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_26[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_26<-mo26.msm@transitionMatrix
sens_matrix.2way76_77_26[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_26[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_26<-mo26.msm@transitionMatrix
sens_matrix.2way90_90_26[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_26[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 27 day hic
#14_40
sens_matrix.2way14_40_27<-mo27.msm@transitionMatrix
sens_matrix.2way14_40_27[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_27[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_27<-mo27.msm@transitionMatrix
sens_matrix.2way28_52_27[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_27[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_27<-mo27.msm@transitionMatrix
sens_matrix.2way52_65_27[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_27[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_27<-mo27.msm@transitionMatrix
sens_matrix.2way76_77_27[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_27[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_27<-mo27.msm@transitionMatrix
sens_matrix.2way90_90_27[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_27[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 28 day hic
#14_40
sens_matrix.2way14_40_28<-mo28.msm@transitionMatrix
sens_matrix.2way14_40_28[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_28[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_28<-mo28.msm@transitionMatrix
sens_matrix.2way28_52_28[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_28[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_28<-mo28.msm@transitionMatrix
sens_matrix.2way52_65_28[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_28[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_28<-mo28.msm@transitionMatrix
sens_matrix.2way76_77_28[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_28[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_28<-mo28.msm@transitionMatrix
sens_matrix.2way90_90_28[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_28[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 29 day hic
#14_40
sens_matrix.2way14_40_29<-mo29.msm@transitionMatrix
sens_matrix.2way14_40_29[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_29[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_29<-mo29.msm@transitionMatrix
sens_matrix.2way28_52_29[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_29[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_29<-mo29.msm@transitionMatrix
sens_matrix.2way52_65_29[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_29[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_29<-mo29.msm@transitionMatrix
sens_matrix.2way76_77_29[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_29[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_29<-mo29.msm@transitionMatrix
sens_matrix.2way90_90_29[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_29[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)

# 30 day hic
#14_40
sens_matrix.2way14_40_30<-mo30.msm@transitionMatrix
sens_matrix.2way14_40_30[2, ] <- c((0.9*0.2031250),0,(1-((0.9*0.2031250)+(0.9*0.5468750)+(0.9*0.2031250))),(0.9*0.5468750),(0.9*0.2031250))
sens_matrix.2way14_40_30[3, ] <-c(0, 0, 0.4, 0.2,0.4)
#28_52.5
sens_matrix.2way28_52_30<-mo30.msm@transitionMatrix
sens_matrix.2way28_52_30[2, ]  <- c((0.75*0.2031250),0,(1-((0.75*0.2031250)+(0.75*0.5468750)+(0.75*0.2031250))),(0.75*0.5468750),(0.75*0.2031250))
sens_matrix.2way28_52_30[3,]<- c(0, 0, 0.32, 0.16,0.52)
#52_65
sens_matrix.2way52_65_30<-mo30.msm@transitionMatrix
sens_matrix.2way52_65_30[2, ]  <-  c((0.5*0.2031250),0,(1-((0.5*0.2031250)+(0.5*0.5468750)+(0.5*0.2031250))),(0.5*0.5468750),(0.5*0.2031250))
sens_matrix.2way52_65_30[3, ]  <- c(0, 0, 0.23, 0.12,0.65)
#76_77.7
sens_matrix.2way76_77_30<-mo30.msm@transitionMatrix
sens_matrix.2way76_77_30[2, ]  <-  c((0.25*0.2031250),0,(1-((0.25*0.2031250)+(0.25*0.5468750)+(0.25*0.2031250))),(0.25*0.5468750),(0.25*0.2031250))
sens_matrix.2way76_77_30[3, ]  <-c(0, 0, 0.1533333, 0.07666667,0.77)
#90_90
sens_matrix.2way90_90_30<-mo30.msm@transitionMatrix
sens_matrix.2way90_90_30[2, ]  <-  c((0.10*0.2031250),0,(1-((0.10*0.2031250)+(0.10*0.5468750)+(0.10*0.2031250))),(0.10*0.5468750),(0.10*0.2031250))
sens_matrix.2way90_90_30[3, ] <- c(0, 0, 0.06666666, 0.03333333,0.9)
}

# markov objects  2way 14 - death 40----

{
  mo1.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40), name="MarkovChain Q1")
  mo2.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_2), name="MarkovChain Q1")
  mo3.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_3), name="MarkovChain Q1")
  mo4.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_4), name="MarkovChain Q1")
  mo5.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_5), name="MarkovChain Q1")
  mo6.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_6), name="MarkovChain Q1")
  mo7.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_7), name="MarkovChain Q1")
  mo8.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_8), name="MarkovChain Q1")
  mo9.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_9), name="MarkovChain Q1")
  mo10.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_10), name="MarkovChain Q1")
  mo11.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_11), name="MarkovChain Q1")
  mo12.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_12), name="MarkovChain Q1")
  mo13.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_13), name="MarkovChain Q1")
  mo14.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_14), name="MarkovChain Q1")
  mo15.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_15), name="MarkovChain Q1")
  mo16.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_16), name="MarkovChain Q1")
  mo17.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_17), name="MarkovChain Q1")
  mo18.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_18), name="MarkovChain Q1")
  mo19.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_19), name="MarkovChain Q1")
  mo20.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_20), name="MarkovChain Q1")
  mo21.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_21), name="MarkovChain Q1")
  mo22.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_22), name="MarkovChain Q1")
  mo23.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_23), name="MarkovChain Q1")
  mo24.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_24), name="MarkovChain Q1")
  mo25.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_25), name="MarkovChain Q1")
  mo26.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_26), name="MarkovChain Q1")
  mo27.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_27), name="MarkovChain Q1")
  mo28.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_28), name="MarkovChain Q1")
  mo29.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_29), name="MarkovChain Q1")
  mo30.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way14_40_20), name="MarkovChain Q1")
}

# SENSITIVITY ANALYSIS first order monte carlo simulations cmo 14 death 40 ---------

# 2 way 

B <- 100
N <- 30

{
  sim1.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo1.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim2.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo2.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim3.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo3.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim4.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo4.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim5.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo5.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim6.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo6.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim7.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo7.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim8.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo8.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim9.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo9.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim10.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo10.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim11.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo11.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim12.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo12.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim13.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo13.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim14.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo14.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim15.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo15.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim16.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo16.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim17.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo17.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim18.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo18.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim19.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo19.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim20.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo20.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim21.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo21.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim22.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo22.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim23.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo23.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim24.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo24.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim25.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo25.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim26.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo26.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim27.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo27.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim28.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo28.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim29.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo29.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim30.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo30.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  

}
# 1 non-agressive
# 2 aggressive
# 3 cmo
# 4 discharged
# 5 death


# Convert simulations into data frames 
{
  df1.sim<- as.data.frame(sim1.msm)
  df1.sim<-df1.sim %>% gather(key = "id", value = "state")
  df1.sim<-df1.sim %>% mutate(col1=streak_run(state, k=1000))
  df1.sim<-df1.sim %>% filter(!(state=="4" & col1!=1))
  df1.sim<-df1.sim %>% filter(!(state=="5" & col1!=1))
  
  df2.sim<- as.data.frame(sim2.msm)
  df2.sim<-df2.sim %>% gather(key = "id", value = "state")
  df2.sim<-df2.sim %>% mutate(col1=streak_run(state, k=1000))
  df2.sim<-df2.sim %>% filter(!(state=="4" & col1!=1))
  df2.sim<-df2.sim %>% filter(!(state=="5" & col1!=1))
  
  df3.sim<- as.data.frame(sim3.msm)
  df3.sim<-df3.sim %>% gather(key = "id", value = "state")
  df3.sim<-df3.sim %>% mutate(col1=streak_run(state, k=1000))
  df3.sim<-df3.sim %>% filter(!(state=="4" & col1!=1))
  df3.sim<-df3.sim %>% filter(!(state=="5" & col1!=1))
  
  df4.sim<- as.data.frame(sim4.msm)
  df4.sim<-df4.sim %>% gather(key = "id", value = "state")
  df4.sim<-df4.sim %>% mutate(col1=streak_run(state, k=1000))
  df4.sim<-df4.sim %>% filter(!(state=="4" & col1!=1))
  df4.sim<-df4.sim %>% filter(!(state=="5" & col1!=1))
  
  df5.sim<- as.data.frame(sim5.msm)
  df5.sim<-df5.sim %>% gather(key = "id", value = "state")
  df5.sim<-df5.sim %>% mutate(col1=streak_run(state, k=1000))
  df5.sim<-df5.sim %>% filter(!(state=="4" & col1!=1))
  df5.sim<-df5.sim %>% filter(!(state=="5" & col1!=1))
  
  df6.sim<- as.data.frame(sim6.msm)
  df6.sim<-df6.sim %>% gather(key = "id", value = "state")
  df6.sim<-df6.sim %>% mutate(col1=streak_run(state, k=1000))
  df6.sim<-df6.sim %>% filter(!(state=="4" & col1!=1))
  df6.sim<-df6.sim %>% filter(!(state=="5" & col1!=1))
  
  df7.sim<- as.data.frame(sim7.msm)
  df7.sim<-df7.sim %>% gather(key = "id", value = "state")
  df7.sim<-df7.sim %>% mutate(col1=streak_run(state, k=1000))
  df7.sim<-df7.sim %>% filter(!(state=="4" & col1!=1))
  df7.sim<-df7.sim %>% filter(!(state=="5" & col1!=1))
  
  df8.sim<- as.data.frame(sim8.msm)
  df8.sim<-df8.sim %>% gather(key = "id", value = "state")
  df8.sim<-df8.sim %>% mutate(col1=streak_run(state, k=1000))
  df8.sim<-df8.sim %>% filter(!(state=="4" & col1!=1))
  df8.sim<-df8.sim %>% filter(!(state=="5" & col1!=1))
  
  df9.sim<- as.data.frame(sim9.msm)
  df9.sim<-df9.sim %>% gather(key = "id", value = "state")
  df9.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df9.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df9.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df10.sim<- as.data.frame(sim10.msm)
  df10.sim<-df9.sim %>% gather(key = "id", value = "state")
  df10.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df10.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df10.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df11.sim<- as.data.frame(sim11.msm)
  df11.sim<-df11.sim %>% gather(key = "id", value = "state")
  df11.sim<-df11.sim %>% mutate(col1=streak_run(state, k=1000))
  df11.sim<-df11.sim %>% filter(!(state=="4" & col1!=1))
  df11.sim<-df11.sim %>% filter(!(state=="5" & col1!=1))
  
  df12.sim<- as.data.frame(sim12.msm)
  df12.sim<-df12.sim %>% gather(key = "id", value = "state")
  df12.sim<-df12.sim %>% mutate(col1=streak_run(state, k=1000))
  df12.sim<-df12.sim %>% filter(!(state=="4" & col1!=1))
  df12.sim<-df12.sim %>% filter(!(state=="5" & col1!=1))
  
  df13.sim<- as.data.frame(sim13.msm)
  df13.sim<-df13.sim %>% gather(key = "id", value = "state")
  df13.sim<-df13.sim %>% mutate(col1=streak_run(state, k=1000))
  df13.sim<-df13.sim %>% filter(!(state=="4" & col1!=1))
  df13.sim<-df13.sim %>% filter(!(state=="5" & col1!=1))
  
  df14.sim<- as.data.frame(sim14.msm)
  df14.sim<-df14.sim %>% gather(key = "id", value = "state")
  df14.sim<-df14.sim %>% mutate(col1=streak_run(state, k=1000))
  df14.sim<-df14.sim %>% filter(!(state=="4" & col1!=1))
  df14.sim<-df14.sim %>% filter(!(state=="5" & col1!=1))
  
  df15.sim<- as.data.frame(sim15.msm)
  df15.sim<-df15.sim %>% gather(key = "id", value = "state")
  df15.sim<-df15.sim %>% mutate(col1=streak_run(state, k=1000))
  df15.sim<-df15.sim %>% filter(!(state=="4" & col1!=1))
  df15.sim<-df15.sim %>% filter(!(state=="5" & col1!=1))
  
  df16.sim<- as.data.frame(sim16.msm)
  df16.sim<-df16.sim %>% gather(key = "id", value = "state")
  df16.sim<-df16.sim %>% mutate(col1=streak_run(state, k=1000))
  df16.sim<-df16.sim %>% filter(!(state=="4" & col1!=1))
  df16.sim<-df16.sim %>% filter(!(state=="5" & col1!=1))
  
  df17.sim<- as.data.frame(sim17.msm)
  df17.sim<-df17.sim %>% gather(key = "id", value = "state")
  df17.sim<-df17.sim %>% mutate(col1=streak_run(state, k=1000))
  df17.sim<-df17.sim %>% filter(!(state=="4" & col1!=1))
  df17.sim<-df17.sim %>% filter(!(state=="5" & col1!=1))
  
  df18.sim<- as.data.frame(sim18.msm)
  df18.sim<-df18.sim %>% gather(key = "id", value = "state")
  df18.sim<-df18.sim %>% mutate(col1=streak_run(state, k=1000))
  df18.sim<-df18.sim %>% filter(!(state=="4" & col1!=1))
  df18.sim<-df18.sim %>% filter(!(state=="5" & col1!=1))
  
  df19.sim<- as.data.frame(sim19.msm)
  df19.sim<-df19.sim %>% gather(key = "id", value = "state")
  df19.sim<-df19.sim %>% mutate(col1=streak_run(state, k=1000))
  df19.sim<-df19.sim %>% filter(!(state=="4" & col1!=1))
  df19.sim<-df19.sim %>% filter(!(state=="5" & col1!=1))
  
  df20.sim<- as.data.frame(sim20.msm)
  df20.sim<-df9.sim %>% gather(key = "id", value = "state")
  df20.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df20.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df20.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df21.sim<- as.data.frame(sim21.msm)
  df21.sim<-df21.sim %>% gather(key = "id", value = "state")
  df21.sim<-df21.sim %>% mutate(col1=streak_run(state, k=1000))
  df21.sim<-df21.sim %>% filter(!(state=="4" & col1!=1))
  df21.sim<-df21.sim %>% filter(!(state=="5" & col1!=1))
  
  df22.sim<- as.data.frame(sim22.msm)
  df22.sim<-df22.sim %>% gather(key = "id", value = "state")
  df22.sim<-df22.sim %>% mutate(col1=streak_run(state, k=1000))
  df22.sim<-df22.sim %>% filter(!(state=="4" & col1!=1))
  df22.sim<-df22.sim %>% filter(!(state=="5" & col1!=1))
  
  df23.sim<- as.data.frame(sim23.msm)
  df23.sim<-df23.sim %>% gather(key = "id", value = "state")
  df23.sim<-df23.sim %>% mutate(col1=streak_run(state, k=1000))
  df23.sim<-df23.sim %>% filter(!(state=="4" & col1!=1))
  df23.sim<-df23.sim %>% filter(!(state=="5" & col1!=1))
  
  df24.sim<- as.data.frame(sim24.msm)
  df24.sim<-df24.sim %>% gather(key = "id", value = "state")
  df24.sim<-df24.sim %>% mutate(col1=streak_run(state, k=1000))
  df24.sim<-df24.sim %>% filter(!(state=="4" & col1!=1))
  df24.sim<-df24.sim %>% filter(!(state=="5" & col1!=1))
  
  df25.sim<- as.data.frame(sim25.msm)
  df25.sim<-df25.sim %>% gather(key = "id", value = "state")
  df25.sim<-df25.sim %>% mutate(col1=streak_run(state, k=1000))
  df25.sim<-df25.sim %>% filter(!(state=="4" & col1!=1))
  df25.sim<-df25.sim %>% filter(!(state=="5" & col1!=1))
  
  df26.sim<- as.data.frame(sim26.msm)
  df26.sim<-df26.sim %>% gather(key = "id", value = "state")
  df26.sim<-df26.sim %>% mutate(col1=streak_run(state, k=1000))
  df26.sim<-df26.sim %>% filter(!(state=="4" & col1!=1))
  df26.sim<-df26.sim %>% filter(!(state=="5" & col1!=1))
  
  df27.sim<- as.data.frame(sim27.msm)
  df27.sim<-df27.sim %>% gather(key = "id", value = "state")
  df27.sim<-df27.sim %>% mutate(col1=streak_run(state, k=1000))
  df27.sim<-df27.sim %>% filter(!(state=="4" & col1!=1))
  df27.sim<-df27.sim %>% filter(!(state=="5" & col1!=1))
  
  df28.sim<- as.data.frame(sim28.msm)
  df28.sim<-df28.sim %>% gather(key = "id", value = "state")
  df28.sim<-df28.sim %>% mutate(col1=streak_run(state, k=1000))
  df28.sim<-df28.sim %>% filter(!(state=="4" & col1!=1))
  df28.sim<-df28.sim %>% filter(!(state=="5" & col1!=1))
  
  df29.sim<- as.data.frame(sim29.msm)
  df29.sim<-df29.sim %>% gather(key = "id", value = "state")
  df29.sim<-df29.sim %>% mutate(col1=streak_run(state, k=1000))
  df29.sim<-df29.sim %>% filter(!(state=="4" & col1!=1))
  df29.sim<-df29.sim %>% filter(!(state=="5" & col1!=1))
  
  df30.sim<- as.data.frame(sim30.msm)
  df30.sim<-df30.sim %>% gather(key = "id", value = "state")
  df30.sim<-df30.sim %>% mutate(col1=streak_run(state, k=1000))
  df30.sim<-df30.sim %>% filter(!(state=="4" & col1!=1))
  df30.sim<-df30.sim %>% filter(!(state=="5" & col1!=1))
  
  rm(sim1.msm) 
  rm(sim2.msm)
  rm(sim3.msm)
  rm(sim4.msm)
  rm(sim5.msm)
  rm(sim6.msm)
  rm(sim7.msm)
  rm(sim8.msm)
  rm(sim9.msm)
  rm(sim10.msm)
  rm(sim11.msm)
  rm(sim12.msm)
  rm(sim13.msm)
  rm(sim14.msm)
  rm(sim15.msm)
  rm(sim16.msm)
  rm(sim17.msm)
  rm(sim18.msm)
  rm(sim19.msm)
  rm(sim20.msm)
  rm(sim21.msm)
  rm(sim22.msm)
  rm(sim23.msm)
  rm(sim24.msm)
  rm(sim25.msm)
  rm(sim26.msm)
  rm(sim27.msm)
  rm(sim28.msm)
  rm(sim29.msm)
  rm(sim30.msm)
}


# SENSITIVITY ANALYSIS Utilities and costs cmo 14 deaths 40- ------------------------
{
  # Utility value for being in ICU:	0.66, 0.39-0.93,	Beta,	(Cost effectiveness of antimicrobial catheters in the intensive care unit: addressing uncertainty in the decision)
  # Utility value for highly invasive care:	0.55,	0.39-0.71,	(Beta,	Comparison of Health-Related Quality of Life Preferences Between Physicians and Cirrhotic Patients: Implications for Cost–Utility Analysesin Chronic Liver Disease)
  # Utility value for paliative care:	0.28,	0.23-0.35,	Beta,	(Ultrasound Elastography for Fibrosis Surveillance Is Cos tEffective in Patients with Chronic Hepatitis C Virus in the UK)
  
  # Daily costs:
  # ICU Room & Board	 $3,805.00 	-	-
  # Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
  # Mechanical ventilation first day 	 $928.99 	-	-
  # Mechanical ventilation	 $775.00 	-	-
  # Comfort care	 $988.00 	-	-
  # Initial hospital physican care	 $662.00 	-	-
  # Subsequent hospital physican care	 $340.00 	-	-
  # Hospital discharge day	 $353.00 	-	-
  # Critical care phsycian care	 $724.00 	-	-
  
  # sources: BIDMC - Patient Financial Services & HMFP - Finance
  
  # utilities
  u_nhic<-0.66
  u_hic<-0.55
  u_cmo<-0.28
  u_discharge<-1
  u_died<-1
  
  # 1 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df1.sim<-df1.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df1.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df1.sim$day>0, 340,0))+4650+(ifelse(df1.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00 # assumping death at beggining of day and no extra costs 
  
  df1.sim<-df1.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df1.summary<- df1.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= mean(utility),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df1.overall<- df1.summary[!duplicated(df1.summary$id), ]
  #
  df1.overall2way14_40_1_u_mean<-mean(df1.summary$utility_mean)
  df1.overall2way14_40_1_c_mean<-mean(df1.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df1.survival<-df1.summary %>% filter(state%in%4)
  df1.sens2way14_40_1_u_mean<-mean(df1.survival$utility_mean)
  df1.sens2way14_40_1_c_mean<-mean(df1.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 2 day hic ////////////////////////////////////////////////////////////////////
  
  # Daily costs:
  # ICU Room & Board	 $3,805.00 	-	-
  # Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
  # Mechanical ventilation first day 	 $928.99 	-	-
  # Mechanical ventilation	 $775.00 	-	-
  # Comfort care	 $988.00 	-	-
  # Initial hospital physican care	 $662.00 	-	-
  # Subsequent hospital physican care	 $340.00 	-	-
  # Hospital discharge day	 $353.00 	-	-
  # Critical care phsycian care	 $724.00 	-	-
  
  # Create flags for sequential days  
  df2.sim<-df2.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  
  # Create costs
  c_nhic<-3805+662+(ifelse(df2.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df2.sim$day>0, 340,0))+4650+(ifelse(df2.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*1)+(340*1)+(724*1)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC 
  
  df2.sim<-df2.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df2.summary<- df2.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))), # adding extra days of utility given HIC
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df2.overall<- df2.summary[!duplicated(df2.summary$id), ]
  #
  df2.overall2way14_40_2_u_mean<-mean(df2.summary$utility_mean)
  df2.overall2way14_40_2_c_mean<-mean(df2.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df2.survival<-df2.summary %>% filter(state%in%4)
  df2.sens2way14_40_2_u_mean<-mean(df2.survival$utility_mean)
  df2.sens2way14_40_2_c_mean<-mean(df2.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 3 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df3.sim<-df3.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df3.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df3.sim$day>0, 340,0))+4650+(ifelse(df3.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*2)+(340*2)+(724*2))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC
  
  df3.sim<-df3.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df3.summary<- df3.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df3.overall<- df3.summary[!duplicated(df3.summary$id), ]
  #
  df3.overall2way14_40_3_u_mean<-mean(df3.summary$utility_mean)
  df3.overall2way14_40_3_c_mean<-mean(df3.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df3.survival<-df3.summary %>% filter(state%in%4)
  df3.sens2way14_40_3_u_mean<-mean(df3.survival$utility_mean)
  df3.sens2way14_40_3_c_mean<-mean(df3.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 4 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df4.sim<-df4.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df4.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df4.sim$day>0, 340,0))+4650+(ifelse(df4.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*3)+(340*3)+(724*3))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 
  
  df4.sim<-df4.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df4.summary<- df4.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df4.overall<- df4.summary[!duplicated(df4.summary$id), ]
  #
  df4.overall2way14_40_4_u_mean<-mean(df4.summary$utility_mean)
  df4.overall2way14_40_4_c_mean<-mean(df4.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df4.survival<-df4.summary %>% filter(state%in%4)
  df4.sens2way14_40_4_u_mean<-mean(df4.survival$utility_mean)
  df4.sens2way14_40_4_c_mean<-mean(df4.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 5 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df5.sim<-df5.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df5.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df5.sim$day>0, 340,0))+4650+(ifelse(df5.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*4)+(340*4)+(724*4))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df5.sim<-df5.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df5.summary<- df5.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df5.overall<- df5.summary[!duplicated(df5.summary$id), ]
  #
  df5.overall2way14_40_5_u_mean<-mean(df5.summary$utility_mean)
  df5.overall2way14_40_5_c_mean<-mean(df5.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df5.survival<-df5.summary %>% filter(state%in%4)
  df5.sens2way14_40_5_u_mean<-mean(df5.survival$utility_mean)
  df5.sens2way14_40_5_c_mean<-mean(df5.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 6 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df6.sim<-df6.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df6.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df6.sim$day>0, 340,0))+4650+(ifelse(df6.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*5)+(340*5)+(724*5))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df6.sim<-df6.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df6.summary<- df6.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df6.overall<- df6.summary[!duplicated(df6.summary$id), ]
  #
  df6.overall2way14_40_6_u_mean<-mean(df6.summary$utility_mean)
  df6.overall2way14_40_6_c_mean<-mean(df6.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df6.survival<-df6.summary %>% filter(state%in%4)
  df6.sens2way14_40_6_u_mean<-mean(df6.survival$utility_mean)
  df6.sens2way14_40_6_c_mean<-mean(df6.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 7 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df7.sim<-df7.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df7.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df7.sim$day>0, 340,0))+4650+(ifelse(df7.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*6)+(340*6)+(724*6))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df7.sim<-df7.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df7.summary<- df7.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df7.overall<- df7.summary[!duplicated(df7.summary$id), ]
  #
  df7.overall2way14_40_7_u_mean<-mean(df7.summary$utility_mean)
  df7.overall2way14_40_7_c_mean<-mean(df7.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df7.survival<-df7.summary %>% filter(state%in%4)
  df7.sens2way14_40_7_u_mean<-mean(df7.survival$utility_mean)
  df7.sens2way14_40_7_c_mean<-mean(df7.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 8 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df8.sim<-df8.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df8.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df8.sim$day>0, 340,0))+4650+(ifelse(df8.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*7)+(340*7)+(724*7)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df8.sim<-df8.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df8.summary<- df8.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df8.overall<- df8.summary[!duplicated(df8.summary$id), ]
  #
  df8.overall2way14_40_8_u_mean<-mean(df8.summary$utility_mean)
  df8.overall2way14_40_8_c_mean<-mean(df8.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df8.survival<-df8.summary %>% filter(state%in%4)
  df8.sens2way14_40_8_u_mean<-mean(df8.survival$utility_mean)
  df8.sens2way14_40_8_c_mean<-mean(df8.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 9 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df9.sim<-df9.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df9.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df9.sim$day>0, 340,0))+4650+(ifelse(df9.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*8)+(340*8)+(724*8))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df9.sim<-df9.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df9.summary<- df9.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df9.overall<- df9.summary[!duplicated(df9.summary$id), ]
  #
  df9.overall2way14_40_9_u_mean<-mean(df9.summary$utility_mean)
  df9.overall2way14_40_9_c_mean<-mean(df9.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df9.survival<-df9.summary %>% filter(state%in%4)
  df9.sens2way14_40_9_u_mean<-mean(df9.survival$utility_mean)
  df9.sens2way14_40_9_c_mean<-mean(df9.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 10 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df10.sim<-df10.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df10.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df10.sim$day>0, 340,0))+4650+(ifelse(df10.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*9)+(340*9)+(724*9))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 
  
  df10.sim<-df10.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df10.summary<- df10.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df10.overall<- df10.summary[!duplicated(df10.summary$id), ]
  #
  df10.overall2way14_40_10_u_mean<-mean(df10.summary$utility_mean)
  df10.overall2way14_40_10_c_mean<-mean(df10.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df10.survival<-df10.summary %>% filter(state%in%4)
  df10.sens2way14_40_10_u_mean<-mean(df10.survival$utility_mean)
  df10.sens2way14_40_10_c_mean<-mean(df10.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 11 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df11.sim<-df11.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df11.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df11.sim$day>0, 340,0))+4650+(ifelse(df11.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*10)+(340*10)+(724*10))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df11.sim<-df11.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df11.summary<- df11.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df11.overall<- df11.summary[!duplicated(df11.summary$id), ]
  #
  df11.overall2way14_40_11_u_mean<-mean(df11.summary$utility_mean)
  df11.overall2way14_40_11_c_mean<-mean(df11.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df11.survival<-df11.summary %>% filter(state%in%4)
  df11.sens2way14_40_11_u_mean<-mean(df11.survival$utility_mean) 
  df11.sens2way14_40_11_c_mean<-mean(df11.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 12 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df12.sim<-df12.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df12.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df12.sim$day>0, 340,0))+4650+(ifelse(df12.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*11)+(340*11)+(724*11))   # assumping death at beggining of day and no extra costs 
  
  df12.sim<-df12.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df12.summary<- df12.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df12.overall<- df12.summary[!duplicated(df12.summary$id), ]
  #
  df12.overall2way14_40_12_u_mean<-mean(df12.summary$utility_mean)
  df12.overall2way14_40_12_c_mean<-mean(df12.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df12.survival<-df12.summary %>% filter(state%in%4)
  df12.sens2way14_40_12_u_mean<-mean(df12.survival$utility_mean)
  df12.sens2way14_40_12_c_mean<-mean(df12.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 13 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df13.sim<-df13.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df13.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df13.sim$day>0, 340,0))+4650+(ifelse(df13.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*12)+(340*12)+(724*12)) # assumping death at beggining of day and no extra costs 
  
  df13.sim<-df13.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df13.summary<- df13.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df13.overall<- df13.summary[!duplicated(df13.summary$id), ]
  #
  df13.overall2way14_40_13_u_mean<-mean(df13.summary$utility_mean)
  df13.overall2way14_40_13_c_mean<-mean(df13.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df13.survival<-df13.summary %>% filter(state%in%4)
  df13.sens2way14_40_13_u_mean<-mean(df13.survival$utility_mean)
  df13.sens2way14_40_13_c_mean<-mean(df13.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 14 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df14.sim<-df14.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df14.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df14.sim$day>0, 340,0))+4650+(ifelse(df14.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*13)+(340*13)+(724*13))  # assumping death at beggining of day and no extra costs 
  
  df14.sim<-df14.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df14.summary<- df14.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df14.overall<- df14.summary[!duplicated(df14.summary$id), ]
  #
  df14.overall2way14_40_14_u_mean<-mean(df14.summary$utility_mean)
  df14.overall2way14_40_14_c_mean<-mean(df14.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df14.survival<-df14.summary %>% filter(state%in%4)
  df14.sens2way14_40_14_u_mean<-mean(df14.survival$utility_mean)
  df14.sens2way14_40_14_c_mean<-mean(df14.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 15 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df15.sim<-df15.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df15.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df15.sim$day>0, 340,0))+4650+(ifelse(df15.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*14)+(340*14)+(724*14))  # assumping death at beggining of day and no extra costs 
  
  df15.sim<-df15.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df15.summary<- df15.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df15.overall<- df15.summary[!duplicated(df15.summary$id), ]
  #
  df15.overall2way14_40_15_u_mean<-mean(df15.summary$utility_mean)
  df15.overall2way14_40_15_c_mean<-mean(df15.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df15.survival<-df15.summary %>% filter(state%in%4)
  df15.sens2way14_40_15_u_mean<-mean(df15.survival$utility_mean)  
  df15.sens2way14_40_15_c_mean<-mean(df15.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 16 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df16.sim<-df16.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df16.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df16.sim$day>0, 340,0))+4650+(ifelse(df16.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*15)+(340*15)+(724*15))  # assumping death at beggining of day and no extra costs 
  
  df16.sim<-df16.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df16.summary<- df16.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df16.overall<- df16.summary[!duplicated(df16.summary$id), ]
  #
  df16.overall2way14_40_16_u_mean<-mean(df16.summary$utility_mean)
  df16.overall2way14_40_16_c_mean<-mean(df16.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df16.survival<-df16.summary %>% filter(state%in%4)
  df16.sens2way14_40_16_u_mean<-mean(df16.survival$utility_mean)
  df16.sens2way14_40_16_c_mean<-mean(df16.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 17 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df17.sim<-df17.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df17.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df17.sim$day>0, 340,0))+4650+(ifelse(df17.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*16)+(340*16)+(724*16))  # assumping death at beggining of day and no extra costs 
  
  df17.sim<-df17.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df17.summary<- df17.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df17.overall<- df17.summary[!duplicated(df17.summary$id), ]
  #
  df17.overall2way14_40_17_u_mean<-mean(df17.summary$utility_mean)
  df17.overall2way14_40_17_c_mean<-mean(df17.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df17.survival<-df17.summary %>% filter(state%in%4)
  df17.sens2way14_40_17_u_mean<-mean(df17.survival$utility_mean)
  df17.sens2way14_40_17_c_mean<-mean(df17.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 18 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df18.sim<-df18.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df18.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df18.sim$day>0, 340,0))+4650+(ifelse(df18.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*17)+(340*17)+(724*17))  # assumping death at beggining of day and no extra costs 
  
  df18.sim<-df18.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df18.summary<- df18.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df18.overall<- df18.summary[!duplicated(df18.summary$id), ]
  #
  df18.overall2way14_40_18_u_mean<-mean(df18.summary$utility_mean)
  df18.overall2way14_40_18_c_mean<-mean(df18.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df18.survival<-df18.summary %>% filter(state%in%4)
  df18.sens2way14_40_18_u_mean<-mean(df18.survival$utility_mean)
  df18.sens2way14_40_18_c_mean<-mean(df18.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 19 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df19.sim<-df19.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df19.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df19.sim$day>0, 340,0))+4650+(ifelse(df19.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*18)+(340*18)+(724*18))  # assumping death at beggining of day and no extra costs 
  
  df19.sim<-df19.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df19.summary<- df19.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df19.overall<- df19.summary[!duplicated(df19.summary$id), ]
  #
  df19.overall2way14_40_19_u_mean<-mean(df19.summary$utility_mean)
  df19.overall2way14_40_19_c_mean<-mean(df19.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df19.survival<-df19.summary %>% filter(state%in%4)
  df19.sens2way14_40_19_u_mean<-mean(df19.survival$utility_mean)
  df19.sens2way14_40_19_c_mean<-mean(df19.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 20 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df20.sim<-df20.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df20.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df20.sim$day>0, 340,0))+4650+(ifelse(df20.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*19)+(340*19)+(724*19))  # assumping death at beggining of day and no extra costs 
  
  df20.sim<-df20.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df20.summary<- df20.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df20.overall<- df20.summary[!duplicated(df20.summary$id), ]
  #
  df20.overall2way14_40_20_u_mean<-mean(df20.summary$utility_mean)
  df20.overall2way14_40_20_c_mean<-mean(df20.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df20.survival<-df20.summary %>% filter(state%in%4)
  df20.sens2way14_40_20_u_mean<-mean(df20.survival$utility_mean)
  df20.sens2way14_40_20_c_mean<-mean(df20.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 21 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df21.sim<-df21.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df21.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df21.sim$day>0, 340,0))+4650+(ifelse(df21.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*20)+(340*20)+(724*20))  # assumping death at beggining of day and no extra costs 
  
  df21.sim<-df21.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df21.summary<- df21.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df21.overall<- df21.summary[!duplicated(df21.summary$id), ]
  #
  df21.overall2way14_40_21_u_mean<-mean(df21.summary$utility_mean)
  df21.overall2way14_40_21_c_mean<-mean(df21.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df21.survival<-df21.summary %>% filter(state%in%4)
  df21.sens2way14_40_21_u_mean<-mean(df21.survival$utility_mean)
  df21.sens2way14_40_21_c_mean<-mean(df21.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 22 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df22.sim<-df22.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df22.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df22.sim$day>0, 340,0))+4650+(ifelse(df22.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*21)+(340*21)+(724*21)) # assumping death at beggining of day and no extra costs 
  
  df22.sim<-df22.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df22.summary<- df22.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df22.overall<- df22.summary[!duplicated(df22.summary$id), ]
  #
  df22.overall2way14_40_22_u_mean<-mean(df22.summary$utility_mean)
  df22.overall2way14_40_22_c_mean<-mean(df22.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df22.survival<-df22.summary %>% filter(state%in%4)
  df22.sens2way14_40_22_u_mean<-mean(df22.survival$utility_mean)
  df22.sens2way14_40_22_c_mean<-mean(df22.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 23 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df23.sim<-df23.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df23.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df23.sim$day>0, 340,0))+4650+(ifelse(df23.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*22)+(340*22)+(724*22)) # assumping death at beggining of day and no extra costs 
  
  df23.sim<-df23.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df23.summary<- df23.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df23.overall<- df23.summary[!duplicated(df23.summary$id), ]
  #
  df23.overall2way14_40_23_u_mean<-mean(df23.summary$utility_mean)
  df23.overall2way14_40_23_c_mean<-mean(df23.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df23.survival<-df23.summary %>% filter(state%in%4)
  df23.sens2way14_40_23_u_mean<-mean(df23.survival$utility_mean)
  df23.sens2way14_40_23_c_mean<-mean(df23.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 24 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df24.sim<-df24.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df24.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df24.sim$day>0, 340,0))+4650+(ifelse(df24.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*23)+(340*23)+(724*23))  # assumping death at beggining of day and no extra costs 
  
  df24.sim<-df24.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df24.summary<- df24.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df24.overall<- df24.summary[!duplicated(df24.summary$id), ]
  #
  df24.overall2way14_40_24_u_mean<-mean(df24.summary$utility_mean)
  df24.overall2way14_40_24_c_mean<-mean(df24.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df24.survival<-df24.summary %>% filter(state%in%4)
  df24.sens2way14_40_24_u_mean<-mean(df24.survival$utility_mean)
  df24.sens2way14_40_24_c_mean<-mean(df24.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 25 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df25.sim<-df25.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df25.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df25.sim$day>0, 340,0))+4650+(ifelse(df25.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*24)+(340*24)+(724*24)) # assumping death at beggining of day and no extra costs 
  
  df25.sim<-df25.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df25.summary<- df25.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df25.overall<- df25.summary[!duplicated(df25.summary$id), ]
  #
  df25.overall2way14_40_25_u_mean<-mean(df25.summary$utility_mean)
  df25.overall2way14_40_25_c_mean<-mean(df25.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df25.survival<-df25.summary %>% filter(state%in%4)
  df25.sens2way14_40_25_u_mean<-mean(df25.survival$utility_mean)
  df25.sens2way14_40_25_c_mean<-mean(df25.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 26 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df26.sim<-df26.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df26.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df26.sim$day>0, 340,0))+4650+(ifelse(df26.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*25)+(340*25)+(724*25))  # assumping death at beggining of day and no extra costs 
  
  df26.sim<-df26.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df26.summary<- df26.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df26.overall<- df26.summary[!duplicated(df26.summary$id), ]
  #
  df26.overall2way14_40_26_u_mean<-mean(df26.summary$utility_mean)
  df26.overall2way14_40_26_c_mean<-mean(df26.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df26.survival<-df26.summary %>% filter(state%in%4)
  df26.sens2way14_40_26_u_mean<-mean(df26.survival$utility_mean)
  df26.sens2way14_40_26_c_mean<-mean(df26.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 27 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df27.sim<-df27.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df27.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df27.sim$day>0, 340,0))+4650+(ifelse(df27.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*26)+(340*26)+(724*26))  # assumping death at beggining of day and no extra costs 
  
  df27.sim<-df27.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df27.summary<- df27.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df27.overall<- df27.summary[!duplicated(df27.summary$id), ]
  #
  df27.overall2way14_40_27_u_mean<-mean(df27.summary$utility_mean)
  df27.overall2way14_40_27_c_mean<-mean(df27.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df27.survival<-df27.summary %>% filter(state%in%4)
  df27.sens2way14_40_27_u_mean<-mean(df27.survival$utility_mean)
  df27.sens2way14_40_27_c_mean<-mean(df27.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 28 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df28.sim<-df28.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df28.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df28.sim$day>0, 340,0))+4650+(ifelse(df28.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*27)+(340*27)+(724*27))  # assumping death at beggining of day and no extra costs 
  
  df28.sim<-df28.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df28.summary<- df28.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df28.overall<- df28.summary[!duplicated(df28.summary$id), ]
  #
  df28.overall2way14_40_28_u_mean<-mean(df28.summary$utility_mean)
  df28.overall2way14_40_28_c_mean<-mean(df28.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df28.survival<-df28.summary %>% filter(state%in%4)
  df28.sens2way14_40_28_u_mean<-mean(df28.survival$utility_mean)
  df28.sens2way14_40_28_c_mean<-mean(df28.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 29 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df29.sim<-df29.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df29.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df29.sim$day>0, 340,0))+4650+(ifelse(df29.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*28)+(340*28)+(724*28))  # assumping death at beggining of day and no extra costs 
  
  df29.sim<-df29.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df29.summary<- df29.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean=(sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df29.overall<- df29.summary[!duplicated(df29.summary$id), ]
  #
  df29.overall2way14_40_29_u_mean<-mean(df29.summary$utility_mean)
  df29.overall2way14_40_29_c_mean<-mean(df29.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df29.survival<-df29.summary %>% filter(state%in%4)
  df29.sens2way14_40_29_u_mean<-mean(df29.survival$utility_mean)
  df29.sens2way14_40_29_c_mean<-mean(df29.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 30 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df30.sim<-df30.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df30.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df30.sim$day>0, 340,0))+4650+(ifelse(df30.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*29)+(340*29)+(724*29))  # assumping death at beggining of day and no extra costs 
  
  df30.sim<-df30.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df30.summary<- df30.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df30.overall<- df30.summary[!duplicated(df30.summary$id), ]
  #
  df30.overall2way14_40_30_u_mean<-mean(df30.summary$utility_mean)
  df30.overall2way14_40_30_c_mean<-mean(df30.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df30.survival<-df30.summary %>% filter(state%in%4)
  df30.sens2way14_40_30_u_mean<-mean(df30.survival$utility_mean)
  df30.sens2way14_40_30_c_mean<-mean(df30.survival$costs_sum)
  
  df1.sens2way14_40<-df1.summary
  df2.sens2way14_40<-df2.summary
  df3.sens2way14_40<-df3.summary
  df4.sens2way14_40<-df4.summary
  df5.sens2way14_40<-df5.summary
  df6.sens2way14_40<-df6.summary
  df7.sens2way14_40<-df7.summary
  df8.sens2way14_40<-df8.summary
  df9.sens2way14_40<-df9.summary
  df10.sens2way14_40<-df10.summary
  df11.sens2way14_40<-df11.summary
  df12.sens2way14_40<-df12.summary
  df13.sens2way14_40<-df13.summary
  df14.sens2way14_40<-df14.summary
  df15.sens2way14_40<-df15.summary
  df16.sens2way14_40<-df16.summary
  df17.sens2way14_40<-df17.summary
  df18.sens2way14_40<-df18.summary
  df19.sens2way14_40<-df19.summary
  df20.sens2way14_40<-df20.summary
  df21.sens2way14_40<-df21.summary
  df22.sens2way14_40<-df22.summary
  df23.sens2way14_40<-df23.summary
  df24.sens2way14_40<-df24.summary
  df25.sens2way14_40<-df25.summary
  df26.sens2way14_40<-df26.summary
  df27.sens2way14_40<-df27.summary
  df28.sens2way14_40<-df28.summary
  df29.sens2way14_40<-df29.summary
  df30.sens2way14_40<-df30.summary
  
  
  
  
  rm(df1.sim)
  rm(df2.sim)
  rm(df3.sim)
  rm(df4.sim)
  rm(df5.sim)
  rm(df6.sim)
  rm(df7.sim)
  rm(df8.sim)
  rm(df9.sim)
  rm(df10.sim)
  rm(df11.sim)
  rm(df12.sim)
  rm(df13.sim)
  rm(df14.sim)
  rm(df15.sim)
  rm(df16.sim)
  rm(df17.sim)
  rm(df18.sim)
  rm(df19.sim)
  rm(df20.sim)
  rm(df21.sim)
  rm(df22.sim)
  rm(df23.sim)
  rm(df24.sim)
  rm(df25.sim)
  rm(df26.sim)
  rm(df27.sim)
  rm(df28.sim)
  rm(df29.sim)
  rm(df30.sim)
}

# 2 way sensitivity cmo 14 40 case results ------------------------------------------------------------
sens2way14_40.overall_c_vect<-c()
for (i in 1:30){
  sens2way14_40.overall_c_vect[i]<-get(paste("df", i, ".overall2way14_40_", i, "_c_mean",sep = "")) 
}

sens2way14_40.overall_u_vect<-c()
for (i in 1:30){
  sens2way14_40.overall_u_vect[i]<-get(paste("df", i,".overall2way14_40_", i, "_u_mean",sep = ""))
}

sens2way14_40.survival_c_vect<-c()
for (i in 1:30){
  sens2way14_40.survival_c_vect[i]<-get(paste("df", i, ".sens2way14_40_",i,"_c_mean",sep = "")) 
}

sens2way14_40.survival_u_vect<-c()
for (i in 1:30){
  sens2way14_40.survival_u_vect[i]<-get(paste("df", i, ".sens2way14_40_",i,"_u_mean",sep = ""))
}

sens2way14_40.ce_results<- matrix(c(sens2way14_40.overall_c_vect,sens2way14_40.overall_u_vect,sens2way14_40.survival_c_vect,sens2way14_40.survival_u_vect), nrow=30, byrow=FALSE)
colnames(sens2way14_40.ce_results) <- c("overall_c","overall_u","survival_c","survival_u")




# markov objects  2way 28 - death 52----

{
  mo1.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52), name="MarkovChain Q1")
  mo2.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_2), name="MarkovChain Q1")
  
  mo3.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_3), name="MarkovChain Q1")
  mo4.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_4), name="MarkovChain Q1")
  mo5.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_5), name="MarkovChain Q1")
  mo6.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_6), name="MarkovChain Q1")
  mo7.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_7), name="MarkovChain Q1")
  mo8.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_8), name="MarkovChain Q1")
  mo9.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_9), name="MarkovChain Q1")
  mo10.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_10), name="MarkovChain Q1")
  mo11.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_11), name="MarkovChain Q1")
  mo12.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_12), name="MarkovChain Q1")
  mo13.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_13), name="MarkovChain Q1")
  mo14.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_14), name="MarkovChain Q1")
  mo15.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_15), name="MarkovChain Q1")
  mo16.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_16), name="MarkovChain Q1")
  mo17.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_17), name="MarkovChain Q1")
  mo18.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_18), name="MarkovChain Q1")
  mo19.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_19), name="MarkovChain Q1")
  mo20.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_20), name="MarkovChain Q1")
  mo21.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_21), name="MarkovChain Q1")
  mo22.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_22), name="MarkovChain Q1")
  mo23.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_23), name="MarkovChain Q1")
  mo24.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_24), name="MarkovChain Q1")
  mo25.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_25), name="MarkovChain Q1")
  mo26.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_26), name="MarkovChain Q1")
  mo27.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_27), name="MarkovChain Q1")
  mo28.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_28), name="MarkovChain Q1")
  mo29.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_29), name="MarkovChain Q1")
  mo30.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way28_52_30), name="MarkovChain Q1")
}


# SENSITIVITY ANALYSIS first order monte carlo simulations cmo 28 death 52 ---------

# 2 way 

B <- 100
N <- 30

{
  sim1.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo1.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim2.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo2.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim3.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo3.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim4.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo4.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim5.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo5.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim6.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo6.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim7.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo7.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim8.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo8.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim9.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo9.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim10.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo10.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim11.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo11.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim12.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo12.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim13.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo13.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim14.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo14.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim15.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo15.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim16.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo16.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim17.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo17.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim18.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo18.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim19.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo19.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim20.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo20.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim21.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo21.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim22.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo22.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim23.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo23.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim24.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo24.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim25.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo25.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim26.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo26.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim27.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo27.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim28.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo28.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim29.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo29.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim30.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo30.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  

}
# 1 non-agressive
# 2 aggressive
# 3 cmo
# 4 discharged
# 5 death


# Convert simulations into data frames 
{
  df1.sim<- as.data.frame(sim1.msm)
  df1.sim<-df1.sim %>% gather(key = "id", value = "state")
  df1.sim<-df1.sim %>% mutate(col1=streak_run(state, k=1000))
  df1.sim<-df1.sim %>% filter(!(state=="4" & col1!=1))
  df1.sim<-df1.sim %>% filter(!(state=="5" & col1!=1))
  
  df2.sim<- as.data.frame(sim2.msm)
  df2.sim<-df2.sim %>% gather(key = "id", value = "state")
  df2.sim<-df2.sim %>% mutate(col1=streak_run(state, k=1000))
  df2.sim<-df2.sim %>% filter(!(state=="4" & col1!=1))
  df2.sim<-df2.sim %>% filter(!(state=="5" & col1!=1))
  
  df3.sim<- as.data.frame(sim3.msm)
  df3.sim<-df3.sim %>% gather(key = "id", value = "state")
  df3.sim<-df3.sim %>% mutate(col1=streak_run(state, k=1000))
  df3.sim<-df3.sim %>% filter(!(state=="4" & col1!=1))
  df3.sim<-df3.sim %>% filter(!(state=="5" & col1!=1))
  
  df4.sim<- as.data.frame(sim4.msm)
  df4.sim<-df4.sim %>% gather(key = "id", value = "state")
  df4.sim<-df4.sim %>% mutate(col1=streak_run(state, k=1000))
  df4.sim<-df4.sim %>% filter(!(state=="4" & col1!=1))
  df4.sim<-df4.sim %>% filter(!(state=="5" & col1!=1))
  
  df5.sim<- as.data.frame(sim5.msm)
  df5.sim<-df5.sim %>% gather(key = "id", value = "state")
  df5.sim<-df5.sim %>% mutate(col1=streak_run(state, k=1000))
  df5.sim<-df5.sim %>% filter(!(state=="4" & col1!=1))
  df5.sim<-df5.sim %>% filter(!(state=="5" & col1!=1))
  
  df6.sim<- as.data.frame(sim6.msm)
  df6.sim<-df6.sim %>% gather(key = "id", value = "state")
  df6.sim<-df6.sim %>% mutate(col1=streak_run(state, k=1000))
  df6.sim<-df6.sim %>% filter(!(state=="4" & col1!=1))
  df6.sim<-df6.sim %>% filter(!(state=="5" & col1!=1))
  
  df7.sim<- as.data.frame(sim7.msm)
  df7.sim<-df7.sim %>% gather(key = "id", value = "state")
  df7.sim<-df7.sim %>% mutate(col1=streak_run(state, k=1000))
  df7.sim<-df7.sim %>% filter(!(state=="4" & col1!=1))
  df7.sim<-df7.sim %>% filter(!(state=="5" & col1!=1))
  
  df8.sim<- as.data.frame(sim8.msm)
  df8.sim<-df8.sim %>% gather(key = "id", value = "state")
  df8.sim<-df8.sim %>% mutate(col1=streak_run(state, k=1000))
  df8.sim<-df8.sim %>% filter(!(state=="4" & col1!=1))
  df8.sim<-df8.sim %>% filter(!(state=="5" & col1!=1))
  
  df9.sim<- as.data.frame(sim9.msm)
  df9.sim<-df9.sim %>% gather(key = "id", value = "state")
  df9.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df9.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df9.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df10.sim<- as.data.frame(sim10.msm)
  df10.sim<-df9.sim %>% gather(key = "id", value = "state")
  df10.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df10.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df10.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df11.sim<- as.data.frame(sim11.msm)
  df11.sim<-df11.sim %>% gather(key = "id", value = "state")
  df11.sim<-df11.sim %>% mutate(col1=streak_run(state, k=1000))
  df11.sim<-df11.sim %>% filter(!(state=="4" & col1!=1))
  df11.sim<-df11.sim %>% filter(!(state=="5" & col1!=1))
  
  df12.sim<- as.data.frame(sim12.msm)
  df12.sim<-df12.sim %>% gather(key = "id", value = "state")
  df12.sim<-df12.sim %>% mutate(col1=streak_run(state, k=1000))
  df12.sim<-df12.sim %>% filter(!(state=="4" & col1!=1))
  df12.sim<-df12.sim %>% filter(!(state=="5" & col1!=1))
  
  df13.sim<- as.data.frame(sim13.msm)
  df13.sim<-df13.sim %>% gather(key = "id", value = "state")
  df13.sim<-df13.sim %>% mutate(col1=streak_run(state, k=1000))
  df13.sim<-df13.sim %>% filter(!(state=="4" & col1!=1))
  df13.sim<-df13.sim %>% filter(!(state=="5" & col1!=1))
  
  df14.sim<- as.data.frame(sim14.msm)
  df14.sim<-df14.sim %>% gather(key = "id", value = "state")
  df14.sim<-df14.sim %>% mutate(col1=streak_run(state, k=1000))
  df14.sim<-df14.sim %>% filter(!(state=="4" & col1!=1))
  df14.sim<-df14.sim %>% filter(!(state=="5" & col1!=1))
  
  df15.sim<- as.data.frame(sim15.msm)
  df15.sim<-df15.sim %>% gather(key = "id", value = "state")
  df15.sim<-df15.sim %>% mutate(col1=streak_run(state, k=1000))
  df15.sim<-df15.sim %>% filter(!(state=="4" & col1!=1))
  df15.sim<-df15.sim %>% filter(!(state=="5" & col1!=1))
  
  df16.sim<- as.data.frame(sim16.msm)
  df16.sim<-df16.sim %>% gather(key = "id", value = "state")
  df16.sim<-df16.sim %>% mutate(col1=streak_run(state, k=1000))
  df16.sim<-df16.sim %>% filter(!(state=="4" & col1!=1))
  df16.sim<-df16.sim %>% filter(!(state=="5" & col1!=1))
  
  df17.sim<- as.data.frame(sim17.msm)
  df17.sim<-df17.sim %>% gather(key = "id", value = "state")
  df17.sim<-df17.sim %>% mutate(col1=streak_run(state, k=1000))
  df17.sim<-df17.sim %>% filter(!(state=="4" & col1!=1))
  df17.sim<-df17.sim %>% filter(!(state=="5" & col1!=1))
  
  df18.sim<- as.data.frame(sim18.msm)
  df18.sim<-df18.sim %>% gather(key = "id", value = "state")
  df18.sim<-df18.sim %>% mutate(col1=streak_run(state, k=1000))
  df18.sim<-df18.sim %>% filter(!(state=="4" & col1!=1))
  df18.sim<-df18.sim %>% filter(!(state=="5" & col1!=1))
  
  df19.sim<- as.data.frame(sim19.msm)
  df19.sim<-df19.sim %>% gather(key = "id", value = "state")
  df19.sim<-df19.sim %>% mutate(col1=streak_run(state, k=1000))
  df19.sim<-df19.sim %>% filter(!(state=="4" & col1!=1))
  df19.sim<-df19.sim %>% filter(!(state=="5" & col1!=1))
  
  df20.sim<- as.data.frame(sim20.msm)
  df20.sim<-df9.sim %>% gather(key = "id", value = "state")
  df20.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df20.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df20.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df21.sim<- as.data.frame(sim21.msm)
  df21.sim<-df21.sim %>% gather(key = "id", value = "state")
  df21.sim<-df21.sim %>% mutate(col1=streak_run(state, k=1000))
  df21.sim<-df21.sim %>% filter(!(state=="4" & col1!=1))
  df21.sim<-df21.sim %>% filter(!(state=="5" & col1!=1))
  
  df22.sim<- as.data.frame(sim22.msm)
  df22.sim<-df22.sim %>% gather(key = "id", value = "state")
  df22.sim<-df22.sim %>% mutate(col1=streak_run(state, k=1000))
  df22.sim<-df22.sim %>% filter(!(state=="4" & col1!=1))
  df22.sim<-df22.sim %>% filter(!(state=="5" & col1!=1))
  
  df23.sim<- as.data.frame(sim23.msm)
  df23.sim<-df23.sim %>% gather(key = "id", value = "state")
  df23.sim<-df23.sim %>% mutate(col1=streak_run(state, k=1000))
  df23.sim<-df23.sim %>% filter(!(state=="4" & col1!=1))
  df23.sim<-df23.sim %>% filter(!(state=="5" & col1!=1))
  
  df24.sim<- as.data.frame(sim24.msm)
  df24.sim<-df24.sim %>% gather(key = "id", value = "state")
  df24.sim<-df24.sim %>% mutate(col1=streak_run(state, k=1000))
  df24.sim<-df24.sim %>% filter(!(state=="4" & col1!=1))
  df24.sim<-df24.sim %>% filter(!(state=="5" & col1!=1))
  
  df25.sim<- as.data.frame(sim25.msm)
  df25.sim<-df25.sim %>% gather(key = "id", value = "state")
  df25.sim<-df25.sim %>% mutate(col1=streak_run(state, k=1000))
  df25.sim<-df25.sim %>% filter(!(state=="4" & col1!=1))
  df25.sim<-df25.sim %>% filter(!(state=="5" & col1!=1))
  
  df26.sim<- as.data.frame(sim26.msm)
  df26.sim<-df26.sim %>% gather(key = "id", value = "state")
  df26.sim<-df26.sim %>% mutate(col1=streak_run(state, k=1000))
  df26.sim<-df26.sim %>% filter(!(state=="4" & col1!=1))
  df26.sim<-df26.sim %>% filter(!(state=="5" & col1!=1))
  
  df27.sim<- as.data.frame(sim27.msm)
  df27.sim<-df27.sim %>% gather(key = "id", value = "state")
  df27.sim<-df27.sim %>% mutate(col1=streak_run(state, k=1000))
  df27.sim<-df27.sim %>% filter(!(state=="4" & col1!=1))
  df27.sim<-df27.sim %>% filter(!(state=="5" & col1!=1))
  
  df28.sim<- as.data.frame(sim28.msm)
  df28.sim<-df28.sim %>% gather(key = "id", value = "state")
  df28.sim<-df28.sim %>% mutate(col1=streak_run(state, k=1000))
  df28.sim<-df28.sim %>% filter(!(state=="4" & col1!=1))
  df28.sim<-df28.sim %>% filter(!(state=="5" & col1!=1))
  
  df29.sim<- as.data.frame(sim29.msm)
  df29.sim<-df29.sim %>% gather(key = "id", value = "state")
  df29.sim<-df29.sim %>% mutate(col1=streak_run(state, k=1000))
  df29.sim<-df29.sim %>% filter(!(state=="4" & col1!=1))
  df29.sim<-df29.sim %>% filter(!(state=="5" & col1!=1))
  
  df30.sim<- as.data.frame(sim30.msm)
  df30.sim<-df30.sim %>% gather(key = "id", value = "state")
  df30.sim<-df30.sim %>% mutate(col1=streak_run(state, k=1000))
  df30.sim<-df30.sim %>% filter(!(state=="4" & col1!=1))
  df30.sim<-df30.sim %>% filter(!(state=="5" & col1!=1))
  
  rm(sim1.msm) 
  rm(sim2.msm)
  rm(sim3.msm)
  rm(sim4.msm)
  rm(sim5.msm)
  rm(sim6.msm)
  rm(sim7.msm)
  rm(sim8.msm)
  rm(sim9.msm)
  rm(sim10.msm)
  rm(sim11.msm)
  rm(sim12.msm)
  rm(sim13.msm)
  rm(sim14.msm)
  rm(sim15.msm)
  rm(sim16.msm)
  rm(sim17.msm)
  rm(sim18.msm)
  rm(sim19.msm)
  rm(sim20.msm)
  rm(sim21.msm)
  rm(sim22.msm)
  rm(sim23.msm)
  rm(sim24.msm)
  rm(sim25.msm)
  rm(sim26.msm)
  rm(sim27.msm)
  rm(sim28.msm)
  rm(sim29.msm)
  rm(sim30.msm)
}

# SENSITIVITY ANALYSIS Utilities and costs cmo 28 deaths 52- ------------------------
{
  # Utility value for being in ICU:	0.66, 0.39-0.93,	Beta,	(Cost effectiveness of antimicrobial catheters in the intensive care unit: addressing uncertainty in the decision)
  # Utility value for highly invasive care:	0.55,	0.39-0.71,	(Beta,	Comparison of Health-Related Quality of Life Preferences Between Physicians and Cirrhotic Patients: Implications for Cost–Utility Analysesin Chronic Liver Disease)
  # Utility value for paliative care:	0.28,	0.23-0.35,	Beta,	(Ultrasound Elastography for Fibrosis Surveillance Is Cos tEffective in Patients with Chronic Hepatitis C Virus in the UK)
  
  # Daily costs:
  # ICU Room & Board	 $3,805.00 	-	-
  # Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
  # Mechanical ventilation first day 	 $928.99 	-	-
  # Mechanical ventilation	 $775.00 	-	-
  # Comfort care	 $988.00 	-	-
  # Initial hospital physican care	 $662.00 	-	-
  # Subsequent hospital physican care	 $340.00 	-	-
  # Hospital discharge day	 $353.00 	-	-
  # Critical care phsycian care	 $724.00 	-	-
  
  # sources: BIDMC - Patient Financial Services & HMFP - Finance
  
  # utilities
  u_nhic<-0.66
  u_hic<-0.55
  u_cmo<-0.28
  u_discharge<-1
  u_died<-1
  
  # 1 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df1.sim<-df1.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df1.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df1.sim$day>0, 340,0))+4650+(ifelse(df1.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00 # assumping death at beggining of day and no extra costs 
  
  df1.sim<-df1.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df1.summary<- df1.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= mean(utility),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df1.overall<- df1.summary[!duplicated(df1.summary$id), ]
  #
  df1.overall2way28_52_1_u_mean<-mean(df1.summary$utility_mean)
  df1.overall2way28_52_1_c_mean<-mean(df1.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df1.survival<-df1.summary %>% filter(state%in%4)
  df1.sens2way28_52_1_u_mean<-mean(df1.survival$utility_mean) 
  df1.sens2way28_52_1_c_mean<-mean(df1.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 2 day hic ////////////////////////////////////////////////////////////////////
  
  # Daily costs:
  # ICU Room & Board	 $3,805.00 	-	-
  # Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
  # Mechanical ventilation first day 	 $928.99 	-	-
  # Mechanical ventilation	 $775.00 	-	-
  # Comfort care	 $988.00 	-	-
  # Initial hospital physican care	 $662.00 	-	-
  # Subsequent hospital physican care	 $340.00 	-	-
  # Hospital discharge day	 $353.00 	-	-
  # Critical care phsycian care	 $724.00 	-	-
  
  # Create flags for sequential days  
  df2.sim<-df2.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  
  # Create costs
  c_nhic<-3805+662+(ifelse(df2.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df2.sim$day>0, 340,0))+4650+(ifelse(df2.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*1)+(340*1)+(724*1)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC 
  
  df2.sim<-df2.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df2.summary<- df2.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))), # adding extra days of utility given HIC
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df2.overall<- df2.summary[!duplicated(df2.summary$id), ]
  #
  df2.overall2way28_52_2_u_mean<-mean(df2.summary$utility_mean)
  df2.overall2way28_52_2_c_mean<-mean(df2.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df2.survival<-df2.summary %>% filter(state%in%4)
  df2.sens2way28_52_2_u_mean<-mean(df2.survival$utility_mean)
  df2.sens2way28_52_2_c_mean<-mean(df2.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 3 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df3.sim<-df3.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df3.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df3.sim$day>0, 340,0))+4650+(ifelse(df3.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*2)+(340*2)+(724*2))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC
  
  df3.sim<-df3.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df3.summary<- df3.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df3.overall<- df3.summary[!duplicated(df3.summary$id), ]
  #
  df3.overall2way28_52_3_u_mean<-mean(df3.summary$utility_mean)
  df3.overall2way28_52_3_c_mean<-mean(df3.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df3.survival<-df3.summary %>% filter(state%in%4)
  df3.sens2way28_52_3_u_mean<-mean(df3.survival$utility_mean)
  df3.sens2way28_52_3_c_mean<-mean(df3.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 4 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df4.sim<-df4.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df4.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df4.sim$day>0, 340,0))+4650+(ifelse(df4.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*3)+(340*3)+(724*3))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 
  
  df4.sim<-df4.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df4.summary<- df4.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df4.overall<- df4.summary[!duplicated(df4.summary$id), ]
  #
  df4.overall2way28_52_4_u_mean<-mean(df4.summary$utility_mean)
  df4.overall2way28_52_4_c_mean<-mean(df4.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df4.survival<-df4.summary %>% filter(state%in%4)
  df4.sens2way28_52_4_u_mean<-mean(df4.survival$utility_mean)
  df4.sens2way28_52_4_c_mean<-mean(df4.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 5 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df5.sim<-df5.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df5.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df5.sim$day>0, 340,0))+4650+(ifelse(df5.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*4)+(340*4)+(724*4))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df5.sim<-df5.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df5.summary<- df5.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df5.overall<- df5.summary[!duplicated(df5.summary$id), ]
  #
  df5.overall2way28_52_5_u_mean<-mean(df5.summary$utility_mean)
  df5.overall2way28_52_5_c_mean<-mean(df5.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df5.survival<-df5.summary %>% filter(state%in%4)
  df5.sens2way28_52_5_u_mean<-mean(df5.survival$utility_mean)
  df5.sens2way28_52_5_c_mean<-mean(df5.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 6 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df6.sim<-df6.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df6.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df6.sim$day>0, 340,0))+4650+(ifelse(df6.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*5)+(340*5)+(724*5))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df6.sim<-df6.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df6.summary<- df6.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df6.overall<- df6.summary[!duplicated(df6.summary$id), ]
  #
  df6.overall2way28_52_6_u_mean<-mean(df6.summary$utility_mean)
  df6.overall2way28_52_6_c_mean<-mean(df6.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df6.survival<-df6.summary %>% filter(state%in%4)
  df6.sens2way28_52_6_u_mean<-mean(df6.survival$utility_mean)
  df6.sens2way28_52_6_c_mean<-mean(df6.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 7 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df7.sim<-df7.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df7.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df7.sim$day>0, 340,0))+4650+(ifelse(df7.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*6)+(340*6)+(724*6))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df7.sim<-df7.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df7.summary<- df7.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df7.overall<- df7.summary[!duplicated(df7.summary$id), ]
  #
  df7.overall2way28_52_7_u_mean<-mean(df7.summary$utility_mean)
  df7.overall2way28_52_7_c_mean<-mean(df7.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df7.survival<-df7.summary %>% filter(state%in%4)
  df7.sens2way28_52_7_u_mean<-mean(df7.survival$utility_mean)
  df7.sens2way28_52_7_c_mean<-mean(df7.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 8 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df8.sim<-df8.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df8.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df8.sim$day>0, 340,0))+4650+(ifelse(df8.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*7)+(340*7)+(724*7)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df8.sim<-df8.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df8.summary<- df8.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df8.overall<- df8.summary[!duplicated(df8.summary$id), ]
  #
  df8.overall2way28_52_8_u_mean<-mean(df8.summary$utility_mean)
  df8.overall2way28_52_8_c_mean<-mean(df8.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df8.survival<-df8.summary %>% filter(state%in%4)
  df8.sens2way28_52_8_u_mean<-mean(df8.survival$utility_mean)
  df8.sens2way28_52_8_c_mean<-mean(df8.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 9 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df9.sim<-df9.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df9.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df9.sim$day>0, 340,0))+4650+(ifelse(df9.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*8)+(340*8)+(724*8))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df9.sim<-df9.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df9.summary<- df9.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df9.overall<- df9.summary[!duplicated(df9.summary$id), ]
  #
  df9.overall2way28_52_9_u_mean<-mean(df9.summary$utility_mean)
  df9.overall2way28_52_9_c_mean<-mean(df9.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df9.survival<-df9.summary %>% filter(state%in%4)
  df9.sens2way28_52_9_u_mean<-mean(df9.survival$utility_mean)
  df9.sens2way28_52_9_c_mean<-mean(df9.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 10 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df10.sim<-df10.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df10.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df10.sim$day>0, 340,0))+4650+(ifelse(df10.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*9)+(340*9)+(724*9))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 
  
  df10.sim<-df10.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df10.summary<- df10.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df10.overall<- df10.summary[!duplicated(df10.summary$id), ]
  #
  df10.overall2way28_52_10_u_mean<-mean(df10.summary$utility_mean)
  df10.overall2way28_52_10_c_mean<-mean(df10.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df10.survival<-df10.summary %>% filter(state%in%4)
  df10.sens2way28_52_10_u_mean<-mean(df10.survival$utility_mean)
  df10.sens2way28_52_10_c_mean<-mean(df10.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 11 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df11.sim<-df11.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df11.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df11.sim$day>0, 340,0))+4650+(ifelse(df11.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*10)+(340*10)+(724*10))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df11.sim<-df11.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df11.summary<- df11.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df11.overall<- df11.summary[!duplicated(df11.summary$id), ]
  #
  df11.overall2way28_52_11_u_mean<-mean(df11.summary$utility_mean)
  df11.overall2way28_52_11_c_mean<-mean(df11.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df11.survival<-df11.summary %>% filter(state%in%4)
  df11.sens2way28_52_11_u_mean<-mean(df11.survival$utility_mean)
  df11.sens2way28_52_11_c_mean<-mean(df11.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 12 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df12.sim<-df12.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df12.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df12.sim$day>0, 340,0))+4650+(ifelse(df12.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*11)+(340*11)+(724*11))   # assumping death at beggining of day and no extra costs 
  
  df12.sim<-df12.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df12.summary<- df12.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df12.overall<- df12.summary[!duplicated(df12.summary$id), ]
  #
  df12.overall2way28_52_12_u_mean<-mean(df12.summary$utility_mean)
  df12.overall2way28_52_12_c_mean<-mean(df12.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df12.survival<-df12.summary %>% filter(state%in%4)
  df12.sens2way28_52_12_u_mean<-mean(df12.survival$utility_mean)
  df12.sens2way28_52_12_c_mean<-mean(df12.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 13 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df13.sim<-df13.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df13.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df13.sim$day>0, 340,0))+4650+(ifelse(df13.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*12)+(340*12)+(724*12)) # assumping death at beggining of day and no extra costs 
  
  df13.sim<-df13.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df13.summary<- df13.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df13.overall<- df13.summary[!duplicated(df13.summary$id), ]
  #
  df13.overall2way28_52_13_u_mean<-mean(df13.summary$utility_mean)
  df13.overall2way28_52_13_c_mean<-mean(df13.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df13.survival<-df13.summary %>% filter(state%in%4)
  df13.sens2way28_52_13_u_mean<-mean(df13.survival$utility_mean)
  df13.sens2way28_52_13_c_mean<-mean(df13.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 14 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df14.sim<-df14.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df14.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df14.sim$day>0, 340,0))+4650+(ifelse(df14.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*13)+(340*13)+(724*13))  # assumping death at beggining of day and no extra costs 
  
  df14.sim<-df14.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df14.summary<- df14.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df14.overall<- df14.summary[!duplicated(df14.summary$id), ]
  #
  df14.overall2way28_52_14_u_mean<-mean(df14.summary$utility_mean)
  df14.overall2way28_52_14_c_mean<-mean(df14.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df14.survival<-df14.summary %>% filter(state%in%4)
  df14.sens2way28_52_14_u_mean<-mean(df14.survival$utility_mean)
  df14.sens2way28_52_14_c_mean<-mean(df14.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 15 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df15.sim<-df15.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df15.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df15.sim$day>0, 340,0))+4650+(ifelse(df15.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*14)+(340*14)+(724*14))  # assumping death at beggining of day and no extra costs 
  
  df15.sim<-df15.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df15.summary<- df15.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df15.overall<- df15.summary[!duplicated(df15.summary$id), ]
  #
  df15.overall2way28_52_15_u_mean<-mean(df15.summary$utility_mean)
  df15.overall2way28_52_15_c_mean<-mean(df15.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df15.survival<-df15.summary %>% filter(state%in%4)
  df15.sens2way28_52_15_u_mean<-mean(df15.survival$utility_mean)
  df15.sens2way28_52_15_c_mean<-mean(df15.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 16 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df16.sim<-df16.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df16.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df16.sim$day>0, 340,0))+4650+(ifelse(df16.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*15)+(340*15)+(724*15))  # assumping death at beggining of day and no extra costs 
  
  df16.sim<-df16.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df16.summary<- df16.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df16.overall<- df16.summary[!duplicated(df16.summary$id), ]
  #
  df16.overall2way28_52_16_u_mean<-mean(df16.summary$utility_mean)
  df16.overall2way28_52_16_c_mean<-mean(df16.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df16.survival<-df16.summary %>% filter(state%in%4)
  df16.sens2way28_52_16_u_mean<-mean(df16.survival$utility_mean)
  df16.sens2way28_52_16_c_mean<-mean(df16.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 17 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df17.sim<-df17.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df17.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df17.sim$day>0, 340,0))+4650+(ifelse(df17.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*16)+(340*16)+(724*16))  # assumping death at beggining of day and no extra costs 
  
  df17.sim<-df17.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df17.summary<- df17.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df17.overall<- df17.summary[!duplicated(df17.summary$id), ]
  #
  df17.overall2way28_52_17_u_mean<-mean(df17.summary$utility_mean)
  df17.overall2way28_52_17_c_mean<-mean(df17.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df17.survival<-df17.summary %>% filter(state%in%4)
  df17.sens2way28_52_17_u_mean<-mean(df17.survival$utility_mean)
  df17.sens2way28_52_17_c_mean<-mean(df17.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 18 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df18.sim<-df18.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df18.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df18.sim$day>0, 340,0))+4650+(ifelse(df18.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*17)+(340*17)+(724*17))  # assumping death at beggining of day and no extra costs 
  
  df18.sim<-df18.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df18.summary<- df18.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df18.overall<- df18.summary[!duplicated(df18.summary$id), ]
  #
  df18.overall2way28_52_18_u_mean<-mean(df18.summary$utility_mean)
  df18.overall2way28_52_18_c_mean<-mean(df18.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df18.survival<-df18.summary %>% filter(state%in%4)
  df18.sens2way28_52_18_u_mean<-mean(df18.survival$utility_mean)
  df18.sens2way28_52_18_c_mean<-mean(df18.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 19 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df19.sim<-df19.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df19.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df19.sim$day>0, 340,0))+4650+(ifelse(df19.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*18)+(340*18)+(724*18))  # assumping death at beggining of day and no extra costs 
  
  df19.sim<-df19.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df19.summary<- df19.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df19.overall<- df19.summary[!duplicated(df19.summary$id), ]
  #
  df19.overall2way28_52_19_u_mean<-mean(df19.summary$utility_mean)
  df19.overall2way28_52_19_c_mean<-mean(df19.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df19.survival<-df19.summary %>% filter(state%in%4)
  df19.sens2way28_52_19_u_mean<-mean(df19.survival$utility_mean)
  df19.sens2way28_52_19_c_mean<-mean(df19.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 20 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df20.sim<-df20.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df20.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df20.sim$day>0, 340,0))+4650+(ifelse(df20.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*19)+(340*19)+(724*19))  # assumping death at beggining of day and no extra costs 
  
  df20.sim<-df20.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df20.summary<- df20.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df20.overall<- df20.summary[!duplicated(df20.summary$id), ]
  #
  df20.overall2way28_52_20_u_mean<-mean(df20.summary$utility_mean)
  df20.overall2way28_52_20_c_mean<-mean(df20.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df20.survival<-df20.summary %>% filter(state%in%4)
  df20.sens2way28_52_20_u_mean<-mean(df20.survival$utility_mean)
  df20.sens2way28_52_20_c_mean<-mean(df20.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 21 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df21.sim<-df21.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df21.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df21.sim$day>0, 340,0))+4650+(ifelse(df21.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*20)+(340*20)+(724*20))  # assumping death at beggining of day and no extra costs 
  
  df21.sim<-df21.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df21.summary<- df21.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df21.overall<- df21.summary[!duplicated(df21.summary$id), ]
  #
  df21.overall2way28_52_21_u_mean<-mean(df21.summary$utility_mean)
  df21.overall2way28_52_21_c_mean<-mean(df21.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df21.survival<-df21.summary %>% filter(state%in%4)
  df21.sens2way28_52_21_u_mean<-mean(df21.survival$utility_mean)
  df21.sens2way28_52_21_c_mean<-mean(df21.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 22 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df22.sim<-df22.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df22.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df22.sim$day>0, 340,0))+4650+(ifelse(df22.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*21)+(340*21)+(724*21)) # assumping death at beggining of day and no extra costs 
  
  df22.sim<-df22.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df22.summary<- df22.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df22.overall<- df22.summary[!duplicated(df22.summary$id), ]
  #
  df22.overall2way28_52_22_u_mean<-mean(df22.summary$utility_mean)
  df22.overall2way28_52_22_c_mean<-mean(df22.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df22.survival<-df22.summary %>% filter(state%in%4)
  df22.sens2way28_52_22_u_mean<-mean(df22.survival$utility_mean)
  df22.sens2way28_52_22_c_mean<-mean(df22.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 23 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df23.sim<-df23.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df23.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df23.sim$day>0, 340,0))+4650+(ifelse(df23.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*22)+(340*22)+(724*22)) # assumping death at beggining of day and no extra costs 
  
  df23.sim<-df23.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df23.summary<- df23.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df23.overall<- df23.summary[!duplicated(df23.summary$id), ]
  #
  df23.overall2way28_52_23_u_mean<-mean(df23.summary$utility_mean)
  df23.overall2way28_52_23_c_mean<-mean(df23.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df23.survival<-df23.summary %>% filter(state%in%4)
  df23.sens2way28_52_23_u_mean<-mean(df23.survival$utility_mean)
  df23.sens2way28_52_23_c_mean<-mean(df23.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 24 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df24.sim<-df24.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df24.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df24.sim$day>0, 340,0))+4650+(ifelse(df24.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*23)+(340*23)+(724*23))  # assumping death at beggining of day and no extra costs 
  
  df24.sim<-df24.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df24.summary<- df24.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df24.overall<- df24.summary[!duplicated(df24.summary$id), ]
  #
  df24.overall2way28_52_24_u_mean<-mean(df24.summary$utility_mean)
  df24.overall2way28_52_24_c_mean<-mean(df24.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df24.survival<-df24.summary %>% filter(state%in%4)
  df24.sens2way28_52_24_u_mean<-mean(df24.survival$utility_mean)
  df24.sens2way28_52_24_c_mean<-mean(df24.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 25 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df25.sim<-df25.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df25.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df25.sim$day>0, 340,0))+4650+(ifelse(df25.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*24)+(340*24)+(724*24)) # assumping death at beggining of day and no extra costs 
  
  df25.sim<-df25.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df25.summary<- df25.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df25.overall<- df25.summary[!duplicated(df25.summary$id), ]
  #
  df25.overall2way28_52_25_u_mean<-mean(df25.summary$utility_mean)
  df25.overall2way28_52_25_c_mean<-mean(df25.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df25.survival<-df25.summary %>% filter(state%in%4)
  df25.sens2way28_52_25_u_mean<-mean(df25.survival$utility_mean)
  df25.sens2way28_52_25_c_mean<-mean(df25.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 26 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df26.sim<-df26.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df26.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df26.sim$day>0, 340,0))+4650+(ifelse(df26.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*25)+(340*25)+(724*25))  # assumping death at beggining of day and no extra costs 
  
  df26.sim<-df26.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df26.summary<- df26.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df26.overall<- df26.summary[!duplicated(df26.summary$id), ]
  #
  df26.overall2way28_52_26_u_mean<-mean(df26.summary$utility_mean)
  df26.overall2way28_52_26_c_mean<-mean(df26.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df26.survival<-df26.summary %>% filter(state%in%4)
  df26.sens2way28_52_26_u_mean<-mean(df26.survival$utility_mean)
  df26.sens2way28_52_26_c_mean<-mean(df26.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 27 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df27.sim<-df27.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df27.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df27.sim$day>0, 340,0))+4650+(ifelse(df27.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*26)+(340*26)+(724*26))  # assumping death at beggining of day and no extra costs 
  
  df27.sim<-df27.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df27.summary<- df27.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df27.overall<- df27.summary[!duplicated(df27.summary$id), ]
  #
  df27.overall2way28_52_27_u_mean<-mean(df27.summary$utility_mean)
  df27.overall2way28_52_27_c_mean<-mean(df27.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df27.survival<-df27.summary %>% filter(state%in%4)
  df27.sens2way28_52_27_u_mean<-mean(df27.survival$utility_mean)
  df27.sens2way28_52_27_c_mean<-mean(df27.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 28 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df28.sim<-df28.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df28.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df28.sim$day>0, 340,0))+4650+(ifelse(df28.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*27)+(340*27)+(724*27))  # assumping death at beggining of day and no extra costs 
  
  df28.sim<-df28.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df28.summary<- df28.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df28.overall<- df28.summary[!duplicated(df28.summary$id), ]
  #
  df28.overall2way28_52_28_u_mean<-mean(df28.summary$utility_mean)
  df28.overall2way28_52_28_c_mean<-mean(df28.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df28.survival<-df28.summary %>% filter(state%in%4)
  df28.sens2way28_52_28_u_mean<-mean(df28.survival$utility_mean)
  df28.sens2way28_52_28_c_mean<-mean(df28.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 29 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df29.sim<-df29.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df29.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df29.sim$day>0, 340,0))+4650+(ifelse(df29.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*28)+(340*28)+(724*28))  # assumping death at beggining of day and no extra costs 
  
  df29.sim<-df29.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df29.summary<- df29.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean=(sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df29.overall<- df29.summary[!duplicated(df29.summary$id), ]
  #
  df29.overall2way28_52_29_u_mean<-mean(df29.summary$utility_mean)
  df29.overall2way28_52_29_c_mean<-mean(df29.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df29.survival<-df29.summary %>% filter(state%in%4)
  df29.sens2way28_52_29_u_mean<-mean(df29.survival$utility_mean)
  df29.sens2way28_52_29_c_mean<-mean(df29.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 30 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df30.sim<-df30.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df30.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df30.sim$day>0, 340,0))+4650+(ifelse(df30.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*29)+(340*29)+(724*29))  # assumping death at beggining of day and no extra costs 
  
  df30.sim<-df30.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df30.summary<- df30.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df30.overall<- df30.summary[!duplicated(df30.summary$id), ]
  #
  df30.overall2way28_52_30_u_mean<-mean(df30.summary$utility_mean)
  df30.overall2way28_52_30_c_mean<-mean(df30.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df30.survival<-df30.summary %>% filter(state%in%4)
  df30.sens2way28_52_30_u_mean<-mean(df30.survival$utility_mean)
  df30.sens2way28_52_30_c_mean<-mean(df30.survival$costs_sum)
  
  df1.sens2way28_52<-df1.summary
  df2.sens2way28_52<-df2.summary
  df3.sens2way28_52<-df3.summary
  df4.sens2way28_52<-df4.summary
  df5.sens2way28_52<-df5.summary
  df6.sens2way28_52<-df6.summary
  df7.sens2way28_52<-df7.summary
  df8.sens2way28_52<-df8.summary
  df9.sens2way28_52<-df9.summary
  df10.sens2way28_52<-df10.summary
  df11.sens2way28_52<-df11.summary
  df12.sens2way28_52<-df12.summary
  df13.sens2way28_52<-df13.summary
  df14.sens2way28_52<-df14.summary
  df15.sens2way28_52<-df15.summary
  df16.sens2way28_52<-df16.summary
  df17.sens2way28_52<-df17.summary
  df18.sens2way28_52<-df18.summary
  df19.sens2way28_52<-df19.summary
  df20.sens2way28_52<-df20.summary
  df21.sens2way28_52<-df21.summary
  df22.sens2way28_52<-df22.summary
  df23.sens2way28_52<-df23.summary
  df24.sens2way28_52<-df24.summary
  df25.sens2way28_52<-df25.summary
  df26.sens2way28_52<-df26.summary
  df27.sens2way28_52<-df27.summary
  df28.sens2way28_52<-df28.summary
  df29.sens2way28_52<-df29.summary
  df30.sens2way28_52<-df30.summary
  
  
  
  
  rm(df1.sim)
  rm(df2.sim)
  rm(df3.sim)
  rm(df4.sim)
  rm(df5.sim)
  rm(df6.sim)
  rm(df7.sim)
  rm(df8.sim)
  rm(df9.sim)
  rm(df10.sim)
  rm(df11.sim)
  rm(df12.sim)
  rm(df13.sim)
  rm(df14.sim)
  rm(df15.sim)
  rm(df16.sim)
  rm(df17.sim)
  rm(df18.sim)
  rm(df19.sim)
  rm(df20.sim)
  rm(df21.sim)
  rm(df22.sim)
  rm(df23.sim)
  rm(df24.sim)
  rm(df25.sim)
  rm(df26.sim)
  rm(df27.sim)
  rm(df28.sim)
  rm(df29.sim)
  rm(df30.sim)
}

# 2 way sensitivity cmo 28 52 case results ------------------------------------------------------------
sens2way28_52.overall_c_vect<-c()
for (i in 1:30){
  sens2way28_52.overall_c_vect[i]<-get(paste("df", i, ".overall2way28_52_", i, "_c_mean",sep = ""))  
}

sens2way28_52.overall_u_vect<-c()
for (i in 1:30){
  sens2way28_52.overall_u_vect[i]<-get(paste("df", i, ".overall2way28_52_", i, "_u_mean",sep = ""))
}

sens2way28_52.survival_c_vect<-c()
for (i in 1:30){
  sens2way28_52.survival_c_vect[i]<-get(paste("df", i, ".sens2way28_52_",i,"_c_mean",sep = "")) 
}

sens2way28_52.survival_u_vect<-c()
for (i in 1:30){
  sens2way28_52.survival_u_vect[i]<-get(paste("df", i, ".sens2way28_52_",i,"_u_mean",sep = ""))
}

sens2way28_52.ce_results<- matrix(c(sens2way28_52.overall_c_vect,sens2way28_52.overall_u_vect,sens2way28_52.survival_c_vect,sens2way28_52.survival_u_vect), nrow=30, byrow=FALSE)
colnames(sens2way28_52.ce_results) <- c("overall_c","overall_u","survival_c","survival_u")



# markov objects  2way 52 - death 65----

{
  mo1.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65), name="MarkovChain Q1")
  
  
  mo2.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_2), name="MarkovChain Q1")
  
  mo3.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_3), name="MarkovChain Q1")
  mo4.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_4), name="MarkovChain Q1")
  mo5.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_5), name="MarkovChain Q1")
  mo6.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_6), name="MarkovChain Q1")
  mo7.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_7), name="MarkovChain Q1")
  mo8.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_8), name="MarkovChain Q1")
  mo9.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_9), name="MarkovChain Q1")
  mo10.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_10), name="MarkovChain Q1")
  mo11.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_11), name="MarkovChain Q1")
  mo12.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_12), name="MarkovChain Q1")
  mo13.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_13), name="MarkovChain Q1")
  mo14.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_14), name="MarkovChain Q1")
  mo15.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_15), name="MarkovChain Q1")
  mo16.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_16), name="MarkovChain Q1")
  mo17.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_17), name="MarkovChain Q1")
  mo18.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_18), name="MarkovChain Q1")
  mo19.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_19), name="MarkovChain Q1")
  mo20.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_20), name="MarkovChain Q1")
  mo21.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_21), name="MarkovChain Q1")
  mo22.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_22), name="MarkovChain Q1")
  mo23.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_23), name="MarkovChain Q1")
  mo24.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_24), name="MarkovChain Q1")
  mo25.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_25), name="MarkovChain Q1")
  mo26.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_26), name="MarkovChain Q1")
  mo27.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_27), name="MarkovChain Q1")
  mo28.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_28), name="MarkovChain Q1")
  mo29.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_29), name="MarkovChain Q1")
  mo30.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way52_65_30), name="MarkovChain Q1")
}




# SENSITIVITY ANALYSIS first order monte carlo simulations cmo 52 death 65 ---------

# 2 way 

B <- 100
N <- 30

{
  sim1.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo1.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim2.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo2.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim3.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo3.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim4.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo4.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim5.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo5.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim6.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo6.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim7.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo7.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim8.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo8.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim9.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo9.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim10.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo10.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim11.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo11.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim12.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo12.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim13.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo13.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim14.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo14.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim15.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo15.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim16.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo16.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim17.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo17.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim18.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo18.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim19.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo19.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim20.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo20.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim21.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo21.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim22.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo22.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim23.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo23.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim24.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo24.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim25.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo25.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim26.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo26.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim27.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo27.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim28.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo28.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim29.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo29.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim30.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo30.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  

}
# 1 non-agressive
# 2 aggressive
# 3 cmo
# 4 discharged
# 5 death


# Convert simulations into data frames 
{
  df1.sim<- as.data.frame(sim1.msm)
  df1.sim<-df1.sim %>% gather(key = "id", value = "state")
  df1.sim<-df1.sim %>% mutate(col1=streak_run(state, k=1000))
  df1.sim<-df1.sim %>% filter(!(state=="4" & col1!=1))
  df1.sim<-df1.sim %>% filter(!(state=="5" & col1!=1))
  
  df2.sim<- as.data.frame(sim2.msm)
  df2.sim<-df2.sim %>% gather(key = "id", value = "state")
  df2.sim<-df2.sim %>% mutate(col1=streak_run(state, k=1000))
  df2.sim<-df2.sim %>% filter(!(state=="4" & col1!=1))
  df2.sim<-df2.sim %>% filter(!(state=="5" & col1!=1))
  
  df3.sim<- as.data.frame(sim3.msm)
  df3.sim<-df3.sim %>% gather(key = "id", value = "state")
  df3.sim<-df3.sim %>% mutate(col1=streak_run(state, k=1000))
  df3.sim<-df3.sim %>% filter(!(state=="4" & col1!=1))
  df3.sim<-df3.sim %>% filter(!(state=="5" & col1!=1))
  
  df4.sim<- as.data.frame(sim4.msm)
  df4.sim<-df4.sim %>% gather(key = "id", value = "state")
  df4.sim<-df4.sim %>% mutate(col1=streak_run(state, k=1000))
  df4.sim<-df4.sim %>% filter(!(state=="4" & col1!=1))
  df4.sim<-df4.sim %>% filter(!(state=="5" & col1!=1))
  
  df5.sim<- as.data.frame(sim5.msm)
  df5.sim<-df5.sim %>% gather(key = "id", value = "state")
  df5.sim<-df5.sim %>% mutate(col1=streak_run(state, k=1000))
  df5.sim<-df5.sim %>% filter(!(state=="4" & col1!=1))
  df5.sim<-df5.sim %>% filter(!(state=="5" & col1!=1))
  
  df6.sim<- as.data.frame(sim6.msm)
  df6.sim<-df6.sim %>% gather(key = "id", value = "state")
  df6.sim<-df6.sim %>% mutate(col1=streak_run(state, k=1000))
  df6.sim<-df6.sim %>% filter(!(state=="4" & col1!=1))
  df6.sim<-df6.sim %>% filter(!(state=="5" & col1!=1))
  
  df7.sim<- as.data.frame(sim7.msm)
  df7.sim<-df7.sim %>% gather(key = "id", value = "state")
  df7.sim<-df7.sim %>% mutate(col1=streak_run(state, k=1000))
  df7.sim<-df7.sim %>% filter(!(state=="4" & col1!=1))
  df7.sim<-df7.sim %>% filter(!(state=="5" & col1!=1))
  
  df8.sim<- as.data.frame(sim8.msm)
  df8.sim<-df8.sim %>% gather(key = "id", value = "state")
  df8.sim<-df8.sim %>% mutate(col1=streak_run(state, k=1000))
  df8.sim<-df8.sim %>% filter(!(state=="4" & col1!=1))
  df8.sim<-df8.sim %>% filter(!(state=="5" & col1!=1))
  
  df9.sim<- as.data.frame(sim9.msm)
  df9.sim<-df9.sim %>% gather(key = "id", value = "state")
  df9.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df9.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df9.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df10.sim<- as.data.frame(sim10.msm)
  df10.sim<-df9.sim %>% gather(key = "id", value = "state")
  df10.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df10.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df10.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df11.sim<- as.data.frame(sim11.msm)
  df11.sim<-df11.sim %>% gather(key = "id", value = "state")
  df11.sim<-df11.sim %>% mutate(col1=streak_run(state, k=1000))
  df11.sim<-df11.sim %>% filter(!(state=="4" & col1!=1))
  df11.sim<-df11.sim %>% filter(!(state=="5" & col1!=1))
  
  df12.sim<- as.data.frame(sim12.msm)
  df12.sim<-df12.sim %>% gather(key = "id", value = "state")
  df12.sim<-df12.sim %>% mutate(col1=streak_run(state, k=1000))
  df12.sim<-df12.sim %>% filter(!(state=="4" & col1!=1))
  df12.sim<-df12.sim %>% filter(!(state=="5" & col1!=1))
  
  df13.sim<- as.data.frame(sim13.msm)
  df13.sim<-df13.sim %>% gather(key = "id", value = "state")
  df13.sim<-df13.sim %>% mutate(col1=streak_run(state, k=1000))
  df13.sim<-df13.sim %>% filter(!(state=="4" & col1!=1))
  df13.sim<-df13.sim %>% filter(!(state=="5" & col1!=1))
  
  df14.sim<- as.data.frame(sim14.msm)
  df14.sim<-df14.sim %>% gather(key = "id", value = "state")
  df14.sim<-df14.sim %>% mutate(col1=streak_run(state, k=1000))
  df14.sim<-df14.sim %>% filter(!(state=="4" & col1!=1))
  df14.sim<-df14.sim %>% filter(!(state=="5" & col1!=1))
  
  df15.sim<- as.data.frame(sim15.msm)
  df15.sim<-df15.sim %>% gather(key = "id", value = "state")
  df15.sim<-df15.sim %>% mutate(col1=streak_run(state, k=1000))
  df15.sim<-df15.sim %>% filter(!(state=="4" & col1!=1))
  df15.sim<-df15.sim %>% filter(!(state=="5" & col1!=1))
  
  df16.sim<- as.data.frame(sim16.msm)
  df16.sim<-df16.sim %>% gather(key = "id", value = "state")
  df16.sim<-df16.sim %>% mutate(col1=streak_run(state, k=1000))
  df16.sim<-df16.sim %>% filter(!(state=="4" & col1!=1))
  df16.sim<-df16.sim %>% filter(!(state=="5" & col1!=1))
  
  df17.sim<- as.data.frame(sim17.msm)
  df17.sim<-df17.sim %>% gather(key = "id", value = "state")
  df17.sim<-df17.sim %>% mutate(col1=streak_run(state, k=1000))
  df17.sim<-df17.sim %>% filter(!(state=="4" & col1!=1))
  df17.sim<-df17.sim %>% filter(!(state=="5" & col1!=1))
  
  df18.sim<- as.data.frame(sim18.msm)
  df18.sim<-df18.sim %>% gather(key = "id", value = "state")
  df18.sim<-df18.sim %>% mutate(col1=streak_run(state, k=1000))
  df18.sim<-df18.sim %>% filter(!(state=="4" & col1!=1))
  df18.sim<-df18.sim %>% filter(!(state=="5" & col1!=1))
  
  df19.sim<- as.data.frame(sim19.msm)
  df19.sim<-df19.sim %>% gather(key = "id", value = "state")
  df19.sim<-df19.sim %>% mutate(col1=streak_run(state, k=1000))
  df19.sim<-df19.sim %>% filter(!(state=="4" & col1!=1))
  df19.sim<-df19.sim %>% filter(!(state=="5" & col1!=1))
  
  df20.sim<- as.data.frame(sim20.msm)
  df20.sim<-df9.sim %>% gather(key = "id", value = "state")
  df20.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df20.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df20.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df21.sim<- as.data.frame(sim21.msm)
  df21.sim<-df21.sim %>% gather(key = "id", value = "state")
  df21.sim<-df21.sim %>% mutate(col1=streak_run(state, k=1000))
  df21.sim<-df21.sim %>% filter(!(state=="4" & col1!=1))
  df21.sim<-df21.sim %>% filter(!(state=="5" & col1!=1))
  
  df22.sim<- as.data.frame(sim22.msm)
  df22.sim<-df22.sim %>% gather(key = "id", value = "state")
  df22.sim<-df22.sim %>% mutate(col1=streak_run(state, k=1000))
  df22.sim<-df22.sim %>% filter(!(state=="4" & col1!=1))
  df22.sim<-df22.sim %>% filter(!(state=="5" & col1!=1))
  
  df23.sim<- as.data.frame(sim23.msm)
  df23.sim<-df23.sim %>% gather(key = "id", value = "state")
  df23.sim<-df23.sim %>% mutate(col1=streak_run(state, k=1000))
  df23.sim<-df23.sim %>% filter(!(state=="4" & col1!=1))
  df23.sim<-df23.sim %>% filter(!(state=="5" & col1!=1))
  
  df24.sim<- as.data.frame(sim24.msm)
  df24.sim<-df24.sim %>% gather(key = "id", value = "state")
  df24.sim<-df24.sim %>% mutate(col1=streak_run(state, k=1000))
  df24.sim<-df24.sim %>% filter(!(state=="4" & col1!=1))
  df24.sim<-df24.sim %>% filter(!(state=="5" & col1!=1))
  
  df25.sim<- as.data.frame(sim25.msm)
  df25.sim<-df25.sim %>% gather(key = "id", value = "state")
  df25.sim<-df25.sim %>% mutate(col1=streak_run(state, k=1000))
  df25.sim<-df25.sim %>% filter(!(state=="4" & col1!=1))
  df25.sim<-df25.sim %>% filter(!(state=="5" & col1!=1))
  
  df26.sim<- as.data.frame(sim26.msm)
  df26.sim<-df26.sim %>% gather(key = "id", value = "state")
  df26.sim<-df26.sim %>% mutate(col1=streak_run(state, k=1000))
  df26.sim<-df26.sim %>% filter(!(state=="4" & col1!=1))
  df26.sim<-df26.sim %>% filter(!(state=="5" & col1!=1))
  
  df27.sim<- as.data.frame(sim27.msm)
  df27.sim<-df27.sim %>% gather(key = "id", value = "state")
  df27.sim<-df27.sim %>% mutate(col1=streak_run(state, k=1000))
  df27.sim<-df27.sim %>% filter(!(state=="4" & col1!=1))
  df27.sim<-df27.sim %>% filter(!(state=="5" & col1!=1))
  
  df28.sim<- as.data.frame(sim28.msm)
  df28.sim<-df28.sim %>% gather(key = "id", value = "state")
  df28.sim<-df28.sim %>% mutate(col1=streak_run(state, k=1000))
  df28.sim<-df28.sim %>% filter(!(state=="4" & col1!=1))
  df28.sim<-df28.sim %>% filter(!(state=="5" & col1!=1))
  
  df29.sim<- as.data.frame(sim29.msm)
  df29.sim<-df29.sim %>% gather(key = "id", value = "state")
  df29.sim<-df29.sim %>% mutate(col1=streak_run(state, k=1000))
  df29.sim<-df29.sim %>% filter(!(state=="4" & col1!=1))
  df29.sim<-df29.sim %>% filter(!(state=="5" & col1!=1))
  
  df30.sim<- as.data.frame(sim30.msm)
  df30.sim<-df30.sim %>% gather(key = "id", value = "state")
  df30.sim<-df30.sim %>% mutate(col1=streak_run(state, k=1000))
  df30.sim<-df30.sim %>% filter(!(state=="4" & col1!=1))
  df30.sim<-df30.sim %>% filter(!(state=="5" & col1!=1))
  
  rm(sim1.msm) 
  rm(sim2.msm)
  rm(sim3.msm)
  rm(sim4.msm)
  rm(sim5.msm)
  rm(sim6.msm)
  rm(sim7.msm)
  rm(sim8.msm)
  rm(sim9.msm)
  rm(sim10.msm)
  rm(sim11.msm)
  rm(sim12.msm)
  rm(sim13.msm)
  rm(sim14.msm)
  rm(sim15.msm)
  rm(sim16.msm)
  rm(sim17.msm)
  rm(sim18.msm)
  rm(sim19.msm)
  rm(sim20.msm)
  rm(sim21.msm)
  rm(sim22.msm)
  rm(sim23.msm)
  rm(sim24.msm)
  rm(sim25.msm)
  rm(sim26.msm)
  rm(sim27.msm)
  rm(sim28.msm)
  rm(sim29.msm)
  rm(sim30.msm)
}



# SENSITIVITY ANALYSIS Utilities and costs cmo 52 deaths 65- ------------------------
{
  # Utility value for being in ICU:	0.66, 0.39-0.93,	Beta,	(Cost effectiveness of antimicrobial catheters in the intensive care unit: addressing uncertainty in the decision)
  # Utility value for highly invasive care:	0.55,	0.39-0.71,	(Beta,	Comparison of Health-Related Quality of Life Preferences Between Physicians and Cirrhotic Patients: Implications for Cost–Utility Analysesin Chronic Liver Disease)
  # Utility value for paliative care:	0.28,	0.23-0.35,	Beta,	(Ultrasound Elastography for Fibrosis Surveillance Is Cos tEffective in Patients with Chronic Hepatitis C Virus in the UK)
  
  # Daily costs:
  # ICU Room & Board	 $3,805.00 	-	-
  # Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
  # Mechanical ventilation first day 	 $928.99 	-	-
  # Mechanical ventilation	 $775.00 	-	-
  # Comfort care	 $988.00 	-	-
  # Initial hospital physican care	 $662.00 	-	-
  # Subsequent hospital physican care	 $340.00 	-	-
  # Hospital discharge day	 $353.00 	-	-
  # Critical care phsycian care	 $724.00 	-	-
  
  # sources: BIDMC - Patient Financial Services & HMFP - Finance
  
  # utilities
  u_nhic<-0.66
  u_hic<-0.55
  u_cmo<-0.28
  u_discharge<-1
  u_died<-1
  
  # 1 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df1.sim<-df1.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df1.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df1.sim$day>0, 340,0))+4650+(ifelse(df1.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00 # assumping death at beggining of day and no extra costs 
  
  df1.sim<-df1.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df1.summary<- df1.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= mean(utility),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df1.overall<- df1.summary[!duplicated(df1.summary$id), ]
  #
  df1.overall2way52_65_1_u_mean<-mean(df1.summary$utility_mean)
  df1.overall2way52_65_1_c_mean<-mean(df1.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df1.survival<-df1.summary %>% filter(state%in%4)
  df1.sens2way52_65_1_u_mean<-mean(df1.survival$utility_mean)  
  df1.sens2way52_65_1_c_mean<-mean(df1.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 2 day hic ////////////////////////////////////////////////////////////////////
  
  # Daily costs:
  # ICU Room & Board	 $3,805.00 	-	-
  # Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
  # Mechanical ventilation first day 	 $928.99 	-	-
  # Mechanical ventilation	 $775.00 	-	-
  # Comfort care	 $988.00 	-	-
  # Initial hospital physican care	 $662.00 	-	-
  # Subsequent hospital physican care	 $340.00 	-	-
  # Hospital discharge day	 $353.00 	-	-
  # Critical care phsycian care	 $724.00 	-	-
  
  # Create flags for sequential days  
  df2.sim<-df2.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  
  # Create costs
  c_nhic<-3805+662+(ifelse(df2.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df2.sim$day>0, 340,0))+4650+(ifelse(df2.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*1)+(340*1)+(724*1)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC 
  
  df2.sim<-df2.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df2.summary<- df2.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))), # adding extra days of utility given HIC
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df2.overall<- df2.summary[!duplicated(df2.summary$id), ]
  #
  df2.overall2way52_65_2_u_mean<-mean(df2.summary$utility_mean)
  df2.overall2way52_65_2_c_mean<-mean(df2.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df2.survival<-df2.summary %>% filter(state%in%4)
  df2.sens2way52_65_2_u_mean<-mean(df2.survival$utility_mean)
  df2.sens2way52_65_2_c_mean<-mean(df2.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 3 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df3.sim<-df3.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df3.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df3.sim$day>0, 340,0))+4650+(ifelse(df3.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*2)+(340*2)+(724*2))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC
  
  df3.sim<-df3.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df3.summary<- df3.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df3.overall<- df3.summary[!duplicated(df3.summary$id), ]
  #
  df3.overall2way52_65_3_u_mean<-mean(df3.summary$utility_mean)
  df3.overall2way52_65_3_c_mean<-mean(df3.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df3.survival<-df3.summary %>% filter(state%in%4)
  df3.sens2way52_65_3_u_mean<-mean(df3.survival$utility_mean)
  df3.sens2way52_65_3_c_mean<-mean(df3.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 4 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df4.sim<-df4.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df4.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df4.sim$day>0, 340,0))+4650+(ifelse(df4.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*3)+(340*3)+(724*3))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 
  
  df4.sim<-df4.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df4.summary<- df4.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df4.overall<- df4.summary[!duplicated(df4.summary$id), ]
  #
  df4.overall2way52_65_4_u_mean<-mean(df4.summary$utility_mean)
  df4.overall2way52_65_4_c_mean<-mean(df4.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df4.survival<-df4.summary %>% filter(state%in%4)
  df4.sens2way52_65_4_u_mean<-mean(df4.survival$utility_mean)
  df4.sens2way52_65_4_c_mean<-mean(df4.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 5 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df5.sim<-df5.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df5.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df5.sim$day>0, 340,0))+4650+(ifelse(df5.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*4)+(340*4)+(724*4))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df5.sim<-df5.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df5.summary<- df5.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df5.overall<- df5.summary[!duplicated(df5.summary$id), ]
  #
  df5.overall2way52_65_5_u_mean<-mean(df5.summary$utility_mean)
  df5.overall2way52_65_5_c_mean<-mean(df5.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df5.survival<-df5.summary %>% filter(state%in%4)
  df5.sens2way52_65_5_u_mean<-mean(df5.survival$utility_mean)
  df5.sens2way52_65_5_c_mean<-mean(df5.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 6 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df6.sim<-df6.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df6.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df6.sim$day>0, 340,0))+4650+(ifelse(df6.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*5)+(340*5)+(724*5))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df6.sim<-df6.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df6.summary<- df6.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df6.overall<- df6.summary[!duplicated(df6.summary$id), ]
  #
  df6.overall2way52_65_6_u_mean<-mean(df6.summary$utility_mean)
  df6.overall2way52_65_6_c_mean<-mean(df6.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df6.survival<-df6.summary %>% filter(state%in%4)
  df6.sens2way52_65_6_u_mean<-mean(df6.survival$utility_mean)
  df6.sens2way52_65_6_c_mean<-mean(df6.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 7 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df7.sim<-df7.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df7.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df7.sim$day>0, 340,0))+4650+(ifelse(df7.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*6)+(340*6)+(724*6))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df7.sim<-df7.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df7.summary<- df7.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df7.overall<- df7.summary[!duplicated(df7.summary$id), ]
  #
  df7.overall2way52_65_7_u_mean<-mean(df7.summary$utility_mean)
  df7.overall2way52_65_7_c_mean<-mean(df7.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df7.survival<-df7.summary %>% filter(state%in%4)
  df7.sens2way52_65_7_u_mean<-mean(df7.survival$utility_mean)
  df7.sens2way52_65_7_c_mean<-mean(df7.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 8 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df8.sim<-df8.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df8.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df8.sim$day>0, 340,0))+4650+(ifelse(df8.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*7)+(340*7)+(724*7)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df8.sim<-df8.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df8.summary<- df8.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df8.overall<- df8.summary[!duplicated(df8.summary$id), ]
  #
  df8.overall2way52_65_8_u_mean<-mean(df8.summary$utility_mean)
  df8.overall2way52_65_8_c_mean<-mean(df8.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df8.survival<-df8.summary %>% filter(state%in%4)
  df8.sens2way52_65_8_u_mean<-mean(df8.survival$utility_mean)
  df8.sens2way52_65_8_c_mean<-mean(df8.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 9 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df9.sim<-df9.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df9.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df9.sim$day>0, 340,0))+4650+(ifelse(df9.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*8)+(340*8)+(724*8))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df9.sim<-df9.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df9.summary<- df9.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df9.overall<- df9.summary[!duplicated(df9.summary$id), ]
  #
  df9.overall2way52_65_9_u_mean<-mean(df9.summary$utility_mean)
  df9.overall2way52_65_9_c_mean<-mean(df9.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df9.survival<-df9.summary %>% filter(state%in%4)
  df9.sens2way52_65_9_u_mean<-mean(df9.survival$utility_mean)
  df9.sens2way52_65_9_c_mean<-mean(df9.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 10 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df10.sim<-df10.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df10.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df10.sim$day>0, 340,0))+4650+(ifelse(df10.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*9)+(340*9)+(724*9))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 
  
  df10.sim<-df10.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df10.summary<- df10.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df10.overall<- df10.summary[!duplicated(df10.summary$id), ]
  #
  df10.overall2way52_65_10_u_mean<-mean(df10.summary$utility_mean)
  df10.overall2way52_65_10_c_mean<-mean(df10.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df10.survival<-df10.summary %>% filter(state%in%4)
  df10.sens2way52_65_10_u_mean<-mean(df10.survival$utility_mean)
  df10.sens2way52_65_10_c_mean<-mean(df10.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 11 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df11.sim<-df11.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df11.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df11.sim$day>0, 340,0))+4650+(ifelse(df11.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*10)+(340*10)+(724*10))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df11.sim<-df11.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df11.summary<- df11.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df11.overall<- df11.summary[!duplicated(df11.summary$id), ]
  #
  df11.overall2way52_65_11_u_mean<-mean(df11.summary$utility_mean)
  df11.overall2way52_65_11_c_mean<-mean(df11.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df11.survival<-df11.summary %>% filter(state%in%4)
  df11.sens2way52_65_11_u_mean<-mean(df11.survival$utility_mean)
  df11.sens2way52_65_11_c_mean<-mean(df11.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 12 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df12.sim<-df12.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df12.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df12.sim$day>0, 340,0))+4650+(ifelse(df12.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*11)+(340*11)+(724*11))   # assumping death at beggining of day and no extra costs 
  
  df12.sim<-df12.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df12.summary<- df12.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df12.overall<- df12.summary[!duplicated(df12.summary$id), ]
  #
  df12.overall2way52_65_12_u_mean<-mean(df12.summary$utility_mean)
  df12.overall2way52_65_12_c_mean<-mean(df12.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df12.survival<-df12.summary %>% filter(state%in%4)
  df12.sens2way52_65_12_u_mean<-mean(df12.survival$utility_mean)
  df12.sens2way52_65_12_c_mean<-mean(df12.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 13 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df13.sim<-df13.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df13.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df13.sim$day>0, 340,0))+4650+(ifelse(df13.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*12)+(340*12)+(724*12)) # assumping death at beggining of day and no extra costs 
  
  df13.sim<-df13.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df13.summary<- df13.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df13.overall<- df13.summary[!duplicated(df13.summary$id), ]
  #
  df13.overall2way52_65_13_u_mean<-mean(df13.summary$utility_mean)
  df13.overall2way52_65_13_c_mean<-mean(df13.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df13.survival<-df13.summary %>% filter(state%in%4)
  df13.sens2way52_65_13_u_mean<-mean(df13.survival$utility_mean)
  df13.sens2way52_65_13_c_mean<-mean(df13.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 14 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df14.sim<-df14.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df14.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df14.sim$day>0, 340,0))+4650+(ifelse(df14.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*13)+(340*13)+(724*13))  # assumping death at beggining of day and no extra costs 
  
  df14.sim<-df14.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df14.summary<- df14.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df14.overall<- df14.summary[!duplicated(df14.summary$id), ]
  #
  df14.overall2way52_65_14_u_mean<-mean(df14.summary$utility_mean)
  df14.overall2way52_65_14_c_mean<-mean(df14.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df14.survival<-df14.summary %>% filter(state%in%4)
  df14.sens2way52_65_14_u_mean<-mean(df14.survival$utility_mean)
  df14.sens2way52_65_14_c_mean<-mean(df14.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 15 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df15.sim<-df15.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df15.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df15.sim$day>0, 340,0))+4650+(ifelse(df15.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*14)+(340*14)+(724*14))  # assumping death at beggining of day and no extra costs 
  
  df15.sim<-df15.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df15.summary<- df15.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df15.overall<- df15.summary[!duplicated(df15.summary$id), ]
  #
  df15.overall2way52_65_15_u_mean<-mean(df15.summary$utility_mean)
  df15.overall2way52_65_15_c_mean<-mean(df15.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df15.survival<-df15.summary %>% filter(state%in%4)
  df15.sens2way52_65_15_u_mean<-mean(df15.survival$utility_mean)
  df15.sens2way52_65_15_c_mean<-mean(df15.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 16 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df16.sim<-df16.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df16.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df16.sim$day>0, 340,0))+4650+(ifelse(df16.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*15)+(340*15)+(724*15))  # assumping death at beggining of day and no extra costs 
  
  df16.sim<-df16.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df16.summary<- df16.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df16.overall<- df16.summary[!duplicated(df16.summary$id), ]
  #
  df16.overall2way52_65_16_u_mean<-mean(df16.summary$utility_mean)
  df16.overall2way52_65_16_c_mean<-mean(df16.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df16.survival<-df16.summary %>% filter(state%in%4)
  df16.sens2way52_65_16_u_mean<-mean(df16.survival$utility_mean)
  df16.sens2way52_65_16_c_mean<-mean(df16.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 17 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df17.sim<-df17.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df17.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df17.sim$day>0, 340,0))+4650+(ifelse(df17.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*16)+(340*16)+(724*16))  # assumping death at beggining of day and no extra costs 
  
  df17.sim<-df17.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df17.summary<- df17.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df17.overall<- df17.summary[!duplicated(df17.summary$id), ]
  #
  df17.overall2way52_65_17_u_mean<-mean(df17.summary$utility_mean)
  df17.overall2way52_65_17_c_mean<-mean(df17.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df17.survival<-df17.summary %>% filter(state%in%4)
  df17.sens2way52_65_17_u_mean<-mean(df17.survival$utility_mean)
  df17.sens2way52_65_17_c_mean<-mean(df17.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 18 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df18.sim<-df18.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df18.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df18.sim$day>0, 340,0))+4650+(ifelse(df18.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*17)+(340*17)+(724*17))  # assumping death at beggining of day and no extra costs 
  
  df18.sim<-df18.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df18.summary<- df18.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df18.overall<- df18.summary[!duplicated(df18.summary$id), ]
  #
  df18.overall2way52_65_18_u_mean<-mean(df18.summary$utility_mean)
  df18.overall2way52_65_18_c_mean<-mean(df18.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df18.survival<-df18.summary %>% filter(state%in%4)
  df18.sens2way52_65_18_u_mean<-mean(df18.survival$utility_mean)
  df18.sens2way52_65_18_c_mean<-mean(df18.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 19 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df19.sim<-df19.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df19.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df19.sim$day>0, 340,0))+4650+(ifelse(df19.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*18)+(340*18)+(724*18))  # assumping death at beggining of day and no extra costs 
  
  df19.sim<-df19.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df19.summary<- df19.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df19.overall<- df19.summary[!duplicated(df19.summary$id), ]
  #
  df19.overall2way52_65_19_u_mean<-mean(df19.summary$utility_mean)
  df19.overall2way52_65_19_c_mean<-mean(df19.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df19.survival<-df19.summary %>% filter(state%in%4)
  df19.sens2way52_65_19_u_mean<-mean(df19.survival$utility_mean)
  df19.sens2way52_65_19_c_mean<-mean(df19.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 20 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df20.sim<-df20.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df20.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df20.sim$day>0, 340,0))+4650+(ifelse(df20.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*19)+(340*19)+(724*19))  # assumping death at beggining of day and no extra costs 
  
  df20.sim<-df20.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df20.summary<- df20.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df20.overall<- df20.summary[!duplicated(df20.summary$id), ]
  #
  df20.overall2way52_65_20_u_mean<-mean(df20.summary$utility_mean)
  df20.overall2way52_65_20_c_mean<-mean(df20.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df20.survival<-df20.summary %>% filter(state%in%4)
  df20.sens2way52_65_20_u_mean<-mean(df20.survival$utility_mean)
  df20.sens2way52_65_20_c_mean<-mean(df20.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 21 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df21.sim<-df21.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df21.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df21.sim$day>0, 340,0))+4650+(ifelse(df21.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*20)+(340*20)+(724*20))  # assumping death at beggining of day and no extra costs 
  
  df21.sim<-df21.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df21.summary<- df21.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df21.overall<- df21.summary[!duplicated(df21.summary$id), ]
  #
  df21.overall2way52_65_21_u_mean<-mean(df21.summary$utility_mean)
  df21.overall2way52_65_21_c_mean<-mean(df21.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df21.survival<-df21.summary %>% filter(state%in%4)
  df21.sens2way52_65_21_u_mean<-mean(df21.survival$utility_mean)
  df21.sens2way52_65_21_c_mean<-mean(df21.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 22 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df22.sim<-df22.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df22.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df22.sim$day>0, 340,0))+4650+(ifelse(df22.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*21)+(340*21)+(724*21)) # assumping death at beggining of day and no extra costs 
  
  df22.sim<-df22.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df22.summary<- df22.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df22.overall<- df22.summary[!duplicated(df22.summary$id), ]
  #
  df22.overall2way52_65_22_u_mean<-mean(df22.summary$utility_mean)
  df22.overall2way52_65_22_c_mean<-mean(df22.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df22.survival<-df22.summary %>% filter(state%in%4)
  df22.sens2way52_65_22_u_mean<-mean(df22.survival$utility_mean)
  df22.sens2way52_65_22_c_mean<-mean(df22.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 23 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df23.sim<-df23.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df23.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df23.sim$day>0, 340,0))+4650+(ifelse(df23.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*22)+(340*22)+(724*22)) # assumping death at beggining of day and no extra costs 
  
  df23.sim<-df23.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df23.summary<- df23.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df23.overall<- df23.summary[!duplicated(df23.summary$id), ]
  #
  df23.overall2way52_65_23_u_mean<-mean(df23.summary$utility_mean)
  df23.overall2way52_65_23_c_mean<-mean(df23.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df23.survival<-df23.summary %>% filter(state%in%4)
  df23.sens2way52_65_23_u_mean<-mean(df23.survival$utility_mean)
  df23.sens2way52_65_23_c_mean<-mean(df23.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 24 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df24.sim<-df24.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df24.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df24.sim$day>0, 340,0))+4650+(ifelse(df24.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*23)+(340*23)+(724*23))  # assumping death at beggining of day and no extra costs 
  
  df24.sim<-df24.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df24.summary<- df24.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df24.overall<- df24.summary[!duplicated(df24.summary$id), ]
  #
  df24.overall2way52_65_24_u_mean<-mean(df24.summary$utility_mean)
  df24.overall2way52_65_24_c_mean<-mean(df24.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df24.survival<-df24.summary %>% filter(state%in%4)
  df24.sens2way52_65_24_u_mean<-mean(df24.survival$utility_mean)
  df24.sens2way52_65_24_c_mean<-mean(df24.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 25 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df25.sim<-df25.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df25.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df25.sim$day>0, 340,0))+4650+(ifelse(df25.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*24)+(340*24)+(724*24)) # assumping death at beggining of day and no extra costs 
  
  df25.sim<-df25.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df25.summary<- df25.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df25.overall<- df25.summary[!duplicated(df25.summary$id), ]
  #
  df25.overall2way52_65_25_u_mean<-mean(df25.summary$utility_mean)
  df25.overall2way52_65_25_c_mean<-mean(df25.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df25.survival<-df24.summary %>% filter(state%in%4)
  df25.sens2way52_65_25_u_mean<-mean(df25.survival$utility_mean)
  df25.sens2way52_65_25_c_mean<-mean(df25.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 26 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df26.sim<-df26.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df26.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df26.sim$day>0, 340,0))+4650+(ifelse(df26.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*25)+(340*25)+(724*25))  # assumping death at beggining of day and no extra costs 
  
  df26.sim<-df26.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df26.summary<- df26.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df26.overall<- df26.summary[!duplicated(df26.summary$id), ]
  #
  df26.overall2way52_65_26_u_mean<-mean(df26.summary$utility_mean)
  df26.overall2way52_65_26_c_mean<-mean(df26.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df26.survival<-df26.summary %>% filter(state%in%4)
  df26.sens2way52_65_26_u_mean<-mean(df26.survival$utility_mean)
  df26.sens2way52_65_26_c_mean<-mean(df26.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 27 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df27.sim<-df27.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df27.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df27.sim$day>0, 340,0))+4650+(ifelse(df27.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*26)+(340*26)+(724*26))  # assumping death at beggining of day and no extra costs 
  
  df27.sim<-df27.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df27.summary<- df27.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df27.overall<- df27.summary[!duplicated(df27.summary$id), ]
  #
  df27.overall2way52_65_27_u_mean<-mean(df27.summary$utility_mean)
  df27.overall2way52_65_27_c_mean<-mean(df27.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df27.survival<-df27.summary %>% filter(state%in%4)
  df27.sens2way52_65_27_u_mean<-mean(df27.survival$utility_mean)
  df27.sens2way52_65_27_c_mean<-mean(df27.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 28 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df28.sim<-df28.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df28.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df28.sim$day>0, 340,0))+4650+(ifelse(df28.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*27)+(340*27)+(724*27))  # assumping death at beggining of day and no extra costs 
  
  df28.sim<-df28.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df28.summary<- df28.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df28.overall<- df28.summary[!duplicated(df28.summary$id), ]
  #
  df28.overall2way52_65_28_u_mean<-mean(df28.summary$utility_mean)
  df28.overall2way52_65_28_c_mean<-mean(df28.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df28.survival<-df28.summary %>% filter(state%in%4)
  df28.sens2way52_65_28_u_mean<-mean(df28.survival$utility_mean)
  df28.sens2way52_65_28_c_mean<-mean(df28.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 29 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df29.sim<-df29.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df29.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df29.sim$day>0, 340,0))+4650+(ifelse(df29.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*28)+(340*28)+(724*28))  # assumping death at beggining of day and no extra costs 
  
  df29.sim<-df29.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df29.summary<- df29.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean=(sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df29.overall<- df29.summary[!duplicated(df29.summary$id), ]
  #
  df29.overall2way52_65_29_u_mean<-mean(df29.summary$utility_mean)
  df29.overall2way52_65_29_c_mean<-mean(df29.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df29.survival<-df29.summary %>% filter(state%in%4)
  df29.sens2way52_65_29_u_mean<-mean(df29.survival$utility_mean)
  df29.sens2way52_65_29_c_mean<-mean(df29.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 30 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df30.sim<-df30.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df30.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df30.sim$day>0, 340,0))+4650+(ifelse(df30.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*29)+(340*29)+(724*29))  # assumping death at beggining of day and no extra costs 
  
  df30.sim<-df30.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df30.summary<- df30.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df30.overall<- df30.summary[!duplicated(df30.summary$id), ]
  #
  df30.overall2way52_65_30_u_mean<-mean(df30.summary$utility_mean)
  df30.overall2way52_65_30_c_mean<-mean(df30.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df30.survival<-df30.summary %>% filter(state%in%4)
  df30.sens2way52_65_30_u_mean<-mean(df30.survival$utility_mean)
  df30.sens2way52_65_30_c_mean<-mean(df30.survival$costs_sum)
  
  df1.sens2way52_65_1<-df1.summary
  df2.sens2way52_65_2<-df2.summary
  df3.sens2way52_65_3<-df3.summary
  df4.sens2way52_65_4<-df4.summary
  df5.sens2way52_65_5<-df5.summary
  df6.sens2way52_65_6<-df6.summary
  df7.sens2way52_65_7<-df7.summary
  df8.sens2way52_65_8<-df8.summary
  df9.sens2way52_65_9<-df9.summary
  df10.sens2way52_65_10<-df10.summary
  df11.sens2way52_65_11<-df11.summary
  df12.sens2way52_65_12<-df12.summary
  df13.sens2way52_65_13<-df13.summary
  df14.sens2way52_65_14<-df14.summary
  df15.sens2way52_65_15<-df15.summary
  df16.sens2way52_65_16<-df16.summary
  df17.sens2way52_65_17<-df17.summary
  df18.sens2way52_65_18<-df18.summary
  df19.sens2way52_65_19<-df19.summary
  df20.sens2way52_65_20<-df20.summary
  df21.sens2way52_65_21<-df21.summary
  df22.sens2way52_65_22<-df22.summary
  df23.sens2way52_65_23<-df23.summary
  df24.sens2way52_65_24<-df24.summary
  df25.sens2way52_65_25<-df25.summary
  df26.sens2way52_65_26<-df26.summary
  df27.sens2way52_65_27<-df27.summary
  df28.sens2way52_65_28<-df28.summary
  df29.sens2way52_65_29<-df29.summary
  df30.sens2way52_65_30<-df30.summary
  
  
  
  rm(df1.sim)
  rm(df2.sim)
  rm(df3.sim)
  rm(df4.sim)
  rm(df5.sim)
  rm(df6.sim)
  rm(df7.sim)
  rm(df8.sim)
  rm(df9.sim)
  rm(df10.sim)
  rm(df11.sim)
  rm(df12.sim)
  rm(df13.sim)
  rm(df14.sim)
  rm(df15.sim)
  rm(df16.sim)
  rm(df17.sim)
  rm(df18.sim)
  rm(df19.sim)
  rm(df20.sim)
  rm(df21.sim)
  rm(df22.sim)
  rm(df23.sim)
  rm(df24.sim)
  rm(df25.sim)
  rm(df26.sim)
  rm(df27.sim)
  rm(df28.sim)
  rm(df29.sim)
  rm(df30.sim)
}

# 2 way sensitivity cmo 28 52 case results ------------------------------------------------------------
sens2way52_65_30.overall_c_vect<-c()
for (i in 1:30){
  sens2way52_65_30.overall_c_vect[i]<-get(paste("df", i, ".overallcmo90_c_mean",sep = ""))
}

sens2way52_65_30.overall_u_vect<-c()
for (i in 1:30){
  sens2way52_65_30.overall_u_vect[i]<-get(paste("df", i, ".overallcmo90_u_mean",sep = ""))
}

sens2way52_65_30.survival_c_vect<-c()
for (i in 1:30){
  sens2way52_65_30.survival_c_vect[i]<-get(paste("df", i, ".sens2way52_65_",i,"_c_mean",sep = "")) 
}

sens2way52_65_30.survival_u_vect<-c()
for (i in 1:30){
  sens2way52_65_30.survival_u_vect[i]<-get(paste("df", i, ".sens2way52_65_",i,"_u_mean",sep = ""))
}

sens2way52_65_30.ce_results<- matrix(c(sens2way52_65_30.overall_c_vect,sens2way52_65_30.overall_u_vect,sens2way52_65_30.survival_c_vect,sens2way52_65_30.survival_u_vect), nrow=30, byrow=FALSE)
colnames(sens2way52_65_30.ce_results) <- c("overall_c","overall_u","survival_c","survival_u")



# markov objects  2way 76 - death 77

{
  mo1.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77), name="MarkovChain Q1")
  
  mo2.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_2), name="MarkovChain Q1")
  mo3.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_3), name="MarkovChain Q1")
  mo4.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_4), name="MarkovChain Q1")
  mo5.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_5), name="MarkovChain Q1")
  mo6.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_6), name="MarkovChain Q1")
  mo7.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_7), name="MarkovChain Q1")
  mo8.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_8), name="MarkovChain Q1")
  mo9.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_9), name="MarkovChain Q1")
  mo10.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_10), name="MarkovChain Q1")
  mo11.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_11), name="MarkovChain Q1")
  mo12.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_12), name="MarkovChain Q1")
  mo13.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_13), name="MarkovChain Q1")
  mo14.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_14), name="MarkovChain Q1")
  mo15.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_15), name="MarkovChain Q1")
  mo16.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_16), name="MarkovChain Q1")
  mo17.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_17), name="MarkovChain Q1")
  mo18.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_18), name="MarkovChain Q1")
  mo19.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_19), name="MarkovChain Q1")
  mo20.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_20), name="MarkovChain Q1")
  mo21.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_21), name="MarkovChain Q1")
  mo22.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_22), name="MarkovChain Q1")
  mo23.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_23), name="MarkovChain Q1")
  mo24.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_24), name="MarkovChain Q1")
  mo25.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_25), name="MarkovChain Q1")
  mo26.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_26), name="MarkovChain Q1")
  mo27.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_27), name="MarkovChain Q1")
  mo28.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_28), name="MarkovChain Q1")
  mo29.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_29), name="MarkovChain Q1")
  mo30.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way76_77_30), name="MarkovChain Q1")
}




# SENSITIVITY ANALYSIS first order monte carlo simulations cmo 76 death 77 --------- 

B <- 100
N <- 30

{
  sim1.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo1.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim2.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo2.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim3.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo3.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim4.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo4.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim5.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo5.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim6.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo6.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim7.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo7.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim8.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo8.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim9.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo9.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim10.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo10.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim11.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo11.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim12.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo12.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim13.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo13.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim14.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo14.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim15.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo15.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim16.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo16.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim17.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo17.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim18.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo18.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim19.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo19.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim20.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo20.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim21.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo21.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim22.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo22.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim23.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo23.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim24.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo24.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim25.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo25.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim26.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo26.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim27.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo27.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim28.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo28.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim29.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo29.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim30.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo30.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  

}
# 1 non-agressive
# 2 aggressive
# 3 cmo
# 4 discharged
# 5 death


# Convert simulations into data frames 
{
  df1.sim<- as.data.frame(sim1.msm)
  df1.sim<-df1.sim %>% gather(key = "id", value = "state")
  df1.sim<-df1.sim %>% mutate(col1=streak_run(state, k=1000))
  df1.sim<-df1.sim %>% filter(!(state=="4" & col1!=1))
  df1.sim<-df1.sim %>% filter(!(state=="5" & col1!=1))
  
  df2.sim<- as.data.frame(sim2.msm)
  df2.sim<-df2.sim %>% gather(key = "id", value = "state")
  df2.sim<-df2.sim %>% mutate(col1=streak_run(state, k=1000))
  df2.sim<-df2.sim %>% filter(!(state=="4" & col1!=1))
  df2.sim<-df2.sim %>% filter(!(state=="5" & col1!=1))
  
  df3.sim<- as.data.frame(sim3.msm)
  df3.sim<-df3.sim %>% gather(key = "id", value = "state")
  df3.sim<-df3.sim %>% mutate(col1=streak_run(state, k=1000))
  df3.sim<-df3.sim %>% filter(!(state=="4" & col1!=1))
  df3.sim<-df3.sim %>% filter(!(state=="5" & col1!=1))
  
  df4.sim<- as.data.frame(sim4.msm)
  df4.sim<-df4.sim %>% gather(key = "id", value = "state")
  df4.sim<-df4.sim %>% mutate(col1=streak_run(state, k=1000))
  df4.sim<-df4.sim %>% filter(!(state=="4" & col1!=1))
  df4.sim<-df4.sim %>% filter(!(state=="5" & col1!=1))
  
  df5.sim<- as.data.frame(sim5.msm)
  df5.sim<-df5.sim %>% gather(key = "id", value = "state")
  df5.sim<-df5.sim %>% mutate(col1=streak_run(state, k=1000))
  df5.sim<-df5.sim %>% filter(!(state=="4" & col1!=1))
  df5.sim<-df5.sim %>% filter(!(state=="5" & col1!=1))
  
  df6.sim<- as.data.frame(sim6.msm)
  df6.sim<-df6.sim %>% gather(key = "id", value = "state")
  df6.sim<-df6.sim %>% mutate(col1=streak_run(state, k=1000))
  df6.sim<-df6.sim %>% filter(!(state=="4" & col1!=1))
  df6.sim<-df6.sim %>% filter(!(state=="5" & col1!=1))
  
  df7.sim<- as.data.frame(sim7.msm)
  df7.sim<-df7.sim %>% gather(key = "id", value = "state")
  df7.sim<-df7.sim %>% mutate(col1=streak_run(state, k=1000))
  df7.sim<-df7.sim %>% filter(!(state=="4" & col1!=1))
  df7.sim<-df7.sim %>% filter(!(state=="5" & col1!=1))
  
  df8.sim<- as.data.frame(sim8.msm)
  df8.sim<-df8.sim %>% gather(key = "id", value = "state")
  df8.sim<-df8.sim %>% mutate(col1=streak_run(state, k=1000))
  df8.sim<-df8.sim %>% filter(!(state=="4" & col1!=1))
  df8.sim<-df8.sim %>% filter(!(state=="5" & col1!=1))
  
  df9.sim<- as.data.frame(sim9.msm)
  df9.sim<-df9.sim %>% gather(key = "id", value = "state")
  df9.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df9.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df9.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df10.sim<- as.data.frame(sim10.msm)
  df10.sim<-df9.sim %>% gather(key = "id", value = "state")
  df10.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df10.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df10.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df11.sim<- as.data.frame(sim11.msm)
  df11.sim<-df11.sim %>% gather(key = "id", value = "state")
  df11.sim<-df11.sim %>% mutate(col1=streak_run(state, k=1000))
  df11.sim<-df11.sim %>% filter(!(state=="4" & col1!=1))
  df11.sim<-df11.sim %>% filter(!(state=="5" & col1!=1))
  
  df12.sim<- as.data.frame(sim12.msm)
  df12.sim<-df12.sim %>% gather(key = "id", value = "state")
  df12.sim<-df12.sim %>% mutate(col1=streak_run(state, k=1000))
  df12.sim<-df12.sim %>% filter(!(state=="4" & col1!=1))
  df12.sim<-df12.sim %>% filter(!(state=="5" & col1!=1))
  
  df13.sim<- as.data.frame(sim13.msm)
  df13.sim<-df13.sim %>% gather(key = "id", value = "state")
  df13.sim<-df13.sim %>% mutate(col1=streak_run(state, k=1000))
  df13.sim<-df13.sim %>% filter(!(state=="4" & col1!=1))
  df13.sim<-df13.sim %>% filter(!(state=="5" & col1!=1))
  
  df14.sim<- as.data.frame(sim14.msm)
  df14.sim<-df14.sim %>% gather(key = "id", value = "state")
  df14.sim<-df14.sim %>% mutate(col1=streak_run(state, k=1000))
  df14.sim<-df14.sim %>% filter(!(state=="4" & col1!=1))
  df14.sim<-df14.sim %>% filter(!(state=="5" & col1!=1))
  
  df15.sim<- as.data.frame(sim15.msm)
  df15.sim<-df15.sim %>% gather(key = "id", value = "state")
  df15.sim<-df15.sim %>% mutate(col1=streak_run(state, k=1000))
  df15.sim<-df15.sim %>% filter(!(state=="4" & col1!=1))
  df15.sim<-df15.sim %>% filter(!(state=="5" & col1!=1))
  
  df16.sim<- as.data.frame(sim16.msm)
  df16.sim<-df16.sim %>% gather(key = "id", value = "state")
  df16.sim<-df16.sim %>% mutate(col1=streak_run(state, k=1000))
  df16.sim<-df16.sim %>% filter(!(state=="4" & col1!=1))
  df16.sim<-df16.sim %>% filter(!(state=="5" & col1!=1))
  
  df17.sim<- as.data.frame(sim17.msm)
  df17.sim<-df17.sim %>% gather(key = "id", value = "state")
  df17.sim<-df17.sim %>% mutate(col1=streak_run(state, k=1000))
  df17.sim<-df17.sim %>% filter(!(state=="4" & col1!=1))
  df17.sim<-df17.sim %>% filter(!(state=="5" & col1!=1))
  
  df18.sim<- as.data.frame(sim18.msm)
  df18.sim<-df18.sim %>% gather(key = "id", value = "state")
  df18.sim<-df18.sim %>% mutate(col1=streak_run(state, k=1000))
  df18.sim<-df18.sim %>% filter(!(state=="4" & col1!=1))
  df18.sim<-df18.sim %>% filter(!(state=="5" & col1!=1))
  
  df19.sim<- as.data.frame(sim19.msm)
  df19.sim<-df19.sim %>% gather(key = "id", value = "state")
  df19.sim<-df19.sim %>% mutate(col1=streak_run(state, k=1000))
  df19.sim<-df19.sim %>% filter(!(state=="4" & col1!=1))
  df19.sim<-df19.sim %>% filter(!(state=="5" & col1!=1))
  
  df20.sim<- as.data.frame(sim20.msm)
  df20.sim<-df9.sim %>% gather(key = "id", value = "state")
  df20.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df20.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df20.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df21.sim<- as.data.frame(sim21.msm)
  df21.sim<-df21.sim %>% gather(key = "id", value = "state")
  df21.sim<-df21.sim %>% mutate(col1=streak_run(state, k=1000))
  df21.sim<-df21.sim %>% filter(!(state=="4" & col1!=1))
  df21.sim<-df21.sim %>% filter(!(state=="5" & col1!=1))
  
  df22.sim<- as.data.frame(sim22.msm)
  df22.sim<-df22.sim %>% gather(key = "id", value = "state")
  df22.sim<-df22.sim %>% mutate(col1=streak_run(state, k=1000))
  df22.sim<-df22.sim %>% filter(!(state=="4" & col1!=1))
  df22.sim<-df22.sim %>% filter(!(state=="5" & col1!=1))
  
  df23.sim<- as.data.frame(sim23.msm)
  df23.sim<-df23.sim %>% gather(key = "id", value = "state")
  df23.sim<-df23.sim %>% mutate(col1=streak_run(state, k=1000))
  df23.sim<-df23.sim %>% filter(!(state=="4" & col1!=1))
  df23.sim<-df23.sim %>% filter(!(state=="5" & col1!=1))
  
  df24.sim<- as.data.frame(sim24.msm)
  df24.sim<-df24.sim %>% gather(key = "id", value = "state")
  df24.sim<-df24.sim %>% mutate(col1=streak_run(state, k=1000))
  df24.sim<-df24.sim %>% filter(!(state=="4" & col1!=1))
  df24.sim<-df24.sim %>% filter(!(state=="5" & col1!=1))
  
  df25.sim<- as.data.frame(sim25.msm)
  df25.sim<-df25.sim %>% gather(key = "id", value = "state")
  df25.sim<-df25.sim %>% mutate(col1=streak_run(state, k=1000))
  df25.sim<-df25.sim %>% filter(!(state=="4" & col1!=1))
  df25.sim<-df25.sim %>% filter(!(state=="5" & col1!=1))
  
  df26.sim<- as.data.frame(sim26.msm)
  df26.sim<-df26.sim %>% gather(key = "id", value = "state")
  df26.sim<-df26.sim %>% mutate(col1=streak_run(state, k=1000))
  df26.sim<-df26.sim %>% filter(!(state=="4" & col1!=1))
  df26.sim<-df26.sim %>% filter(!(state=="5" & col1!=1))
  
  df27.sim<- as.data.frame(sim27.msm)
  df27.sim<-df27.sim %>% gather(key = "id", value = "state")
  df27.sim<-df27.sim %>% mutate(col1=streak_run(state, k=1000))
  df27.sim<-df27.sim %>% filter(!(state=="4" & col1!=1))
  df27.sim<-df27.sim %>% filter(!(state=="5" & col1!=1))
  
  df28.sim<- as.data.frame(sim28.msm)
  df28.sim<-df28.sim %>% gather(key = "id", value = "state")
  df28.sim<-df28.sim %>% mutate(col1=streak_run(state, k=1000))
  df28.sim<-df28.sim %>% filter(!(state=="4" & col1!=1))
  df28.sim<-df28.sim %>% filter(!(state=="5" & col1!=1))
  
  df29.sim<- as.data.frame(sim29.msm)
  df29.sim<-df29.sim %>% gather(key = "id", value = "state")
  df29.sim<-df29.sim %>% mutate(col1=streak_run(state, k=1000))
  df29.sim<-df29.sim %>% filter(!(state=="4" & col1!=1))
  df29.sim<-df29.sim %>% filter(!(state=="5" & col1!=1))
  
  df30.sim<- as.data.frame(sim30.msm)
  df30.sim<-df30.sim %>% gather(key = "id", value = "state")
  df30.sim<-df30.sim %>% mutate(col1=streak_run(state, k=1000))
  df30.sim<-df30.sim %>% filter(!(state=="4" & col1!=1))
  df30.sim<-df30.sim %>% filter(!(state=="5" & col1!=1))
  
  rm(sim1.msm) 
  rm(sim2.msm)
  rm(sim3.msm)
  rm(sim4.msm)
  rm(sim5.msm)
  rm(sim6.msm)
  rm(sim7.msm)
  rm(sim8.msm)
  rm(sim9.msm)
  rm(sim10.msm)
  rm(sim11.msm)
  rm(sim12.msm)
  rm(sim13.msm)
  rm(sim14.msm)
  rm(sim15.msm)
  rm(sim16.msm)
  rm(sim17.msm)
  rm(sim18.msm)
  rm(sim19.msm)
  rm(sim20.msm)
  rm(sim21.msm)
  rm(sim22.msm)
  rm(sim23.msm)
  rm(sim24.msm)
  rm(sim25.msm)
  rm(sim26.msm)
  rm(sim27.msm)
  rm(sim28.msm)
  rm(sim29.msm)
  rm(sim30.msm)
}

# SENSITIVITY ANALYSIS Utilities and costs cmo 76 deaths 77- ------------------------
{
  # Utility value for being in ICU:	0.66, 0.39-0.93,	Beta,	(Cost effectiveness of antimicrobial catheters in the intensive care unit: addressing uncertainty in the decision)
  # Utility value for highly invasive care:	0.55,	0.39-0.71,	(Beta,	Comparison of Health-Related Quality of Life Preferences Between Physicians and Cirrhotic Patients: Implications for Cost–Utility Analysesin Chronic Liver Disease)
  # Utility value for paliative care:	0.28,	0.23-0.35,	Beta,	(Ultrasound Elastography for Fibrosis Surveillance Is Cos tEffective in Patients with Chronic Hepatitis C Virus in the UK)
  
  # Daily costs:
  # ICU Room & Board	 $3,805.00 	-	-
  # Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
  # Mechanical ventilation first day 	 $928.99 	-	-
  # Mechanical ventilation	 $775.00 	-	-
  # Comfort care	 $988.00 	-	-
  # Initial hospital physican care	 $662.00 	-	-
  # Subsequent hospital physican care	 $340.00 	-	-
  # Hospital discharge day	 $353.00 	-	-
  # Critical care phsycian care	 $724.00 	-	-
  
  # sources: BIDMC - Patient Financial Services & HMFP - Finance
  
  # utilities
  u_nhic<-0.66
  u_hic<-0.55
  u_cmo<-0.28
  u_discharge<-1
  u_died<-1
  
  # 1 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df1.sim<-df1.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df1.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df1.sim$day>0, 340,0))+4650+(ifelse(df1.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00 # assumping death at beggining of day and no extra costs 
  
  df1.sim<-df1.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df1.summary<- df1.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= mean(utility),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df1.overall<- df1.summary[!duplicated(df1.summary$id), ]
  #
  df1.overall2way76_77_1_u_mean<-mean(df1.summary$utility_mean)
  df1.overall2way76_77_1_c_mean<-mean(df1.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df1.survival<-df1.summary %>% filter(state%in%4)
  df1.sens2way76_77_1_u_mean<-mean(df1.survival$utility_mean)
  df1.sens2way76_77_1_c_mean<-mean(df1.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 2 day hic ////////////////////////////////////////////////////////////////////
  
  # Daily costs:
  # ICU Room & Board	 $3,805.00 	-	-
  # Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
  # Mechanical ventilation first day 	 $928.99 	-	-
  # Mechanical ventilation	 $775.00 	-	-
  # Comfort care	 $988.00 	-	-
  # Initial hospital physican care	 $662.00 	-	-
  # Subsequent hospital physican care	 $340.00 	-	-
  # Hospital discharge day	 $353.00 	-	-
  # Critical care phsycian care	 $724.00 	-	-
  
  # Create flags for sequential days  
  df2.sim<-df2.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  
  # Create costs
  c_nhic<-3805+662+(ifelse(df2.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df2.sim$day>0, 340,0))+4650+(ifelse(df2.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*1)+(340*1)+(724*1)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC 
  
  df2.sim<-df2.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df2.summary<- df2.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))), # adding extra days of utility given HIC
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df2.overall<- df2.summary[!duplicated(df2.summary$id), ]
  #
  df2.overall2way76_77_2_u_mean<-mean(df2.summary$utility_mean)
  df2.overall2way76_77_2_c_mean<-mean(df2.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df2.survival<-df2.summary %>% filter(state%in%4)
  df2.sens2way76_77_2_u_mean<-mean(df2.survival$utility_mean)
  df2.sens2way76_77_2_c_mean<-mean(df2.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 3 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df3.sim<-df3.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df3.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df3.sim$day>0, 340,0))+4650+(ifelse(df3.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*2)+(340*2)+(724*2))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC
  
  df3.sim<-df3.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df3.summary<- df3.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df3.overall<- df3.summary[!duplicated(df3.summary$id), ]
  #
  df3.overall2way76_77_3_u_mean<-mean(df3.summary$utility_mean)
  df3.overall2way76_77_3_c_mean<-mean(df3.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df3.survival<-df3.summary %>% filter(state%in%4)
  df3.sens2way76_77_3_u_mean<-mean(df3.survival$utility_mean)
  df3.sens2way76_77_3_c_mean<-mean(df3.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 4 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df4.sim<-df4.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df4.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df4.sim$day>0, 340,0))+4650+(ifelse(df4.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*3)+(340*3)+(724*3))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 
  
  df4.sim<-df4.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df4.summary<- df4.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df4.overall<- df4.summary[!duplicated(df4.summary$id), ]
  #
  df4.overall2way76_77_4_u_mean<-mean(df4.summary$utility_mean)
  df4.overall2way76_77_4_c_mean<-mean(df4.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df4.survival<-df4.summary %>% filter(state%in%4)
  df4.sens2way76_77_4_u_mean<-mean(df4.survival$utility_mean)
  df4.sens2way76_77_4_c_mean<-mean(df4.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 5 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df5.sim<-df5.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df5.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df5.sim$day>0, 340,0))+4650+(ifelse(df5.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*4)+(340*4)+(724*4))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df5.sim<-df5.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df5.summary<- df5.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df5.overall<- df5.summary[!duplicated(df5.summary$id), ]
  #
  df5.overall2way76_77_5_u_mean<-mean(df5.summary$utility_mean)
  df5.overall2way76_77_5_c_mean<-mean(df5.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df5.survival<-df5.summary %>% filter(state%in%4)
  df5.sens2way76_77_5_u_mean<-mean(df5.survival$utility_mean)
  df5.sens2way76_77_5_c_mean<-mean(df5.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 6 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df6.sim<-df6.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df6.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df6.sim$day>0, 340,0))+4650+(ifelse(df6.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*5)+(340*5)+(724*5))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df6.sim<-df6.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df6.summary<- df6.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df6.overall<- df6.summary[!duplicated(df6.summary$id), ]
  #
  df6.overall2way76_77_6_u_mean<-mean(df6.summary$utility_mean)
  df6.overall2way76_77_6_c_mean<-mean(df6.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df6.survival<-df6.summary %>% filter(state%in%4)
  df6.sens2way76_77_6_u_mean<-mean(df6.survival$utility_mean)
  df6.sens2way76_77_6_c_mean<-mean(df6.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 7 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df7.sim<-df7.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df7.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df7.sim$day>0, 340,0))+4650+(ifelse(df7.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*6)+(340*6)+(724*6))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df7.sim<-df7.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df7.summary<- df7.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df7.overall<- df7.summary[!duplicated(df7.summary$id), ]
  #
  df7.overall2way76_77_7_u_mean<-mean(df7.summary$utility_mean)
  df7.overall2way76_77_7_c_mean<-mean(df7.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df7.survival<-df7.summary %>% filter(state%in%4)
  df7.sens2way76_77_7_u_mean<-mean(df7.survival$utility_mean)
  df7.sens2way76_77_7_c_mean<-mean(df7.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 8 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df8.sim<-df8.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df8.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df8.sim$day>0, 340,0))+4650+(ifelse(df8.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*7)+(340*7)+(724*7)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df8.sim<-df8.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df8.summary<- df8.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df8.overall<- df8.summary[!duplicated(df8.summary$id), ]
  #
  df8.overall2way76_77_8_u_mean<-mean(df8.summary$utility_mean)
  df8.overall2way76_77_8_c_mean<-mean(df8.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df8.survival<-df8.summary %>% filter(state%in%4)
  df8.sens2way76_77_8_u_mean<-mean(df8.survival$utility_mean)
  df8.sens2way76_77_8_c_mean<-mean(df8.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 9 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df9.sim<-df9.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df9.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df9.sim$day>0, 340,0))+4650+(ifelse(df9.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*8)+(340*8)+(724*8))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df9.sim<-df9.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df9.summary<- df9.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df9.overall<- df9.summary[!duplicated(df9.summary$id), ]
  #
  df9.overall2way76_77_9_u_mean<-mean(df9.summary$utility_mean)
  df9.overall2way76_77_9_c_mean<-mean(df9.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df9.survival<-df9.summary %>% filter(state%in%4)
  df9.sens2way76_77_9_u_mean<-mean(df9.survival$utility_mean)
  df9.sens2way76_77_9_c_mean<-mean(df9.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 10 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df10.sim<-df10.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df10.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df10.sim$day>0, 340,0))+4650+(ifelse(df10.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*9)+(340*9)+(724*9))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 
  
  df10.sim<-df10.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df10.summary<- df10.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df10.overall<- df10.summary[!duplicated(df10.summary$id), ]
  #
  df10.overall2way76_77_10_u_mean<-mean(df10.summary$utility_mean)
  df10.overall2way76_77_10_c_mean<-mean(df10.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df10.survival<-df10.summary %>% filter(state%in%4)
  df10.sens2way76_77_10_u_mean<-mean(df10.survival$utility_mean)
  df10.sens2way76_77_10_c_mean<-mean(df10.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 11 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df11.sim<-df11.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df11.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df11.sim$day>0, 340,0))+4650+(ifelse(df11.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*10)+(340*10)+(724*10))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df11.sim<-df11.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df11.summary<- df11.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df11.overall<- df11.summary[!duplicated(df11.summary$id), ]
  #
  df11.overall2way76_77_11_u_mean<-mean(df11.summary$utility_mean)
  df11.overall2way76_77_11_c_mean<-mean(df11.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df11.survival<-df11.summary %>% filter(state%in%4)
  df11.sens2way76_77_11_u_mean<-mean(df11.survival$utility_mean)
  df11.sens2way76_77_11_c_mean<-mean(df11.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 12 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df12.sim<-df12.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df12.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df12.sim$day>0, 340,0))+4650+(ifelse(df12.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*11)+(340*11)+(724*11))   # assumping death at beggining of day and no extra costs 
  
  df12.sim<-df12.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df12.summary<- df12.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df12.overall<- df12.summary[!duplicated(df12.summary$id), ]
  #
  df12.overall2way76_77_12_u_mean<-mean(df12.summary$utility_mean)
  df12.overall2way76_77_12_c_mean<-mean(df12.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df12.survival<-df12.summary %>% filter(state%in%4)
  df12.sens2way76_77_12_u_mean<-mean(df12.survival$utility_mean)
  df12.sens2way76_77_12_c_mean<-mean(df12.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 13 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df13.sim<-df13.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df13.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df13.sim$day>0, 340,0))+4650+(ifelse(df13.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*12)+(340*12)+(724*12)) # assumping death at beggining of day and no extra costs 
  
  df13.sim<-df13.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df13.summary<- df13.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df13.overall<- df13.summary[!duplicated(df13.summary$id), ]
  #
  df13.overall2way76_77_13_u_mean<-mean(df13.summary$utility_mean)
  df13.overall2way76_77_13_c_mean<-mean(df13.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df13.survival<-df13.summary %>% filter(state%in%4)
  df13.sens2way76_77_13_u_mean<-mean(df13.survival$utility_mean)
  df13.sens2way76_77_13_c_mean<-mean(df13.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 14 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df14.sim<-df14.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df14.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df14.sim$day>0, 340,0))+4650+(ifelse(df14.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*13)+(340*13)+(724*13))  # assumping death at beggining of day and no extra costs 
  
  df14.sim<-df14.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df14.summary<- df14.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df14.overall<- df14.summary[!duplicated(df14.summary$id), ]
  #
  df14.overall2way76_77_14_u_mean<-mean(df14.summary$utility_mean)
  df14.overall2way76_77_14_c_mean<-mean(df14.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df14.survival<-df14.summary %>% filter(state%in%4)
  df14.sens2way76_77_14_u_mean<-mean(df14.survival$utility_mean)
  df14.sens2way76_77_14_c_mean<-mean(df14.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 15 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df15.sim<-df15.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df15.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df15.sim$day>0, 340,0))+4650+(ifelse(df15.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*14)+(340*14)+(724*14))  # assumping death at beggining of day and no extra costs 
  
  df15.sim<-df15.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df15.summary<- df15.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df15.overall<- df15.summary[!duplicated(df15.summary$id), ]
  #
  df15.overall2way76_77_15_u_mean<-mean(df15.summary$utility_mean)
  df15.overall2way76_77_15_c_mean<-mean(df15.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df15.survival<-df15.summary %>% filter(state%in%4)
  df15.sens2way76_77_15_u_mean<-mean(df15.survival$utility_mean)
  df15.sens2way76_77_15_c_mean<-mean(df15.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 16 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df16.sim<-df16.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df16.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df16.sim$day>0, 340,0))+4650+(ifelse(df16.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*15)+(340*15)+(724*15))  # assumping death at beggining of day and no extra costs 
  
  df16.sim<-df16.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df16.summary<- df16.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df16.overall<- df16.summary[!duplicated(df16.summary$id), ]
  #
  df16.overall2way76_77_16_u_mean<-mean(df16.summary$utility_mean)
  df16.overall2way76_77_16_c_mean<-mean(df16.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df16.survival<-df16.summary %>% filter(state%in%4)
  df16.sens2way76_77_16_u_mean<-mean(df16.survival$utility_mean)
  df16.sens2way76_77_16_c_mean<-mean(df16.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 17 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df17.sim<-df17.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df17.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df17.sim$day>0, 340,0))+4650+(ifelse(df17.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*16)+(340*16)+(724*16))  # assumping death at beggining of day and no extra costs 
  
  df17.sim<-df17.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df17.summary<- df17.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df17.overall<- df17.summary[!duplicated(df17.summary$id), ]
  #
  df17.overall2way76_77_17_u_mean<-mean(df17.summary$utility_mean)
  df17.overall2way76_77_17_c_mean<-mean(df17.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df17.survival<-df17.summary %>% filter(state%in%4)
  df17.sens2way76_77_17_u_mean<-mean(df17.survival$utility_mean)
  df17.sens2way76_77_17_c_mean<-mean(df17.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 18 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df18.sim<-df18.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df18.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df18.sim$day>0, 340,0))+4650+(ifelse(df18.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*17)+(340*17)+(724*17))  # assumping death at beggining of day and no extra costs 
  
  df18.sim<-df18.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df18.summary<- df18.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df18.overall<- df18.summary[!duplicated(df18.summary$id), ]
  #
  df18.overall2way76_77_18_u_mean<-mean(df18.summary$utility_mean)
  df18.overall2way76_77_18_c_mean<-mean(df18.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df18.survival<-df18.summary %>% filter(state%in%4)
  df18.sens2way76_77_18_u_mean<-mean(df18.survival$utility_mean)
  df18.sens2way76_77_18_c_mean<-mean(df18.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 19 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df19.sim<-df19.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df19.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df19.sim$day>0, 340,0))+4650+(ifelse(df19.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*18)+(340*18)+(724*18))  # assumping death at beggining of day and no extra costs 
  
  df19.sim<-df19.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df19.summary<- df19.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df19.overall<- df19.summary[!duplicated(df19.summary$id), ]
  #
  df19.overall2way76_77_19_u_mean<-mean(df19.summary$utility_mean)
  df19.overall2way76_77_19_c_mean<-mean(df19.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df19.survival<-df19.summary %>% filter(state%in%4)
  df19.sens2way76_77_19_u_mean<-mean(df19.survival$utility_mean)
  df19.sens2way76_77_19_c_mean<-mean(df19.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 20 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df20.sim<-df20.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df20.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df20.sim$day>0, 340,0))+4650+(ifelse(df20.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*19)+(340*19)+(724*19))  # assumping death at beggining of day and no extra costs 
  
  df20.sim<-df20.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df20.summary<- df20.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df20.overall<- df20.summary[!duplicated(df20.summary$id), ]
  #
  df20.overall2way76_77_20_u_mean<-mean(df20.summary$utility_mean)
  df20.overall2way76_77_20_c_mean<-mean(df20.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df20.survival<-df20.summary %>% filter(state%in%4)
  df20.sens2way76_77_20_u_mean<-mean(df20.survival$utility_mean)
  df20.sens2way76_77_20_c_mean<-mean(df20.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 21 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df21.sim<-df21.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df21.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df21.sim$day>0, 340,0))+4650+(ifelse(df21.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*20)+(340*20)+(724*20))  # assumping death at beggining of day and no extra costs 
  
  df21.sim<-df21.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df21.summary<- df21.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df21.overall<- df21.summary[!duplicated(df21.summary$id), ]
  #
  df21.overall2way76_77_21_u_mean<-mean(df21.summary$utility_mean)
  df21.overall2way76_77_21_c_mean<-mean(df21.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df21.survival<-df21.summary %>% filter(state%in%4)
  df21.sens2way76_77_21_u_mean<-mean(df21.survival$utility_mean)
  df21.sens2way76_77_21_c_mean<-mean(df21.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 22 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df22.sim<-df22.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df22.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df22.sim$day>0, 340,0))+4650+(ifelse(df22.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*21)+(340*21)+(724*21)) # assumping death at beggining of day and no extra costs 
  
  df22.sim<-df22.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df22.summary<- df22.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df22.overall<- df22.summary[!duplicated(df22.summary$id), ]
  #
  df22.overall2way76_77_22_u_mean<-mean(df22.summary$utility_mean)
  df22.overall2way76_77_22_c_mean<-mean(df22.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df22.survival<-df22.summary %>% filter(state%in%4)
  df22.sens2way76_77_22_u_mean<-mean(df22.survival$utility_mean)
  df22.sens2way76_77_22_c_mean<-mean(df22.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 23 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df23.sim<-df23.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df23.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df23.sim$day>0, 340,0))+4650+(ifelse(df23.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*22)+(340*22)+(724*22)) # assumping death at beggining of day and no extra costs 
  
  df23.sim<-df23.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df23.summary<- df23.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df23.overall<- df23.summary[!duplicated(df23.summary$id), ]
  #
  df23.overall2way76_77_23_u_mean<-mean(df23.summary$utility_mean)
  df23.overall2way76_77_23_c_mean<-mean(df23.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df23.survival<-df23.summary %>% filter(state%in%4)
  df23.sens2way76_77_23_u_mean<-mean(df23.survival$utility_mean)
  df23.sens2way76_77_23_c_mean<-mean(df23.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 24 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df24.sim<-df24.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df24.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df24.sim$day>0, 340,0))+4650+(ifelse(df24.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*23)+(340*23)+(724*23))  # assumping death at beggining of day and no extra costs 
  
  df24.sim<-df24.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df24.summary<- df24.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df24.overall<- df24.summary[!duplicated(df24.summary$id), ]
  #
  df24.overall2way76_77_24_u_mean<-mean(df24.summary$utility_mean)
  df24.overall2way76_77_24_c_mean<-mean(df24.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df24.survival<-df24.summary %>% filter(state%in%4)
  df24.sens2way76_77_24_u_mean<-mean(df24.survival$utility_mean)
  df24.sens2way76_77_24_c_mean<-mean(df24.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 25 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df25.sim<-df25.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df25.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df25.sim$day>0, 340,0))+4650+(ifelse(df25.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*24)+(340*24)+(724*24)) # assumping death at beggining of day and no extra costs 
  
  df25.sim<-df25.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df25.summary<- df25.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df25.overall<- df25.summary[!duplicated(df25.summary$id), ]
  #
  df25.overall2way76_77_25_u_mean<-mean(df25.summary$utility_mean)
  df25.overall2way76_77_25_c_mean<-mean(df25.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df25.survival<-df24.summary %>% filter(state%in%4)
  df25.sens2way76_77_25_u_mean<-mean(df25.survival$utility_mean)
  df25.sens2way76_77_25_c_mean<-mean(df25.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 26 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df26.sim<-df26.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df26.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df26.sim$day>0, 340,0))+4650+(ifelse(df26.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*25)+(340*25)+(724*25))  # assumping death at beggining of day and no extra costs 
  
  df26.sim<-df26.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df26.summary<- df26.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df26.overall<- df26.summary[!duplicated(df26.summary$id), ]
  #
  df26.overall2way76_77_26_u_mean<-mean(df26.summary$utility_mean)
  df26.overall2way76_77_26_c_mean<-mean(df26.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df26.survival<-df26.summary %>% filter(state%in%4)
  df26.sens2way76_77_26_u_mean<-mean(df26.survival$utility_mean)
  df26.sens2way76_77_26_c_mean<-mean(df26.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 27 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df27.sim<-df27.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df27.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df27.sim$day>0, 340,0))+4650+(ifelse(df27.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*26)+(340*26)+(724*26))  # assumping death at beggining of day and no extra costs 
  
  df27.sim<-df27.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df27.summary<- df27.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df27.overall<- df27.summary[!duplicated(df27.summary$id), ]
  #
  df27.overall2way76_77_27_u_mean<-mean(df27.summary$utility_mean)
  df27.overall2way76_77_27_c_mean<-mean(df27.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df27.survival<-df27.summary %>% filter(state%in%4)
  df27.sens2way76_77_27_u_mean<-mean(df27.survival$utility_mean)
  df27.sens2way76_77_27_c_mean<-mean(df27.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 28 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df28.sim<-df28.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df28.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df28.sim$day>0, 340,0))+4650+(ifelse(df28.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*27)+(340*27)+(724*27))  # assumping death at beggining of day and no extra costs 
  
  df28.sim<-df28.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df28.summary<- df28.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df28.overall<- df28.summary[!duplicated(df28.summary$id), ]
  #
  df28.overall2way76_77_28_u_mean<-mean(df28.summary$utility_mean)
  df28.overall2way76_77_28_c_mean<-mean(df28.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df28.survival<-df28.summary %>% filter(state%in%4)
  df28.sens2way76_77_28_u_mean<-mean(df28.survival$utility_mean)
  df28.sens2way76_77_28_c_mean<-mean(df28.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 29 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df29.sim<-df29.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df29.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df29.sim$day>0, 340,0))+4650+(ifelse(df29.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*28)+(340*28)+(724*28))  # assumping death at beggining of day and no extra costs 
  
  df29.sim<-df29.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df29.summary<- df29.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean=(sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df29.overall<- df29.summary[!duplicated(df29.summary$id), ]
  #
  df29.overall2way76_77_29_u_mean<-mean(df29.summary$utility_mean)
  df29.overall2way76_77_29_c_mean<-mean(df29.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df29.survival<-df29.summary %>% filter(state%in%4)
  df29.sens2way76_77_29_u_mean<-mean(df29.survival$utility_mean)
  df29.sens2way76_77_29_c_mean<-mean(df29.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 30 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df30.sim<-df30.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df30.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df30.sim$day>0, 340,0))+4650+(ifelse(df30.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*29)+(340*29)+(724*29))  # assumping death at beggining of day and no extra costs 
  
  df30.sim<-df30.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df30.summary<- df30.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df30.overall<- df30.summary[!duplicated(df30.summary$id), ]
  #
  df30.overall2way76_77_30_u_mean<-mean(df30.summary$utility_mean)
  df30.overall2way76_77_30_c_mean<-mean(df30.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df30.survival<-df30.summary %>% filter(state%in%4)
  df30.sens2way76_77_30_u_mean<-mean(df30.survival$utility_mean)
  df30.sens2way76_77_30_c_mean<-mean(df30.survival$costs_sum)
  
  df1.sens2way76_77_1<-df1.summary
  df2.sens2way76_77_2<-df2.summary
  df3.sens2way76_77_3<-df3.summary
  df4.sens2way76_77_4<-df4.summary
  df5.sens2way76_77_5<-df5.summary
  df6.sens2way76_77_6<-df6.summary
  df7.sens2way76_77_7<-df7.summary
  df8.sens2way76_77_8<-df8.summary
  df9.sens2way76_77_9<-df9.summary
  df10.sens2way76_77_10<-df10.summary
  df11.sens2way76_77_11<-df11.summary
  df12.sens2way76_77_12<-df12.summary
  df13.sens2way76_77_13<-df13.summary
  df14.sens2way76_77_14<-df14.summary
  df15.sens2way76_77_15<-df15.summary
  df16.sens2way76_77_16<-df16.summary
  df17.sens2way76_77_17<-df17.summary
  df18.sens2way76_77_18<-df18.summary
  df19.sens2way76_77_19<-df19.summary
  df20.sens2way76_77_20<-df20.summary
  df21.sens2way76_77_21<-df21.summary
  df22.sens2way76_77_22<-df22.summary
  df23.sens2way76_77_23<-df23.summary
  df24.sens2way76_77_24<-df24.summary
  df25.sens2way76_77_25<-df25.summary
  df26.sens2way76_77_26<-df26.summary
  df27.sens2way76_77_27<-df27.summary
  df28.sens2way76_77_28<-df28.summary
  df29.sens2way76_77_29<-df29.summary
  df30.sens2way76_77_30<-df30.summary
  
  
  
  rm(df1.sim)
  rm(df2.sim)
  rm(df3.sim)
  rm(df4.sim)
  rm(df5.sim)
  rm(df6.sim)
  rm(df7.sim)
  rm(df8.sim)
  rm(df9.sim)
  rm(df10.sim)
  rm(df11.sim)
  rm(df12.sim)
  rm(df13.sim)
  rm(df14.sim)
  rm(df15.sim)
  rm(df16.sim)
  rm(df17.sim)
  rm(df18.sim)
  rm(df19.sim)
  rm(df20.sim)
  rm(df21.sim)
  rm(df22.sim)
  rm(df23.sim)
  rm(df24.sim)
  rm(df25.sim)
  rm(df26.sim)
  rm(df27.sim)
  rm(df28.sim)
  rm(df29.sim)
  rm(df30.sim)
}

# 2way results 76-77-----
sens2way76_77_30.overall_c_vect<-c()
for (i in 1:30){
  sens2way76_77_30.overall_c_vect[i]<-get(paste("df", i, ".overall2way76_77_", i, "_c_mean",sep = "")) 
}

sens2way76_77_30.overall_u_vect<-c()
for (i in 1:30){
  sens2way76_77_30.overall_u_vect[i]<-get(paste("df", i, ".overall2way76_77_", i, "_u_mean",sep = ""))
}

sens2way76_77_30.survival_c_vect<-c()
for (i in 1:30){
  sens2way76_77_30.survival_c_vect[i]<-get(paste("df", i, ".sens2way76_77_",i,"_c_mean",sep = "")) 
}

sens2way76_77_30.survival_u_vect<-c()
for (i in 1:30){
  sens2way76_77_30.survival_u_vect[i]<-get(paste("df", i, ".sens2way76_77_",i,"_u_mean",sep = ""))
}

sens2way76_77_30.ce_results<- matrix(c(sens2way76_77_30.overall_c_vect,sens2way76_77_30.overall_u_vect,sens2way76_77_30.survival_c_vect,sens2way76_77_30.survival_u_vect), nrow=30, byrow=FALSE)
colnames(sens2way76_77_30.ce_results) <- c("overall_c","overall_u","survival_c","survival_u")





# markov objects  2way 90 - death 90----
{
  mo1.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90), name="MarkovChain Q1")
  
  
  mo2.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_2), name="MarkovChain Q1")
  
  mo3.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_3), name="MarkovChain Q1")
  mo4.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_4), name="MarkovChain Q1")
  mo5.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_5), name="MarkovChain Q1")
  mo6.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_6), name="MarkovChain Q1")
  mo7.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_7), name="MarkovChain Q1")
  mo8.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_8), name="MarkovChain Q1")
  mo9.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_9), name="MarkovChain Q1")
  mo10.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_10), name="MarkovChain Q1")
  mo11.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_11), name="MarkovChain Q1")
  mo12.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_12), name="MarkovChain Q1")
  mo13.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_13), name="MarkovChain Q1")
  mo14.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_14), name="MarkovChain Q1")
  mo15.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_15), name="MarkovChain Q1")
  mo16.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_16), name="MarkovChain Q1")
  mo17.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_17), name="MarkovChain Q1")
  mo18.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_18), name="MarkovChain Q1")
  mo19.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_19), name="MarkovChain Q1")
  mo20.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_20), name="MarkovChain Q1")
  mo21.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_21), name="MarkovChain Q1")
  mo22.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_22), name="MarkovChain Q1")
  mo23.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_23), name="MarkovChain Q1")
  mo24.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_24), name="MarkovChain Q1")
  mo25.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_25), name="MarkovChain Q1")
  mo26.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_26), name="MarkovChain Q1")
  mo27.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_27), name="MarkovChain Q1")
  mo28.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_28), name="MarkovChain Q1")
  mo29.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_29), name="MarkovChain Q1")
  mo30.msm<-new("markovchain",transitionMatrix=(sens_matrix.2way90_90_30), name="MarkovChain Q1")
}

# SENSITIVITY ANALYSIS first order monte carlo simulations cmo 90 death 90 --------- 

B <- 100
N <- 30

{
  sim1.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo1.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim2.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo2.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim3.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo3.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim4.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo4.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim5.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo5.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim6.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo6.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim7.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo7.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim8.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo8.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim9.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo9.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim10.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo10.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim11.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo11.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim12.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo12.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim13.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo13.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim14.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo14.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim15.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo15.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim16.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo16.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim17.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo17.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim18.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo18.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim19.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo19.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim20.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo20.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim21.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo21.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim22.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo22.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim23.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo23.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim24.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo24.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim25.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo25.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim26.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo26.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim27.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo27.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim28.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo28.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim29.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo29.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
  sim30.msm <- replicate(B, {
    X <- rmarkovchain(n = N, 
                      object = mo30.msm, 
                      t0 = "2",
                      include.t0 = TRUE,
                      parallel = TRUE,
                      num.cores=3)})
  
 
}
# 1 non-agressive
# 2 aggressive
# 3 cmo
# 4 discharged
# 5 death

# Convert simulations into data frames 
{
  df1.sim<- as.data.frame(sim1.msm)
  df1.sim<-df1.sim %>% gather(key = "id", value = "state")
  df1.sim<-df1.sim %>% mutate(col1=streak_run(state, k=1000))
  df1.sim<-df1.sim %>% filter(!(state=="4" & col1!=1))
  df1.sim<-df1.sim %>% filter(!(state=="5" & col1!=1))
  
  df2.sim<- as.data.frame(sim2.msm)
  df2.sim<-df2.sim %>% gather(key = "id", value = "state")
  df2.sim<-df2.sim %>% mutate(col1=streak_run(state, k=1000))
  df2.sim<-df2.sim %>% filter(!(state=="4" & col1!=1))
  df2.sim<-df2.sim %>% filter(!(state=="5" & col1!=1))
  
  df3.sim<- as.data.frame(sim3.msm)
  df3.sim<-df3.sim %>% gather(key = "id", value = "state")
  df3.sim<-df3.sim %>% mutate(col1=streak_run(state, k=1000))
  df3.sim<-df3.sim %>% filter(!(state=="4" & col1!=1))
  df3.sim<-df3.sim %>% filter(!(state=="5" & col1!=1))
  
  df4.sim<- as.data.frame(sim4.msm)
  df4.sim<-df4.sim %>% gather(key = "id", value = "state")
  df4.sim<-df4.sim %>% mutate(col1=streak_run(state, k=1000))
  df4.sim<-df4.sim %>% filter(!(state=="4" & col1!=1))
  df4.sim<-df4.sim %>% filter(!(state=="5" & col1!=1))
  
  df5.sim<- as.data.frame(sim5.msm)
  df5.sim<-df5.sim %>% gather(key = "id", value = "state")
  df5.sim<-df5.sim %>% mutate(col1=streak_run(state, k=1000))
  df5.sim<-df5.sim %>% filter(!(state=="4" & col1!=1))
  df5.sim<-df5.sim %>% filter(!(state=="5" & col1!=1))
  
  df6.sim<- as.data.frame(sim6.msm)
  df6.sim<-df6.sim %>% gather(key = "id", value = "state")
  df6.sim<-df6.sim %>% mutate(col1=streak_run(state, k=1000))
  df6.sim<-df6.sim %>% filter(!(state=="4" & col1!=1))
  df6.sim<-df6.sim %>% filter(!(state=="5" & col1!=1))
  
  df7.sim<- as.data.frame(sim7.msm)
  df7.sim<-df7.sim %>% gather(key = "id", value = "state")
  df7.sim<-df7.sim %>% mutate(col1=streak_run(state, k=1000))
  df7.sim<-df7.sim %>% filter(!(state=="4" & col1!=1))
  df7.sim<-df7.sim %>% filter(!(state=="5" & col1!=1))
  
  df8.sim<- as.data.frame(sim8.msm)
  df8.sim<-df8.sim %>% gather(key = "id", value = "state")
  df8.sim<-df8.sim %>% mutate(col1=streak_run(state, k=1000))
  df8.sim<-df8.sim %>% filter(!(state=="4" & col1!=1))
  df8.sim<-df8.sim %>% filter(!(state=="5" & col1!=1))
  
  df9.sim<- as.data.frame(sim9.msm)
  df9.sim<-df9.sim %>% gather(key = "id", value = "state")
  df9.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df9.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df9.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df10.sim<- as.data.frame(sim10.msm)
  df10.sim<-df9.sim %>% gather(key = "id", value = "state")
  df10.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df10.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df10.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df11.sim<- as.data.frame(sim11.msm)
  df11.sim<-df11.sim %>% gather(key = "id", value = "state")
  df11.sim<-df11.sim %>% mutate(col1=streak_run(state, k=1000))
  df11.sim<-df11.sim %>% filter(!(state=="4" & col1!=1))
  df11.sim<-df11.sim %>% filter(!(state=="5" & col1!=1))
  
  df12.sim<- as.data.frame(sim12.msm)
  df12.sim<-df12.sim %>% gather(key = "id", value = "state")
  df12.sim<-df12.sim %>% mutate(col1=streak_run(state, k=1000))
  df12.sim<-df12.sim %>% filter(!(state=="4" & col1!=1))
  df12.sim<-df12.sim %>% filter(!(state=="5" & col1!=1))
  
  df13.sim<- as.data.frame(sim13.msm)
  df13.sim<-df13.sim %>% gather(key = "id", value = "state")
  df13.sim<-df13.sim %>% mutate(col1=streak_run(state, k=1000))
  df13.sim<-df13.sim %>% filter(!(state=="4" & col1!=1))
  df13.sim<-df13.sim %>% filter(!(state=="5" & col1!=1))
  
  df14.sim<- as.data.frame(sim14.msm)
  df14.sim<-df14.sim %>% gather(key = "id", value = "state")
  df14.sim<-df14.sim %>% mutate(col1=streak_run(state, k=1000))
  df14.sim<-df14.sim %>% filter(!(state=="4" & col1!=1))
  df14.sim<-df14.sim %>% filter(!(state=="5" & col1!=1))
  
  df15.sim<- as.data.frame(sim15.msm)
  df15.sim<-df15.sim %>% gather(key = "id", value = "state")
  df15.sim<-df15.sim %>% mutate(col1=streak_run(state, k=1000))
  df15.sim<-df15.sim %>% filter(!(state=="4" & col1!=1))
  df15.sim<-df15.sim %>% filter(!(state=="5" & col1!=1))
  
  df16.sim<- as.data.frame(sim16.msm)
  df16.sim<-df16.sim %>% gather(key = "id", value = "state")
  df16.sim<-df16.sim %>% mutate(col1=streak_run(state, k=1000))
  df16.sim<-df16.sim %>% filter(!(state=="4" & col1!=1))
  df16.sim<-df16.sim %>% filter(!(state=="5" & col1!=1))
  
  df17.sim<- as.data.frame(sim17.msm)
  df17.sim<-df17.sim %>% gather(key = "id", value = "state")
  df17.sim<-df17.sim %>% mutate(col1=streak_run(state, k=1000))
  df17.sim<-df17.sim %>% filter(!(state=="4" & col1!=1))
  df17.sim<-df17.sim %>% filter(!(state=="5" & col1!=1))
  
  df18.sim<- as.data.frame(sim18.msm)
  df18.sim<-df18.sim %>% gather(key = "id", value = "state")
  df18.sim<-df18.sim %>% mutate(col1=streak_run(state, k=1000))
  df18.sim<-df18.sim %>% filter(!(state=="4" & col1!=1))
  df18.sim<-df18.sim %>% filter(!(state=="5" & col1!=1))
  
  df19.sim<- as.data.frame(sim19.msm)
  df19.sim<-df19.sim %>% gather(key = "id", value = "state")
  df19.sim<-df19.sim %>% mutate(col1=streak_run(state, k=1000))
  df19.sim<-df19.sim %>% filter(!(state=="4" & col1!=1))
  df19.sim<-df19.sim %>% filter(!(state=="5" & col1!=1))
  
  df20.sim<- as.data.frame(sim20.msm)
  df20.sim<-df9.sim %>% gather(key = "id", value = "state")
  df20.sim<-df9.sim %>% mutate(col1=streak_run(state, k=1000))
  df20.sim<-df9.sim %>% filter(!(state=="4" & col1!=1))
  df20.sim<-df9.sim %>% filter(!(state=="5" & col1!=1))
  
  df21.sim<- as.data.frame(sim21.msm)
  df21.sim<-df21.sim %>% gather(key = "id", value = "state")
  df21.sim<-df21.sim %>% mutate(col1=streak_run(state, k=1000))
  df21.sim<-df21.sim %>% filter(!(state=="4" & col1!=1))
  df21.sim<-df21.sim %>% filter(!(state=="5" & col1!=1))
  
  df22.sim<- as.data.frame(sim22.msm)
  df22.sim<-df22.sim %>% gather(key = "id", value = "state")
  df22.sim<-df22.sim %>% mutate(col1=streak_run(state, k=1000))
  df22.sim<-df22.sim %>% filter(!(state=="4" & col1!=1))
  df22.sim<-df22.sim %>% filter(!(state=="5" & col1!=1))
  
  df23.sim<- as.data.frame(sim23.msm)
  df23.sim<-df23.sim %>% gather(key = "id", value = "state")
  df23.sim<-df23.sim %>% mutate(col1=streak_run(state, k=1000))
  df23.sim<-df23.sim %>% filter(!(state=="4" & col1!=1))
  df23.sim<-df23.sim %>% filter(!(state=="5" & col1!=1))
  
  df24.sim<- as.data.frame(sim24.msm)
  df24.sim<-df24.sim %>% gather(key = "id", value = "state")
  df24.sim<-df24.sim %>% mutate(col1=streak_run(state, k=1000))
  df24.sim<-df24.sim %>% filter(!(state=="4" & col1!=1))
  df24.sim<-df24.sim %>% filter(!(state=="5" & col1!=1))
  
  df25.sim<- as.data.frame(sim25.msm)
  df25.sim<-df25.sim %>% gather(key = "id", value = "state")
  df25.sim<-df25.sim %>% mutate(col1=streak_run(state, k=1000))
  df25.sim<-df25.sim %>% filter(!(state=="4" & col1!=1))
  df25.sim<-df25.sim %>% filter(!(state=="5" & col1!=1))
  
  df26.sim<- as.data.frame(sim26.msm)
  df26.sim<-df26.sim %>% gather(key = "id", value = "state")
  df26.sim<-df26.sim %>% mutate(col1=streak_run(state, k=1000))
  df26.sim<-df26.sim %>% filter(!(state=="4" & col1!=1))
  df26.sim<-df26.sim %>% filter(!(state=="5" & col1!=1))
  
  df27.sim<- as.data.frame(sim27.msm)
  df27.sim<-df27.sim %>% gather(key = "id", value = "state")
  df27.sim<-df27.sim %>% mutate(col1=streak_run(state, k=1000))
  df27.sim<-df27.sim %>% filter(!(state=="4" & col1!=1))
  df27.sim<-df27.sim %>% filter(!(state=="5" & col1!=1))
  
  df28.sim<- as.data.frame(sim28.msm)
  df28.sim<-df28.sim %>% gather(key = "id", value = "state")
  df28.sim<-df28.sim %>% mutate(col1=streak_run(state, k=1000))
  df28.sim<-df28.sim %>% filter(!(state=="4" & col1!=1))
  df28.sim<-df28.sim %>% filter(!(state=="5" & col1!=1))
  
  df29.sim<- as.data.frame(sim29.msm)
  df29.sim<-df29.sim %>% gather(key = "id", value = "state")
  df29.sim<-df29.sim %>% mutate(col1=streak_run(state, k=1000))
  df29.sim<-df29.sim %>% filter(!(state=="4" & col1!=1))
  df29.sim<-df29.sim %>% filter(!(state=="5" & col1!=1))
  
  df30.sim<- as.data.frame(sim30.msm)
  df30.sim<-df30.sim %>% gather(key = "id", value = "state")
  df30.sim<-df30.sim %>% mutate(col1=streak_run(state, k=1000))
  df30.sim<-df30.sim %>% filter(!(state=="4" & col1!=1))
  df30.sim<-df30.sim %>% filter(!(state=="5" & col1!=1))
  
  rm(sim1.msm) 
  rm(sim2.msm)
  rm(sim3.msm)
  rm(sim4.msm)
  rm(sim5.msm)
  rm(sim6.msm)
  rm(sim7.msm)
  rm(sim8.msm)
  rm(sim9.msm)
  rm(sim10.msm)
  rm(sim11.msm)
  rm(sim12.msm)
  rm(sim13.msm)
  rm(sim14.msm)
  rm(sim15.msm)
  rm(sim16.msm)
  rm(sim17.msm)
  rm(sim18.msm)
  rm(sim19.msm)
  rm(sim20.msm)
  rm(sim21.msm)
  rm(sim22.msm)
  rm(sim23.msm)
  rm(sim24.msm)
  rm(sim25.msm)
  rm(sim26.msm)
  rm(sim27.msm)
  rm(sim28.msm)
  rm(sim29.msm)
  rm(sim30.msm)
}



# SENSITIVITY ANALYSIS Utilities and costs cmo 90 deaths 90- ------------------------
{
  # Utility value for being in ICU:	0.66, 0.39-0.93,	Beta,	(Cost effectiveness of antimicrobial catheters in the intensive care unit: addressing uncertainty in the decision)
  # Utility value for highly invasive care:	0.55,	0.39-0.71,	(Beta,	Comparison of Health-Related Quality of Life Preferences Between Physicians and Cirrhotic Patients: Implications for Cost–Utility Analysesin Chronic Liver Disease)
  # Utility value for paliative care:	0.28,	0.23-0.35,	Beta,	(Ultrasound Elastography for Fibrosis Surveillance Is Cos tEffective in Patients with Chronic Hepatitis C Virus in the UK)
  
  # Daily costs:
  # ICU Room & Board	 $3,805.00 	-	-
  # Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
  # Mechanical ventilation first day 	 $928.99 	-	-
  # Mechanical ventilation	 $775.00 	-	-
  # Comfort care	 $988.00 	-	-
  # Initial hospital physican care	 $662.00 	-	-
  # Subsequent hospital physican care	 $340.00 	-	-
  # Hospital discharge day	 $353.00 	-	-
  # Critical care phsycian care	 $724.00 	-	-
  
  # sources: BIDMC - Patient Financial Services & HMFP - Finance
  
  # utilities
  u_nhic<-0.66
  u_hic<-0.55
  u_cmo<-0.28
  u_discharge<-1
  u_died<-1
  
  # 1 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df1.sim<-df1.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df1.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df1.sim$day>0, 340,0))+4650+(ifelse(df1.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00 # assumping death at beggining of day and no extra costs 
  
  df1.sim<-df1.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df1.summary<- df1.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= mean(utility),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df1.overall<- df1.summary[!duplicated(df1.summary$id), ]
  #
  df1.overall2way90_90_1_u_mean<-mean(df1.summary$utility_mean)
  df1.overall2way90_90_1_c_mean<-mean(df1.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df1.survival<-df1.summary %>% filter(state%in%4)
  df1.sens2way90_90_1_u_mean<-mean(df1.survival$utility_mean)
  df1.sens2way90_90_1_c_mean<-mean(df1.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 2 day hic ////////////////////////////////////////////////////////////////////
  
  # Daily costs:
  # ICU Room & Board	 $3,805.00 	-	-
  # Dialysis	 $4,650.00 	 $400.00 	 $8,900.00 
  # Mechanical ventilation first day 	 $928.99 	-	-
  # Mechanical ventilation	 $775.00 	-	-
  # Comfort care	 $988.00 	-	-
  # Initial hospital physican care	 $662.00 	-	-
  # Subsequent hospital physican care	 $340.00 	-	-
  # Hospital discharge day	 $353.00 	-	-
  # Critical care phsycian care	 $724.00 	-	-
  
  # Create flags for sequential days  
  df2.sim<-df2.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  
  # Create costs
  c_nhic<-3805+662+(ifelse(df2.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df2.sim$day>0, 340,0))+4650+(ifelse(df2.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*1)+(340*1)+(724*1)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC 
  
  df2.sim<-df2.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df2.summary<- df2.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))), # adding extra days of utility given HIC
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df2.overall<- df2.summary[!duplicated(df2.summary$id), ]
  #
  df2.overall2way90_90_2_u_mean<-mean(df2.summary$utility_mean)
  df2.overall2way90_90_2_c_mean<-mean(df2.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df2.survival<-df2.summary %>% filter(state%in%4)
  df2.sens2way90_90_2_u_mean<-mean(df2.survival$utility_mean)
  df2.sens2way90_90_2_c_mean<-mean(df2.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 3 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df3.sim<-df3.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df3.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df3.sim$day>0, 340,0))+4650+(ifelse(df3.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*2)+(340*2)+(724*2))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC
  
  df3.sim<-df3.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df3.summary<- df3.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df3.overall<- df3.summary[!duplicated(df3.summary$id), ]
  #
  df3.overall2way90_90_3_u_mean<-mean(df3.summary$utility_mean)
  df3.overall2way90_90_3_c_mean<-mean(df3.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df3.survival<-df3.summary %>% filter(state%in%4)
  df3.sens2way90_90_3_u_mean<-mean(df3.survival$utility_mean)
  df3.sens2way90_90_3_c_mean<-mean(df3.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 4 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df4.sim<-df4.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df4.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df4.sim$day>0, 340,0))+4650+(ifelse(df4.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*3)+(340*3)+(724*3))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 
  
  df4.sim<-df4.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df4.summary<- df4.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df4.overall<- df4.summary[!duplicated(df4.summary$id), ]
  #
  df4.overall2way90_90_4_u_mean<-mean(df4.summary$utility_mean)
  df4.overall2way90_90_4_c_mean<-mean(df4.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df4.survival<-df4.summary %>% filter(state%in%4)
  df4.sens2way90_90_4_u_mean<-mean(df4.survival$utility_mean)
  df4.sens2way90_90_4_c_mean<-mean(df4.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 5 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df5.sim<-df5.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df5.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df5.sim$day>0, 340,0))+4650+(ifelse(df5.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*4)+(340*4)+(724*4))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df5.sim<-df5.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df5.summary<- df5.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df5.overall<- df5.summary[!duplicated(df5.summary$id), ]
  #
  df5.overall2way90_90_5_u_mean<-mean(df5.summary$utility_mean)
  df5.overall2way90_90_5_c_mean<-mean(df5.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df5.survival<-df5.summary %>% filter(state%in%4)
  df5.sens2way90_90_5_u_mean<-mean(df5.survival$utility_mean)
  df5.sens2way90_90_5_c_mean<-mean(df5.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 6 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df6.sim<-df6.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df6.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df6.sim$day>0, 340,0))+4650+(ifelse(df6.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*5)+(340*5)+(724*5))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df6.sim<-df6.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df6.summary<- df6.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df6.overall<- df6.summary[!duplicated(df6.summary$id), ]
  #
  df6.overall2way90_90_6_u_mean<-mean(df6.summary$utility_mean)
  df6.overall2way90_90_6_c_mean<-mean(df6.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df6.survival<-df6.summary %>% filter(state%in%4)
  df6.sens2way90_90_6_u_mean<-mean(df6.survival$utility_mean)
  df6.sens2way90_90_6_c_mean<-mean(df6.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 7 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df7.sim<-df7.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df7.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df7.sim$day>0, 340,0))+4650+(ifelse(df7.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*6)+(340*6)+(724*6))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df7.sim<-df7.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df7.summary<- df7.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df7.overall<- df7.summary[!duplicated(df7.summary$id), ]
  #
  df7.overall2way90_90_7_u_mean<-mean(df7.summary$utility_mean)
  df7.overall2way90_90_7_c_mean<-mean(df7.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df7.survival<-df7.summary %>% filter(state%in%4)
  df7.sens2way90_90_7_u_mean<-mean(df7.survival$utility_mean)
  df7.sens2way90_90_7_c_mean<-mean(df7.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 8 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df8.sim<-df8.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df8.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df8.sim$day>0, 340,0))+4650+(ifelse(df8.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*7)+(340*7)+(724*7)) # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df8.sim<-df8.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df8.summary<- df8.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df8.overall<- df8.summary[!duplicated(df8.summary$id), ]
  #
  df8.overall2way90_90_8_u_mean<-mean(df8.summary$utility_mean)
  df8.overall2way90_90_8_c_mean<-mean(df8.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df8.survival<-df8.summary %>% filter(state%in%4)
  df8.sens2way90_90_8_u_mean<-mean(df8.survival$utility_mean)
  df8.sens2way90_90_8_c_mean<-mean(df8.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 9 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df9.sim<-df9.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df9.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df9.sim$day>0, 340,0))+4650+(ifelse(df9.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*8)+(340*8)+(724*8))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df9.sim<-df9.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                 state=="1"~u_nhic,
                                                 state=="3"~u_cmo,
                                                 state=="4"~u_discharge, 
                                                 state=="5"~u_died),
                              costs= case_when(state=="1"~c_nhic,
                                               state=="2"~c_hic,
                                               state=="3"~c_cmo,
                                               state=="4"~c_lastday,
                                               state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df9.summary<- df9.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df9.overall<- df9.summary[!duplicated(df9.summary$id), ]
  #
  df9.overall2way90_90_9_u_mean<-mean(df9.summary$utility_mean)
  df9.overall2way90_90_9_c_mean<-mean(df9.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df9.survival<-df9.summary %>% filter(state%in%4)
  df9.sens2way90_90_9_u_mean<-mean(df9.survival$utility_mean)
  df9.sens2way90_90_9_c_mean<-mean(df9.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 10 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df10.sim<-df10.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df10.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df10.sim$day>0, 340,0))+4650+(ifelse(df10.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*9)+(340*9)+(724*9))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC# assumping death at beggining of day and no extra costs 
  
  df10.sim<-df10.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df10.summary<- df10.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df10.overall<- df10.summary[!duplicated(df10.summary$id), ]
  #
  df10.overall2way90_90_10_u_mean<-mean(df10.summary$utility_mean)
  df10.overall2way90_90_10_c_mean<-mean(df10.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df10.survival<-df10.summary %>% filter(state%in%4)
  df10.sens2way90_90_10_u_mean<-mean(df10.survival$utility_mean)
  df10.sens2way90_90_10_c_mean<-mean(df10.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 11 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df11.sim<-df11.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df11.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df11.sim$day>0, 340,0))+4650+(ifelse(df11.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*10)+(340*10)+(724*10))  # assumping death at beggining of day and no extra costs and cost of 2 days of HIC # assumping death at beggining of day and no extra costs 
  
  df11.sim<-df11.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df11.summary<- df11.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df11.overall<- df11.summary[!duplicated(df11.summary$id), ]
  #
  df11.overall2way90_90_11_u_mean<-mean(df11.summary$utility_mean)
  df11.overall2way90_90_11_c_mean<-mean(df11.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df11.survival<-df11.summary %>% filter(state%in%4)
  df11.sens2way90_90_11_u_mean<-mean(df11.survival$utility_mean)
  df11.sens2way90_90_11_c_mean<-mean(df11.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 12 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df12.sim<-df12.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df12.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df12.sim$day>0, 340,0))+4650+(ifelse(df12.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*11)+(340*11)+(724*11))   # assumping death at beggining of day and no extra costs 
  
  df12.sim<-df12.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df12.summary<- df12.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df12.overall<- df12.summary[!duplicated(df12.summary$id), ]
  #
  df12.overall2way90_90_12_u_mean<-mean(df12.summary$utility_mean)
  df12.overall2way90_90_12_c_mean<-mean(df12.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df12.survival<-df12.summary %>% filter(state%in%4)
  df12.sens2way90_90_12_u_mean<-mean(df12.survival$utility_mean)
  df12.sens2way90_90_12_c_mean<-mean(df12.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 13 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df13.sim<-df13.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df13.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df13.sim$day>0, 340,0))+4650+(ifelse(df13.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*12)+(340*12)+(724*12)) # assumping death at beggining of day and no extra costs 
  
  df13.sim<-df13.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df13.summary<- df13.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df13.overall<- df13.summary[!duplicated(df13.summary$id), ]
  #
  df13.overall2way90_90_13_u_mean<-mean(df13.summary$utility_mean)
  df13.overall2way90_90_13_c_mean<-mean(df13.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df13.survival<-df13.summary %>% filter(state%in%4)
  df13.sens2way90_90_13_u_mean<-mean(df13.survival$utility_mean)
  df13.sens2way90_90_13_c_mean<-mean(df13.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 14 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df14.sim<-df14.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df14.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df14.sim$day>0, 340,0))+4650+(ifelse(df14.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*13)+(340*13)+(724*13))  # assumping death at beggining of day and no extra costs 
  
  df14.sim<-df14.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df14.summary<- df14.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df14.overall<- df14.summary[!duplicated(df14.summary$id), ]
  #
  df14.overall2way90_90_14_u_mean<-mean(df14.summary$utility_mean)
  df14.overall2way90_90_14_c_mean<-mean(df14.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df14.survival<-df14.summary %>% filter(state%in%4)
  df14.sens2way90_90_14_u_mean<-mean(df14.survival$utility_mean)
  df14.sens2way90_90_14_c_mean<-mean(df14.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 15 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df15.sim<-df15.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df15.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df15.sim$day>0, 340,0))+4650+(ifelse(df15.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*14)+(340*14)+(724*14))  # assumping death at beggining of day and no extra costs 
  
  df15.sim<-df15.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df15.summary<- df15.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df15.overall<- df15.summary[!duplicated(df15.summary$id), ]
  #
  df15.overall2way90_90_15_u_mean<-mean(df15.summary$utility_mean)
  df15.overall2way90_90_15_c_mean<-mean(df15.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df15.survival<-df15.summary %>% filter(state%in%4)
  df15.sens2way90_90_15_u_mean<-mean(df15.survival$utility_mean)
  df15.sens2way90_90_15_c_mean<-mean(df15.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 16 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df16.sim<-df16.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df16.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df16.sim$day>0, 340,0))+4650+(ifelse(df16.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*15)+(340*15)+(724*15))  # assumping death at beggining of day and no extra costs 
  
  df16.sim<-df16.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df16.summary<- df16.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df16.overall<- df16.summary[!duplicated(df16.summary$id), ]
  #
  df16.overall2way90_90_16_u_mean<-mean(df16.summary$utility_mean)
  df16.overall2way90_90_16_c_mean<-mean(df16.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df16.survival<-df16.summary %>% filter(state%in%4)
  df16.sens2way90_90_16_u_mean<-mean(df16.survival$utility_mean)
  df16.sens2way90_90_16_c_mean<-mean(df16.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 17 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df17.sim<-df17.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df17.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df17.sim$day>0, 340,0))+4650+(ifelse(df17.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*16)+(340*16)+(724*16))  # assumping death at beggining of day and no extra costs 
  
  df17.sim<-df17.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df17.summary<- df17.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df17.overall<- df17.summary[!duplicated(df17.summary$id), ]
  #
  df17.overall2way90_90_17_u_mean<-mean(df17.summary$utility_mean)
  df17.overall2way90_90_17_c_mean<-mean(df17.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df17.survival<-df17.summary %>% filter(state%in%4)
  df17.sens2way90_90_17_u_mean<-mean(df17.survival$utility_mean)
  df17.sens2way90_90_17_c_mean<-mean(df17.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 18 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df18.sim<-df18.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df18.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df18.sim$day>0, 340,0))+4650+(ifelse(df18.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*17)+(340*17)+(724*17))  # assumping death at beggining of day and no extra costs 
  
  df18.sim<-df18.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df18.summary<- df18.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df18.overall<- df18.summary[!duplicated(df18.summary$id), ]
  #
  df18.overall2way90_90_18_u_mean<-mean(df18.summary$utility_mean)
  df18.overall2way90_90_18_c_mean<-mean(df18.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df18.survival<-df18.summary %>% filter(state%in%4)
  df18.sens2way90_90_18_u_mean<-mean(df18.survival$utility_mean)
  df18.sens2way90_90_18_c_mean<-mean(df18.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 19 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df19.sim<-df19.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df19.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df19.sim$day>0, 340,0))+4650+(ifelse(df19.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*18)+(340*18)+(724*18))  # assumping death at beggining of day and no extra costs 
  
  df19.sim<-df19.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df19.summary<- df19.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df19.overall<- df19.summary[!duplicated(df19.summary$id), ]
  #
  df19.overall2way90_90_19_u_mean<-mean(df19.summary$utility_mean)
  df19.overall2way90_90_19_c_mean<-mean(df19.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df19.survival<-df19.summary %>% filter(state%in%4)
  df19.sens2way90_90_19_u_mean<-mean(df19.survival$utility_mean)
  df19.sens2way90_90_19_c_mean<-mean(df19.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 20 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df20.sim<-df20.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df20.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df20.sim$day>0, 340,0))+4650+(ifelse(df20.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*19)+(340*19)+(724*19))  # assumping death at beggining of day and no extra costs 
  
  df20.sim<-df20.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df20.summary<- df20.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df20.overall<- df20.summary[!duplicated(df20.summary$id), ]
  #
  df20.overall2way90_90_20_u_mean<-mean(df20.summary$utility_mean)
  df20.overall2way90_90_20_c_mean<-mean(df20.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df20.survival<-df20.summary %>% filter(state%in%4)
  df20.sens2way90_90_20_u_mean<-mean(df20.survival$utility_mean)
  df20.sens2way90_90_20_c_mean<-mean(df20.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 21 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df21.sim<-df21.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df21.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df21.sim$day>0, 340,0))+4650+(ifelse(df21.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*20)+(340*20)+(724*20))  # assumping death at beggining of day and no extra costs 
  
  df21.sim<-df21.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df21.summary<- df21.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df21.overall<- df21.summary[!duplicated(df21.summary$id), ]
  #
  df21.overall2way90_90_21_u_mean<-mean(df21.summary$utility_mean)
  df21.overall2way90_90_21_c_mean<-mean(df21.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df21.survival<-df21.summary %>% filter(state%in%4)
  df21.sens2way90_90_21_u_mean<-mean(df21.survival$utility_mean)
  df21.sens2way90_90_21_c_mean<-mean(df21.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 22 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df22.sim<-df22.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df22.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df22.sim$day>0, 340,0))+4650+(ifelse(df22.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*21)+(340*21)+(724*21)) # assumping death at beggining of day and no extra costs 
  
  df22.sim<-df22.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df22.summary<- df22.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df22.overall<- df22.summary[!duplicated(df22.summary$id), ]
  #
  df22.overall2way90_90_22_u_mean<-mean(df22.summary$utility_mean)
  df22.overall2way90_90_22_c_mean<-mean(df22.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df22.survival<-df22.summary %>% filter(state%in%4)
  df22.sens2way90_90_22_u_mean<-mean(df22.survival$utility_mean)
  df22.sens2way90_90_22_c_mean<-mean(df22.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 23 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df23.sim<-df23.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df23.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df23.sim$day>0, 340,0))+4650+(ifelse(df23.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*22)+(340*22)+(724*22)) # assumping death at beggining of day and no extra costs 
  
  df23.sim<-df23.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df23.summary<- df23.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df23.overall<- df23.summary[!duplicated(df23.summary$id), ]
  #
  df23.overall2way90_90_23_u_mean<-mean(df23.summary$utility_mean)
  df23.overall2way90_90_23_c_mean<-mean(df23.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df23.survival<-df23.summary %>% filter(state%in%4)
  df23.sens2way90_90_23_u_mean<-mean(df23.survival$utility_mean)
  df23.sens2way90_90_23_c_mean<-mean(df23.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 24 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df24.sim<-df24.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df24.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df24.sim$day>0, 340,0))+4650+(ifelse(df24.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*23)+(340*23)+(724*23))  # assumping death at beggining of day and no extra costs 
  
  df24.sim<-df24.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df24.summary<- df24.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df24.overall<- df24.summary[!duplicated(df24.summary$id), ]
  #
  df24.overall2way90_90_24_u_mean<-mean(df24.summary$utility_mean)
  df24.overall2way90_90_24_c_mean<-mean(df24.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df24.survival<-df24.summary %>% filter(state%in%4)
  df24.sens2way90_90_24_u_mean<-mean(df24.survival$utility_mean)
  df24.sens2way90_90_24_c_mean<-mean(df24.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 25 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df25.sim<-df25.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df25.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df25.sim$day>0, 340,0))+4650+(ifelse(df25.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*24)+(340*24)+(724*24)) # assumping death at beggining of day and no extra costs 
  
  df25.sim<-df25.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df25.summary<- df25.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df25.overall<- df25.summary[!duplicated(df25.summary$id), ]
  #
  df25.overall2way90_90_25_u_mean<-mean(df25.summary$utility_mean)
  df25.overall2way90_90_25_c_mean<-mean(df25.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df25.survival<-df24.summary %>% filter(state%in%4)
  df25.sens2way90_90_25_u_mean<-mean(df25.survival$utility_mean)
  df25.sens2way90_90_25_c_mean<-mean(df25.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 26 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df26.sim<-df26.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df26.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df26.sim$day>0, 340,0))+4650+(ifelse(df26.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*25)+(340*25)+(724*25))  # assumping death at beggining of day and no extra costs 
  
  df26.sim<-df26.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df26.summary<- df26.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df26.overall<- df26.summary[!duplicated(df26.summary$id), ]
  #
  df26.overall2way90_90_26_u_mean<-mean(df26.summary$utility_mean)
  df26.overall2way90_90_26_c_mean<-mean(df26.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df26.survival<-df26.summary %>% filter(state%in%4)
  df26.sens2way90_90_26_u_mean<-mean(df26.survival$utility_mean)
  df26.sens2way90_90_26_c_mean<-mean(df26.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 27 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df27.sim<-df27.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df27.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df27.sim$day>0, 340,0))+4650+(ifelse(df27.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*26)+(340*26)+(724*26))  # assumping death at beggining of day and no extra costs 
  
  df27.sim<-df27.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df27.summary<- df27.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df27.overall<- df27.summary[!duplicated(df27.summary$id), ]
  #
  df27.overall2way90_90_27_u_mean<-mean(df27.summary$utility_mean)
  df27.overall2way90_90_27_c_mean<-mean(df27.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df27.survival<-df27.summary %>% filter(state%in%4)
  df27.sens2way90_90_27_u_mean<-mean(df27.survival$utility_mean)
  df27.sens2way90_90_27_c_mean<-mean(df27.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 28 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df28.sim<-df28.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df28.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df28.sim$day>0, 340,0))+4650+(ifelse(df28.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*27)+(340*27)+(724*27))  # assumping death at beggining of day and no extra costs 
  
  df28.sim<-df28.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df28.summary<- df28.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df28.overall<- df28.summary[!duplicated(df28.summary$id), ]
  #
  df28.overall2way90_90_28_u_mean<-mean(df28.summary$utility_mean)
  df28.overall2way90_90_28_c_mean<-mean(df28.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df28.survival<-df28.summary %>% filter(state%in%4)
  df28.sens2way90_90_28_u_mean<-mean(df28.survival$utility_mean)
  df28.sens2way90_90_28_c_mean<-mean(df28.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 29 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df29.sim<-df29.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df29.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df29.sim$day>0, 340,0))+4650+(ifelse(df29.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*28)+(340*28)+(724*28))  # assumping death at beggining of day and no extra costs 
  
  df29.sim<-df29.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df29.summary<- df29.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean=(sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df29.overall<- df29.summary[!duplicated(df29.summary$id), ]
  #
  df29.overall2way90_90_29_u_mean<-mean(df29.summary$utility_mean)
  df29.overall2way90_90_29_c_mean<-mean(df29.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df29.survival<-df29.summary %>% filter(state%in%4)
  df29.sens2way90_90_29_u_mean<-mean(df29.survival$utility_mean)
  df29.sens2way90_90_29_c_mean<-mean(df29.survival$costs_sum)
  
  #-------------------------------------------------------------------------------
  
  # 30 day hic ////////////////////////////////////////////////////////////////////
  
  # Create flags for sequential days  
  df30.sim<-df30.sim %>% mutate(day=(streak_run(id, k=1000)-1))
  # Create costs
  c_nhic<-3805+662+(ifelse(df30.sim$day>0, 340,0))
  c_hic<-3805+662+(ifelse(df30.sim$day>0, 340,0))+4650+(ifelse(df30.sim$day%in%0, 928.99, 0))
  c_cmo<-3805+988
  c_lastday<-353.00+(3805+4650+928+(775*29)+(340*29)+(724*29))  # assumping death at beggining of day and no extra costs 
  
  df30.sim<-df30.sim %>% mutate(utility= case_when(state=="2"~u_hic,
                                                   state=="1"~u_nhic,
                                                   state=="3"~u_cmo,
                                                   state=="4"~u_discharge, 
                                                   state=="5"~u_died),
                                costs= case_when(state=="1"~c_nhic,
                                                 state=="2"~c_hic,
                                                 state=="3"~c_cmo,
                                                 state=="4"~c_lastday,
                                                 state=="5"~c_lastday)) 
  
  # Get means of costs and utility 
  df30.summary<- df30.sim %>% 
    group_by(id) %>% 
    mutate(utility_mean= (sum(utility)+sum(rep(0.5, length(unique(id)))))/(length(utility)+length(rep(0.5, length(unique(id))))),
           costs_sum= sum(costs)) %>% 
    ungroup() 
  
  # Overall utility and cost of strategy at N days
  
  df30.overall<- df30.summary[!duplicated(df30.summary$id), ]
  #
  df30.overall2way90_90_30_u_mean<-mean(df30.summary$utility_mean)
  df30.overall2way90_90_30_c_mean<-mean(df30.summary$costs_sum)
  
  # Mean survival utility and costs at N dayss
  df30.survival<-df30.summary %>% filter(state%in%4)
  df30.sens2way90_90_30_u_mean<-mean(df30.survival$utility_mean)
  df30.sens2way90_90_30_c_mean<-mean(df30.survival$costs_sum)
  
  df1.sens2way90_90_1<-df1.summary
  df2.sens2way90_90_2<-df2.summary
  df3.sens2way90_90_3<-df3.summary
  df4.sens2way90_90_4<-df4.summary
  df5.sens2way90_90_5<-df5.summary
  df6.sens2way90_90_6<-df6.summary
  df7.sens2way90_90_7<-df7.summary
  df8.sens2way90_90_8<-df8.summary
  df9.sens2way90_90_9<-df9.summary
  df10.sens2way90_90_10<-df10.summary
  df11.sens2way90_90_11<-df11.summary
  df12.sens2way90_90_12<-df12.summary
  df13.sens2way90_90_13<-df13.summary
  df14.sens2way90_90_14<-df14.summary
  df15.sens2way90_90_15<-df15.summary
  df16.sens2way90_90_16<-df16.summary
  df17.sens2way90_90_17<-df17.summary
  df18.sens2way90_90_18<-df18.summary
  df19.sens2way90_90_19<-df19.summary
  df20.sens2way90_90_20<-df20.summary
  df21.sens2way90_90_21<-df21.summary
  df22.sens2way90_90_22<-df22.summary
  df23.sens2way90_90_23<-df23.summary
  df24.sens2way90_90_24<-df24.summary
  df25.sens2way90_90_25<-df25.summary
  df26.sens2way90_90_26<-df26.summary
  df27.sens2way90_90_27<-df27.summary
  df28.sens2way90_90_28<-df28.summary
  df29.sens2way90_90_29<-df29.summary
  df30.sens2way90_90_30<-df30.summary
  
  
  
  
  rm(df1.sim)
  rm(df2.sim)
  rm(df3.sim)
  rm(df4.sim)
  rm(df5.sim)
  rm(df6.sim)
  rm(df7.sim)
  rm(df8.sim)
  rm(df9.sim)
  rm(df10.sim)
  rm(df11.sim)
  rm(df12.sim)
  rm(df13.sim)
  rm(df14.sim)
  rm(df15.sim)
  rm(df16.sim)
  rm(df17.sim)
  rm(df18.sim)
  rm(df19.sim)
  rm(df20.sim)
  rm(df21.sim)
  rm(df22.sim)
  rm(df23.sim)
  rm(df24.sim)
  rm(df25.sim)
  rm(df26.sim)
  rm(df27.sim)
  rm(df28.sim)
  rm(df29.sim)
  rm(df30.sim)
}


# Results 90 90 -----
sens2way90_90_30.overall_c_vect<-c()
for (i in 1:30){
  sens2way90_90_30.overall_c_vect[i]<-get(paste("df", i, ".overall2way90_90_", i, "_c_mean",sep = "")) 
}

sens2way90_90_30.overall_u_vect<-c()
for (i in 1:30){
  sens2way90_90_30.overall_u_vect[i]<-get(paste("df", i, ".overall2way90_90_", i, "_u_mean",sep = ""))
}

sens2way90_90_30.survival_c_vect<-c()
for (i in 1:30){
  sens2way90_90_30.survival_c_vect[i]<-get(paste("df", i, ".sens2way90_90_",i,"_c_mean",sep = "")) 
}

sens2way90_90_30.survival_u_vect<-c()
for (i in 1:30){
  sens2way90_90_30.survival_u_vect[i]<-get(paste("df", i, ".sens2way90_90_",i,"_u_mean",sep = ""))
}

sens2way90_90_30.ce_results<- matrix(c(sens2way90_90_30.overall_c_vect,sens2way90_90_30.overall_u_vect,sens2way90_90_30.survival_c_vect,sens2way90_90_30.survival_u_vect), nrow=30, byrow=FALSE)
colnames(sens2way90_90_30.ce_results) <- c("overall_c","overall_u","survival_c","survival_u")






